<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005-Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>笔记本 on 桃园</title>
    <link>/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/</link>
    <description>Recent content in 笔记本 on 桃园</description>
    <image>
      <title>桃园</title>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 19 Feb 2023 20:24:26 +0800</lastBuildDate><atom:link href="/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2023 关于图像互动技术前景思考</title>
      <link>/posts/2023/02-19-%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%83%8F%E4%BA%92%E5%8A%A8%E6%8A%80%E6%9C%AF%E5%89%8D%E6%99%AF%E6%80%9D%E8%80%83/</link>
      <pubDate>Sun, 19 Feb 2023 20:24:26 +0800</pubDate>
      
      <guid>/posts/2023/02-19-%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%83%8F%E4%BA%92%E5%8A%A8%E6%8A%80%E6%9C%AF%E5%89%8D%E6%99%AF%E6%80%9D%E8%80%83/</guid>
      <description>前言 很久没有在外部写文章，跟我的读者们交流了，一些知心一点的同事，也离职了。所以最近感觉有点缺外部的输入，还是想写点文章，跟各种各样的朋友交流一下。 熟悉我的人应该知道，去年参加了支付宝的五福的前端开发，主要负责的是 AI 年画。 年画里面其实是有很多图形互动技术，比如秒轮廓，让后让兔子动起来，然后整个过度动画到装饰页面，装饰页面对于贴纸相关的操作，里面其实用到了大量的图形互动技术，主要用的是蚂蚁的 2D 互动引擎 Tiny.js。
后面我会整理一下，把年画的一些方案公布出来，有兴趣的可以看一下。
在做五福之前，我从来没有接触互动技术，对于如何开发互动应用没有任何概念，另外像五福这种大促时间又紧，任务又重，压力十分之大。 还好跟我合作的 partner 是懂的，并且有互动技术大佬给我们当技术顾问，所以才能顺利的上线并取得了不错的效果。
工作内容发生变化 回到我自己今天写这篇文章的目的，主要是我的工作内容要发生变化了，以后要从一个传统前端要转向一个图形互动技术方向的前端了。 这意味着什么呢？
服务的用户从公司内部用户转向了公司外部的 C 端用户。 用户量更大，意味着要求就更高，挑战就更大，也容易出故障。 技术方向发生了分叉，得重新开始学，学习任务极大。 互动技术方向对于我来说几乎是从 0 开始学，前面几年的前端经验积累用处就没那么大了，对于 React、构建工具、微前端这样的知识未来就不会再花很多的时间去学习了。 需要从 0 开始学习互动技术方向的内容：图形学、WebGL、2D 引擎库、3D 引擎库等等，还得稍微补一些数学知识。这块从我目前的学习以及同事了解，学习内容非常的多，而且对专业要求极高，不亚于传统前端的技术栈。 变化的原因主要是组内对于互动技术这块需要更多的人才，今年这块的业务会更多，另外就是在五福里接触过之后，觉得这块还是比较有意思的，特别是搞 3D 的，比如今年的福气乐园，看来就比较高大上。 两者结合，今年就准备开始走这个方向了。 不过对于现在来说，换方向对于职业发展有一些风险的，我也是在思考过后才决定的。
前景思考 对于换职业方向，其实我觉得是一件很重要的事情，需要慎重，影响未来的发展，尽量还是朝着前景好的方向转。 我记一下我现在对这个方向的思考，如果你刚好准备换方向可以参考一下。
担心的 路会往专精方向走，需要接受找工作没那么多公司招这个岗位的情况。 目前每个互联网公司都会招传统写页面的前端，但是对于图像互动技术的前端的岗位需求会少很多。 门槛高相对较高、知识的广度和深度往往不限于前端。 比如需要掌握图形学、部分数学这样非常专业的知识，相对还是比较难一些。 工程化相对落后，开发体验相对较差。 这块的知识体系跟图形/游戏行业是紧密相连的，整体看仅前端范围内还是比其它场景更大的端和场景弱不少，包括应用场景、专业度、生产模式工作流啥的，都比较落后。 看好的 就是因为门槛高，才容易形成壁垒，不容易别替换(当然，反过来，也不容易替换别人，看自己怎么看待)。 在随着未来 AI 的发展，同事随着年龄变大，才不容易被年轻人或者 AI 替代。 看好未来人机交互的进步，甚至是变革。 主要看好两个方向 元宇宙 (不看好的朋友请保留意见)。现在国内腾讯(QQ 小窝)、阿里(淘宝人生、天猫二楼的 3D体验空间)、百度(希壤)、网易(网易瑶台)等都在布局这方面的，国外的更不用说了，Facebook 都直接改名为 meta 了。 人机交互变革。目前来看前端主要是负责电脑或者手机显示器和人进行交互，未来以后可能是 VR、AR 进行交互。 最后 通过上面的分析，主要是看好未来人机交互的进步，才选择了这个方向。就算以后这个方向发展得不好，有了这些基础知识还是可以往其他的方向，比如一些设计行业(家装设计)、可视化、游戏等行业进行发展。
最后如果你来选，你会怎么来选呢？欢迎留言说一下你的看法。</description>
    </item>
    
    <item>
      <title>【实战】分享一个花了 499 学到的写作方法：问题 &#43; 回答</title>
      <link>/posts/2022/%E5%AE%9E%E6%88%98%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%8A%B1%E4%BA%86-499-%E5%AD%A6%E5%88%B0%E7%9A%84%E5%86%99%E4%BD%9C%E6%96%B9%E6%B3%95%E9%97%AE%E9%A2%98-&#43;-%E5%9B%9E%E7%AD%94/</link>
      <pubDate>Tue, 01 Mar 2022 19:25:00 +0000</pubDate>
      
      <guid>/posts/2022/%E5%AE%9E%E6%88%98%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%8A%B1%E4%BA%86-499-%E5%AD%A6%E5%88%B0%E7%9A%84%E5%86%99%E4%BD%9C%E6%96%B9%E6%B3%95%E9%97%AE%E9%A2%98-&#43;-%E5%9B%9E%E7%AD%94/</guid>
      <description>大家好，我是桃翁，一个不止前端的前端工程师。
前言 前几天在一个写作课里学习到一个写作技巧：文章 = 问题 + 答案。
大概就是说当你看到一个话题，想写成文章的时候，可以想一想你针对这个话题会有哪些问题。然后挨个回答一下这个问题，把回答组合一下，就成为一篇文章了。
我发现这个方法跟我有一些文章的方法很像，但是我并没有这样总结出来，而是在写的时候自然而然就这么去设计了。
以这篇用 husky 和 lint-staged 构建代码检查工作流 文章举个例，做一个实战教学，建议看下面的内容的时候先阅读一下这篇文章。
实战 一、提问题
我要介绍的主题是：构建代码检查工作流。
针对这个主题，我想到了几个问题：
什么是代码检查？ 什么情况下需要用到代码检查？ 怎么做代码检查？ 怎么把代码检查做成工作流？ 注意：每个人想到的问题不一样，所以写的思路可能也不太一样。
如果想不到什么问题，我这里给到的建议可以提 what、when、why、how 这样的问题，这也是一种写作方法，后面再讲。
根据以上的思路就可以把大纲列出来。
二、列大纲 其实一般可以直接把这些问题当做大纲。
但是我这篇文章后面又考虑到怎么做代码检查东西比较多，只有在知道了最基础的代码检查方法之后，才可能推到出要用 husky 和 lint-staged 这样的工具。
所以我最终还是以陈述的方式为大纲，一步一步的引导，最终把把代码检查做成工作流。
所以最终这篇文章的目录大概是这样的。
前言里面回答了什么是代码检查和什么情况下需要用到代码检查。
在最简单的方法这个大纲里就是怎么做代码检查。
最后的三个都是讲怎么把代码检查做成工作流。
三、回答问题
大纲做好了，就开始填内容了。
前言就没什么好说的了，主要是介绍背景，然后引出我们怎么做代码检查。
接下来就写了最简单的方法来做代码检查，再提出了两个问题。
其实这两个问题就是来解决工作流的问题。
下面的两个段落就是来解决这两个问题，看到没有，这又是问题 + 回答的模式，不仅大话题可以引发问题，还可以问题里套问题。
标题：通过 scripts 来解决如果检测工具多，需要多次处理，解决问题 1.
标题：通过 husky(哈士奇)来解决容易遗忘的问题，解决问题 2.
所以整篇文章都是以问题驱动，一步一步引导读者把小问题解决了，最终串起来就把大问题解决了。
总结 总结一下，这种问题 + 回答的写作方式有什么好处：
**段落之间具有连贯性。**每个标题之前都是承上启下，都是来解决上面一个标题的问题，然后引出下面一个问题。 读者读起来很流畅，会产生恍然大悟的感觉。 最后在复盘一下这篇用 husky 和 lint-staged 构建代码检查工作流 我觉得不好的地方：
标题不够小白，导致受众不够多，导致打开率低。 在前言里背景介绍得不够细致，如果以前没做过这方面的，可能体感不强。 </description>
    </item>
    
    <item>
      <title>img 和 picture 的区别和使用场景</title>
      <link>/posts/%E6%8A%80%E6%9C%AF/img-he-picture-de-qu-bie-he-shi-yong-chang-jing/</link>
      <pubDate>Thu, 01 Jul 2021 15:12:00 +0000</pubDate>
      
      <guid>/posts/%E6%8A%80%E6%9C%AF/img-he-picture-de-qu-bie-he-shi-yong-chang-jing/</guid>
      <description>img img 是 HTML4 时就有的标签， 至今仍然是在网页中嵌入图片的最常用的方式。 与 &amp;lt;span&amp;gt;, &amp;lt;em&amp;gt; 等标签一样属于行内标签 （准确地说属于 Phrasing Content）。下面是一个示例：
&amp;lt;img src=&amp;#34;favicon72.png&amp;#34; alt=&amp;#34;MDN logo&amp;#34; srcset=&amp;#34;favicon144.png 2x&amp;#34;&amp;gt; img 其实也可以控制在高清屏幕采用哪个图片，适合用在移动端
picture &amp;lt;picture&amp;gt; &amp;lt;source srcset=&amp;#34;/media/cc0-images/surfer-240-200.jpg&amp;#34; media=&amp;#34;(min-width: 800px)&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;/media/cc0-images/painted-hand-298-332.jpg&amp;#34; alt=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/picture&amp;gt; 要决定加载哪个URL，user agent 检查每个 &amp;lt;source&amp;gt; 的 srcset、media 和 type 属性，来选择最匹配页面当前布局、显示设备特征等的兼容图像。
picture 就可以方便的控制在某种媒体类型，加载哪个图片。感觉比较适合做响应式用。
相比 img 标签，picture 提供了更丰富的响应式资源选择方式；
picture 是 HTML5 中定义新标签， 其中可以定义若干个 &amp;lt;source&amp;gt;，浏览器会匹配 &amp;lt;source&amp;gt; 的 type, media, srcset 等属性， 来找到最适合当前布局、视口宽度、设备像素密度 的一个去下载。 为了向下兼容不识别 &amp;lt;picture&amp;gt; 和 &amp;lt;source&amp;gt; 的浏览器，&amp;lt;picture&amp;gt; 中还可以写一个 &amp;lt;img&amp;gt; 作为 fallback。</description>
    </item>
    
    <item>
      <title>桃翁2020年度总结</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/326/</link>
      <pubDate>Sun, 24 Jan 2021 19:19:06 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/326/</guid>
      <description>前言 2020 年真的是不平凡的一年， 疫情夺走了很多人的生命，还夺走了我的工作(公司因为疫情被迫裁员)，所以今年换了工作来到了蚂蚁，在蚂蚁的工作经历跟之前在蘑菇街完全不一样。。。
工作 来蚂蚁这半年我觉得在工作上的成长比我之前在蘑菇街一年半的成长都还多，经历比较丰富。
阿里一直都有拥抱变化的文化，我来大概五个月的时候就换了三个主管，经历了好几次的组织架构变动，我刚进来的时候同组的同事（之前组内大概 12 人）到现在还跟我一组的仅剩一名。
不过随着每一次的变动，我的分工也越来越清晰，从最开始哪里缺人就去哪里，再到负责一块模糊的业务线，再到一个人带着 3 个合作伙伴负责一整个业务线，再到现在有了 3 个正式加 6 个合作伙伴的阵型。
作为整个业务线的 owner 不仅要接需求还要去预测业务未来的走向，这样才能在技术上做好提前的准备，当业务真的来了，才能快速的支持。这个是我在试用期答辩的时候面试官给到我的期望，这个我在之前试用期结束后有写过。
原来我是个业务性选手？？？？
只不过那个时候我只是觉得这个话说得很对，并没有体感，但是当我在负责整块业务的，以及带着一群人在做的期间，作为业务 owner 必须得去思考这些了，因为我们这里业务发展得很快，虽然我们业务团队成员变多了，但是需求也越来越多，所以如果不提前去做一些业务上的预测，技术上的沉淀，当业务发展再快点，需求再多一些我们目前的这些人就消化得很吃力，甚至吃不下，这是我今年非常大的一个收获。
对于这个收获其实我之前想过我为什么可以得到，我刚开始把原因归结到了运气，因为我能有机会负责一条业务线的东西是由于我的师兄以及其他大部分同事都走了，现有的业务只能由留下来的人去承担，所以我当时想到了那些得到晋升或者 375 的同学是不是运气好，可以做到好的业务或者技术。但是又细想如果机会给你了，如果没有把它当机会，而且他这块重重的东西当做负担，或者平常心看待，可能也做不出什么优秀的成果。
但是一件平凡的事情如果交给一个优秀的人去做，大概率还是会做出优秀的东西。
所以最后我得出的结论是运气可以让一个准备好了，有实力的人加速成功，但不会让一个平凡的人获得成功。
学习与写作 当我在准备写总结的时候，我本以为今年读的书(去年 20 本)会比去年要少，没想到今年还略多一点，读完的都有 29 本了，但是我明显能感觉到今年花在读书上的时间变少了，特别是在入职蚂蚁之后，属于自己的时间更少了。
我想可能是渐渐的找到了读书的方法，越读越快了吧。
下面是我今年读书列表：豆瓣主页
在写作方面今年公开文章产量就很低了，只有 13 篇，基本都是上半年写的，下半年入职蚂蚁之后就基本没怎么写了，一方面是因为确实工作太忙了，另一方面需要在公司内部写不少的文档。
文章列表见博客：前端桃园
技术 很遗憾今年对技术没有做什么深的研究，主要是业务太忙，把我对技术的追求抹平了，整天就想着如何能把业务支持下去。
来蚂蚁半年没写过 React，大部分时间写钉钉小程序和支付宝小程序，另外还写了将近两个月的云凤蝶。
在我没怎么接触过小程序前，对小程序有刻板的印象，总觉得小程序限制太多，很简单，没有什么意思，当然也不知道其原理，所以对小程序比较抵触。
但是当我写了两三个月之后，对小程序了解得越来越多，但是另一方面发现自己对小程序了解得越来越少，为什么这么说呢？
当我还没怎么接触小程序的时候可能想到的就只有 小程序的语法是什么样的，小程序是怎么运行的，但是写得越来越久，发现自己以前的视野太小了，整个小程序生态还有很多东西可以去研究，越写越发现自己不会的越来越多，这些不知道反而让我对小程序产生了兴趣，感觉可以有新的东西值得去研究。
比如小程序他是怎么运行的，跟原生、H5 之前的区别在哪里，关联是什么，view 层是怎么渲染的，逻辑部分的 js 是怎么执行的，与客户端，容器是怎么通信，怎么打包的，怎么编译的，编译出来的东西又是什么，怎么发布上架的，以及什么情况下使用小程序技术栈、什么情况下使用 h5 技术栈，等等等，这些没有搞明白的问题深深的让我对小程序产生了兴趣。
所以明年在技术上的一个目标就是深入小程序。
生活 家人 生活方面最令我开心的就是女朋友在 11 月份从上海辞职，来到了杭州，结束了 3 年的异地恋，每天下班后有个人在家里等的感觉真好！
旅游 西安旅游
国庆去西安旅游了，在去西安之前我们还先去南京溧水参加了【咪豆音乐节】。这次是准备得最充分的一次，还做了一些攻略。
重庆 Outing
重庆三峡博物馆
江景：重庆洪崖洞夜景</description>
    </item>
    
    <item>
      <title>蚂蚁、字节、滴滴面试经历总结</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/321/</link>
      <pubDate>Mon, 18 May 2020 12:49:46 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/321/</guid>
      <description>前言 最近两篇面试以及离职相关的文章不容错过哦。
离开蘑菇街后，我最近的一些想法
拼多多和酷家乐面试总结
今年面试还是比较顺的，面了五家公司(酷家乐、拼多多、字节、滴滴、蚂蚁)，都过了。
在文章里我不仅会列出面试题，还会给到一些答题建议，个人能力有限，也不能保证我回答都正确，如果有错误，希望能纠正我。
字节 一面 说一下浏览器缓存
浏览器缓存分为强缓存和协商缓存，强缓存会直接从浏览器里面拿数据，协商缓存会先访问服务器看缓存是否过期，再决定是否从浏览器里面拿数据。
控制强缓存的字段有：Expires和Cache-Control，Expires 和 Cache-Control。
控制协商缓存的字段是：Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中 Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。
cookie 与 session 的区别
Session 是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中； Cookie 是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现 Session 的一种方式。
详见：COOKIE和SESSION有什么区别？
浏览器如何做到 session 的功能的。
其实就是考察 http 怎么处理无状态是怎么处理的，具体可见 COOKIE和SESSION有什么区别？里面的答案。
解释一下：csrf 和 xss
XSS：恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。
CSRF：CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。
详见：前端安全面试题
怎么防止 csrf 和 xss
详见：前端安全面试题
跨域的处理方案有哪些
常用的：jsonp、CORS、nginx 代理，完整的大概是九种，可见：九种跨域方式实现原理（完整版）
CORS 是如何做的？</description>
    </item>
    
    <item>
      <title>Mac写作环境搭建</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/319/</link>
      <pubDate>Sun, 10 May 2020 21:35:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/319/</guid>
      <description>前言 写作是我一直都提倡每个人去做的一件事情，也许你是通过写作来进行总结，也许你是通过写作生计，也许像我一样写文章提升自己的影响力，不管怎么样，工欲善其事必先利其器，今天我将两年以来最好用的一套写作软件配置介绍给大家。
在这篇文章中你可以了解到三个工具：
最好用的 markdown 写作编辑器 mac 平台专属的图床工具 选取合适的工具美化排版 写作软件(Typora) 我使用过很多的 markdown 编辑器，bear、MWeb、UIysses、印象笔记等等，每个都号称最专业的 markdown 软件，但是这些软件对于图片的处理都不是特别满足我的需求。
只有 typora，让文字和图片完美的结合在一起，并且支持将文章复制到其他平台。
接下来，我将介绍一下 Typora 吸引我的几个地方：
1. 所见即所得的特性 实时预览，不需要分两栏。
2. 自定义主题。 你可以从官网下载主题，或者自己写主题。
3. 大纲与文章目录。 自动识别标题，展示出目录。
4. 可以方便的将图片自动上传到自己的图床上 大部分的写作编辑器都需要手动的去将图片上传到图床上，然后再把链接写到编辑器来，这样来回切换很麻烦。typora 可以自动识别图片然后直接上传上自己的图床上。
当你把图片直接拖到编辑器，或者说截屏之后复制到编辑器的时候，就会让你选择是否上传图片，点击上传图片就可以直接上传到图床上，然后将链接替换成图床的链接。
你只需要在偏好设置图像的上传服务设置为 iPic 即可，下面我会介绍 iPic。
上传服务这里还可以选择自定义命令，也就是说你可以自己写一个上传图片的 shell 然后上传到自己的图床上，图片处理非常的强大。
5. 可以直接复制富文本格式(包括主题样式)到公众号或者其他支持富文本的地方。 公众号后台排版其实不是特别好用，另外我们程序员往往喜欢写 markdown 而不是富文本，所以就需要一个将 markdown 转富文本的一个工具，typora 在这方面也很擅长。
图片处理(iPic 和 iPic Move) 怎么获得免费图床 对于图床这个东西，我觉得还是用自己的比较好，或者说付费的图床，而不是选用网上一些免费的，比如微博图床，其他网站的图床(比如掘金)，使用别人的图床虽然免费，但是一旦加了防盗链，你想迁移图片就非常的麻烦(我就踩过这个坑)，那么这个时候免费的其实就更贵了。
所以很早我就开始研究怎么能用上专业的，自己的图床，我就发现了七牛云这个良心云服务商。七牛云对于新用户免费送 10 个 G 的空间，你可以将图片通过对象存储的方式存在七牛云里。而且这些图片还是都可以增加 CDN 的。
具体如何去创建自己的对象存储空间，你可以参考官网教程。
有了图床，如何将图片上传到图床上面去呢？在 Mac 下 iPic 就是一个很好的工具。
iPic iPic 是一个 Markdown 图床上传工具，将你的图片上传到你的图床上后，你可以得到一个 markdown 格式的图片文本，然后你可以直接复制到你的编辑器中。</description>
    </item>
    
    <item>
      <title>拼多多和酷家乐面试经历总结</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/318/</link>
      <pubDate>Thu, 07 May 2020 13:17:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/318/</guid>
      <description>前言 离职原因看我这篇文章吧：离开蘑菇街后，我最近的一些想法，然后不得不去找工作恰饭呀。
我目前面了五家公司：滴滴、蚂蚁、拼多多、酷家乐、字节跳动，拼多多和酷家乐基本已拿到 offer，蚂蚁二面完了，滴滴和字节即将三面，我先把我已经面过的面经先总结出来，其他的不管过没过，这周内我都会总结出来，希望能给到正在找工作同学的帮助。
在文章里我不仅会列出面试题，还会给到一些答题建议，个人能力有限，也不能保证我回答都正确，如果有错误，希望能纠正我。
酷家乐 酷家乐是我最早面的一家公司，还没被裁的那周二刚好面完，结果周五就被裁了，可能这就是冥冥之中吧。
面试的部门是工具组，是酷家乐最核心的部门，四面面试官跟我说我面的组是工具团队中的最核心组，会涉及到一些图像相关的技术，比如 Tree.js、WebGL等，所以这个组其实也挺好的，感觉能学到不少技术。
一面(电话面) 你在项目如何优化的
我在简历里面写到了性能优化相关的，所以这个问题。
你做的项目有什么值得说的
基本上就是考察项目的亮点，可以说一些项目难点是如何解决的，或者介绍一些项目中用到的牛逼的技术。
Ts 有什么优势
讲道理所有现在在网上能查到的优势都是得益于静态语言的优势。
type 和 interface 的区别
这是一个高频题，如果考察 TS，这应该是最容易考察的，网上也都能查到相关的资料，但是很可能忽略一个点：type 只是一个类型别名，并不会产生类型。所以其实 type 和 interface 其实不是同一个概念，其实他们俩不应该用来比较的，只是有时候用起来看着类似。
React 事件机制
我觉得需要答的点：
React 为什么要用合成事件 事件机制：注册和分发的过程。这里面至少要说出事件注册都是在元素的最顶层 document 节点上。 参考资料：一文吃透 React 事件机制原理
聊聊 React 的 diff
聊 diff 建议先看看我之前写过的一篇关于虚拟 DOM 的文章：从 React 历史的长河里聊虚拟DOM及其价值，有助于理解 diff 的意义。
diff 的细节可以看我之前写的：详解 React 16 的 Diff 策略
React 优化
可以看之前我写的 React 函数式组件性能优化指南，对于类组件也有对应的 API。
怎么理解闭包
基础中的基础，虽然社招考得不多，但是如果连闭包都理解不了，应该会减分不少。闭包由于在规范里没有定义，所以很多人下的定义不一样，理解的角度也不同，但是自己要有一套正确的理解方式，如果按照我的理解 JavaScript 里面所有的函数都是闭包，因为有全局环境，所有的函数都可以访问全局变量。
节流怎么实现的</description>
    </item>
    
    <item>
      <title>2019 个人深度总结</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/295/</link>
      <pubDate>Fri, 03 Jan 2020 17:01:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/295/</guid>
      <description>又一年过去了，2018 年写年终总结的场景还历历在目，写这篇文章之前还专门去看了下 2018 年的年度总结，主要是看自己在 2018 学的东西自己还能记得啥。
印象最深刻的应该是还是函数式编程相关的东西，因为确实在我深入的去接触它过后，我的很多编程思维都被它所影响。虽然在项目中不会去用很多函数式的方式去写，但是函数式的那些特点深深的指导着我如何去设计一个更容易维护的函数，其中一些思维可以见我去年的写 函数式编程，真香。
做个预测：三年之内，函数式编程要火一波，原因是 serverless 的兴起。
回顾了过去，我对今年的整体总结是：输入很多、输出不够。
输入 自我感觉自己是一个焦虑的人，焦虑也许来源与社交(周围优秀的人太多，见了太多比自己年轻或者同龄人)、也许来源于自己见识更多(处于达克效应里面「知道自己不知道」的境界)。
图片来源于网络
如果按照这张图来的话，我现在处于自信崩溃区，不知道自己是否处于绝望之谷，但是希望明年能进入开悟之坡。
从这张图里可以看到，自信程度高也不一定约好，很可能是处于愚昧山峰。
自我感觉自己还算坚强，没有被焦虑或者自信崩溃打败，相信自己通过努力，提升自己的专业知识和能力，总会逃离绝望之谷，所以我今年比以前都更努力的去学习，得到结果是我感觉自己今年在见识上提升了非常的多，见识越多，意味着格局会慢慢变大，格局越大，就越能成功(这只是我自己的人生逻辑)。
虽然在精神上的收获了很多，但是从今年各方面的产出来看，不管是职业还是影响力都没有实质性的进展，但是我没有着急，平时安慰我自己的话就是：还没到爆发的时候，现在一直积累就行。
读书 读书是我今年最满意的一项输入，读了 20 多本书，虽然这个成绩不算好，但是对于我来说是一个非常大的进步，因为我从小就特别讨厌读文字，小说也不例外。现在一年能读 20 多本，差不多半个月读一本，进步非常的大了。
最开始想读书也是自己接触的很多大佬，或者在网上看到一些大佬的文章等，了解到读书非常的重要，所以就开始买书来读，刚开始读得很慢，而且很枯燥，一本书可能要花一个月才能读完，大概读了两个月后，自己养成了读书的习惯了，每天花 30 ~ 60 分钟的时间读书，周末就花多一点，一周就能读一本书。
那个时候成就感就来了，对读书产生了兴趣，然后读书 对于我来说就不算什么难事儿了，反正有大段的空闲时间就会用来读书。
在书的媒介方面我还是比较传统，喜欢纸质书翻书的感觉，所以我读的大部分书都是纸质书，基本每个月都会买 3、4 本书，主要是每个月基本上当当都会搞活动，打 5 折或者满 100 - 50，另外还有满 200 - 30 的券，然后由于我会每个月自费给公众号里的读者送书，正好就一起会买六七本书，差不多 200 块。
下面是我今年读完的书，没读完的没有列出来，明年再继续读，大部分都是纸质书。我目前读书还没有进行主题阅读，基本上都是泛读，涉及的不仅仅是技术书，也有心理学、品牌、历史、理财、个人成长各个方面。
电子书
《实用性阅读指南》三星 《麦肯锡精英高效阅读法》三星 《半小时漫画中国史》1-4 册 三星 《小狗钱钱》五星 《如何有效阅读一本书》三星 纸质书
《现代前端技术解析》四星 《你不知道的 JavaScript(上)》五星 《高效前端：Web 高效编程与优化实践》四星 《重构(第二版)》五星 《React 状态管理与同构实战》四星 《见识》四星 《被讨厌的勇气》五星 《刻意练习》四星 《高效能人士的七个习惯》五星 《超级符号原理》三星 《学会写作》三星 《少有人走的路 4：在焦虑的年代获得精神的成长》四星 《原则》五星 《语言学的邀请》五星 《文明之光(第一册)》五星 打五星的都是我自己读完之后感觉收获很多的，每个人可能感受不同，三星就是我觉得可读可不读的书。</description>
    </item>
    
    <item>
      <title>在mac上安装XAMPP并搭建 typecho 博客</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/272/</link>
      <pubDate>Thu, 14 Nov 2019 21:45:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/272/</guid>
      <description>在 v 站上看一个自己非常喜欢的博客主题：阿星Plus，但是由于是用 .Net 写的，自己完全不熟悉 .Net，所以就准备自己按照他的博客风格写一份 typecho的主题。
我也没接触过 PHP，在安装环境这一步就把我难住了，历经磨难，最终选择了 XAMPP 来搭建 PHP 环境，在这里记下搭建的过程和遇到的坑。
我刚开始去搜索 「XAMPP 搭建 typecho」，然而由于 typecho 资料太少，根本搜不到，所以选择了搜索「XAMPP 搭建 wordpress」，然后才一步一步的安装好了 XAMPP。
什么是 XAMPP XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。
安装 XAMPP 首先要知道 XAMPP 有两中安装方式：
第一种：OS X的XAMPP是OS X的本地安装程序。它将Apache，PHP和其他XAMPP组件直接安装在OS X系统的 /Applications/XAMPP 文件夹中。 第二种：XAMPP-VM是OS X的虚拟机，它包括Apache，PHP和其他XAMPP组件，并在OS X系统上的基于Linux的虚拟机中运行它们。 这两种方式我都试过，相信我，采用第一种安装方式。
值得提醒的是在 XMAPP 首页下载的是 OS X 的虚拟机的，下载的时候文件名称会有 vm ，要下载安装程序的，要去 Download 里面下载，文件名称会有 installer 的字样。
使用 XAMPP 这里我写的会比较简单，自己随便看看就知道怎么用了。
安装好了进入界面，直接点 Start All就行，如果上图中花框的灯是像我图中的绿色就代表启动成功，失败了就会是红色。
安装 typecho 将官网下载的 typecho 安装包下载下来。 将安装包移动到 htdocs 文件夹下并解压，htdocs 文件夹路径如图，在应用程序 -&amp;gt; XAMPP-&amp;gt;htdocs 访问 localhost/build 即可进入安装页面进行 typecho 的安装。 遇到的问题 1.</description>
    </item>
    
    <item>
      <title>如果解决虚度时光，首先做到要事第一</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/270/</link>
      <pubDate>Thu, 07 Nov 2019 21:51:07 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/270/</guid>
      <description>阅读文章之前你可以花半分钟想想你觉得你自己最虚度的时光是时候？
夸自己 可能在很多人的眼里，我以及算是一个努力、上进的人了，那是因为他们只看到了我努力的时候，没有看到我虚度的时候。
一般在工作日我还是非常的恪守自己的原则，在不上班的时候都会提升自己，比如看书、听课、阅读、写作等方式。跟一般的人比起来更努力的点就是早上我会先学习一个小时，我一般 7 点半就会起床，然后看书或者听课一小时后，也就是 8 点半的时候才会去洗漱，下班回来也很少除了和女朋友每天至少视频半小时外，其余时间用得都很充分(用的方向对不对先不谈)。
虚度 接下来就说到重点了，虚度的时光。
我觉得我最虚度的时光就是周末，本来会有充足的时间来学习，但是当打开电脑突然不知道应该干什么(这个时候非常的难受，经常在这个时候想做人的意义是什么)，然后就去看书，看了一会儿还是会觉得无聊，然后就说打会儿游戏吧，我一般有个习惯就是一直会打到输才会停止，往往经常又是连赢好几把，导致有可能一打就是一上午或者一下午过去了，然后就去做饭吃。
一旦到晚上七八点的时候，那个时候突然又觉得学习的奋劲儿又来了，然后会认真看书，看课程写文章等自己觉得对的事儿。然后就开始感叹自己白天的时间又浪费了，晚上再来补，那我们重庆人的话来说就是：「早不忙，夜慌张」。
为什么 很好奇的是为什么工作了才会出现这种情况，而在高中大学没有出现。
在高中的时候，我们大家的目标非常明确，就是考大学，每天要做的事情就是看书，做题就行，目的很明确，要做的事情非常的清晰，所以不会有这种不知道该干啥的情况。
到大学的时候我长期呆在实验室，每天 11 点才到寝室，然后觉得自己应该放松了，就玩玩手机，聊聊天是应该的，这在我的大脑里是应该做的，到了周末的时候，我也觉得应该放松，所以在放假之前已经给自己订好了周末要做的事情，会出去玩，或者打游戏等。
我觉得我就是没做好《高效能人士的七个习惯》里的要事第一。
有兴趣的话我也可以写写这本书的读后感，这本书是今年我读的书里收益最大的书。
相信要事第一还是不难理解，就是把最重要的事情先做。所以首先我应该找出对我来说最重要的事情，然后我没找出来，或者说我没去认真思考对于我来说最重要的事情是什么，导致我有空闲的时候不知道应该干什么，因为想干的事情太多，导致觉得都不重要，你想想你会不会有过这样的感受。
我再说一种情况，我觉得大部分人也有过这种经历，在工作日的时候想做的事情很多，然后把原因归结为上班太忙，所以在工作日不做，准备打算到周末去做，然而到周末了，往往又由于想做的事情太多，导致最后不做了。
然后我回想我工作以前为什么没有这种状态，感觉每天都知道自己应该干啥，就算是打游戏也知道自己该打游戏了。
如何解决 这些都是没有做到要事第一的第一步，找出最重要的事情。
那么如何找到最重要的事情呢，我觉得一个很好的方法就是「做减法」。做加法谁都会做，想到什么事情就忘自己的待办事项或者大脑里面加就行了，但是这样就会导致要做的事情越来越多，最后太多了，然后都不做了。
如果做减法我觉得可以用《搞定》书中的 GTD 方法来帮助我们完成，相信很多人对 GTD 的印象只是存在于写 Todo List，然后把做完的事情标记为完成。其实这只是其中的一个小步骤，GTD 最核心的思想是想通过工具把事情从我们的大脑里面清空，让我们的大脑能专注做一件事情，而不是在做某件事情的时候，又想到其他事情没做，这样就会分心，效率就会大大的降低。
GTD 会有五个核心步骤：收集、处理、组织、检查、做。其中收集的作用就是把你的想法从大脑清空，通过工具帮你把想法记下来，处理过程就是我们做减法的过程，将一些不重要的东西给丢掉。
如果有兴趣，GTD 后面我专门写一篇文章来介绍，非常有效的一种习惯。
丢掉之后还有一些你需要的做的事情，然后再把这些需要做的事情再去认真思考什么事情是最重要的，然后再去做。
总结 文章写了为什么会有虚度的感觉，然后为什么会产生虚度的感觉，然后结合 GTD 给出了解决方案，希望能给你带来启发。
希望你在留言区里留出你什么时候会最感觉自己虚度了，然后又是怎么去解决的呢？</description>
    </item>
    
    <item>
      <title>Mac Brew 常用命令笔记</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/223/</link>
      <pubDate>Wed, 16 Jan 2019 13:12:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/223/</guid>
      <description>简介 Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 系统上的软件安装过程。每个操作系统都有类似的，比如 Ubuntu 的 apt，Centos 的 yum。
常用命令 安装 brew ruby -e &amp;#34;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&amp;#34; 使用brew安装软件 $ brew install git 使用brew卸载软件 $ brew uninstall git 使用brew查询软件 有时候，你不知道你安装的软件的名字， 那么你需要先搜索下, 查到包的名字。
brew search /wge*/ 其他brew命令 brew list 列出已安装的软件 brew update 更新brew brew home 用浏览器打开brew的官方网站 brew info 显示软件信息 brew deps 显示包依赖 brew upgarde 更新所有 brew upgarde [包名] 更新指定包 brew cleanup 清理所有包的旧版本 brew cleanup [包名] 清理指定包的旧版本 brew cleanup -n 查看可清理的旧版本包，不执行实际操作 卸载 brew cd `brew --prefix` rm -rf Cellar brew prune rm `git ls-files` rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions rm -rf .</description>
    </item>
    
    <item>
      <title>2018 年度总结, 三个角色的转变</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/221/</link>
      <pubDate>Tue, 15 Jan 2019 16:54:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/221/</guid>
      <description>2018已经结束了，总结自己这一年来就是三个角色的转变：自己从一个学生成为了一个社会人，从一个读者变成了一个自媒体人，从一个在校学习者变成了终身学习者。
每一种角色的转变意味着责任的转变，每多一种角色，就会多承担一份责任。角色变得越大，责任也会承担得越大，当然收获得也更大。
技术成长 对于技术成长，我感觉我莫名其妙的就走在了前端的前沿，刚刚在知乎上看到一个帖子2019 前端技术规划该包含什么？很多大佬在规划里面都谈到 Rxjs、Typescript、函数式编程、Flutter、PWA、Node 相关, 然而事实就是这么巧(或者可以说我眼界比较远，偷笑)，在 2018 年我很多都已经接触过了，比如 Rxjs、TS、函数式编程、Node 等。
聊 Typescript(TS) 特别是对于 TS，我在公众号，然后我维护的微信群里早就已经说过，TS 最近会火起来的，没学的赶紧学起来，不知道有多少人听了我的，看了那么多大佬的规划，我更加的坚信了 TS 将会变成未来前端工程师一项必备的技能。
然后对于 TS 的学习，我看过这些东西，我推荐一下，不过对于 TS 我仍然是个初学者，不敢说有多精通，我只在我自己的小项目中用过，没有在公司的项目中使用。
TS 官方文档 技术胖的 ts 教程 TypeScript极速完全进阶指南 深入理解 TypeScript 如果问我使用 TS 感觉是什么样的，我只能说相逢恨晚，就跟 vim 一样，用过之后就像一直用。
聊 Rxjs 对于学 Rxjs 来说，我想说的是，Rxjs 是我学过最难学的一个库了，目前为止没有之一。现在回想起来，要是早点接触函数式编程就好了，如果先是研究函数式编程，再去学习 Rxjs，我相信会轻松 40% 以上。但是目前为止，我并没有拿到真正的生产环境去用过，只是写过一些简单的 demo，然后看过一些资料和书籍，同时也在团队做过相关的普及。
Rxjs 难的就是思维方式以及 api 很多，然后就是由于一些概念不知道为什么要这么设计(很多思想我相信学了函数式编程就会明白了)。
对于 rxjs 的学习看过很多的文章，我这里还是推荐三个我觉得比较全的学习资料。
Rxjs 官网 30 天精通 Rxjs 程墨老师的深入浅出 Rxjs 聊函数式编程 学习函数式编程给我最大的感受就是让我拓宽了我的眼界，突然的就弥补了以前知识体系缺的点。比如对于 compose、curry 这些 js 里面也算一直提及的重要概念，但是总是记了又忘，忘了又记，就算自己手写来实现过了，但是隔了几个月还是又忘了，因为没用过。但是学了函数式编程以后，发现全是这些东西，compose 呀、柯里化呀、部分应用呀，就跟用数组的 map、reduce 这些方法那么熟练，所以，现在闭着眼睛也能写出来，就几行代码的事儿。</description>
    </item>
    
    <item>
      <title>函数式编程里面的基本工具函数实现</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/218/</link>
      <pubDate>Wed, 09 Jan 2019 13:12:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/218/</guid>
      <description>compose 实现 function compose(...args) { return (result) =&amp;gt; { return args.reduceRight((result, fn) =&amp;gt; { return fn(result) }, result) } } pipe 实现 function compose(...args) { return (result) =&amp;gt; { return args.reduce((result, fn) =&amp;gt; { return fn(result) }, result) } } 柯里化实现 function currying(fn, ...args) { if (args.length &amp;gt;= fn.length) { return fn(...args) } return function (...args2) { return currying(fn, ...args, ...args2) } } 部分应用实现 function partial(fn, ...args) { return (..._arg) =&amp;gt; { return fn(.</description>
    </item>
    
    <item>
      <title>群里提问的艺术</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/215/</link>
      <pubDate>Thu, 03 Jan 2019 15:16:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/215/</guid>
      <description>现在互联网发达的时代，大家都会有很多的群，xxx 交流群、xxx 技术交流、xxx开发群、xxx技术学习群等，大家的初心可能都是想交流的，遇到点问题然后就可以在群里问。
然而很多时候你问的问题没人回答；也有时候问了半天还是没找到答案；也有时候当你把问题发出来了，别人正准备回答你的时候，你说知道了；然后刚开始群里很活跃，慢慢的就死了。
其实以上问题，都是大家不想看到的，然而在群里提问是我们加入群的初心，但是很多人做不好，最终导致你的问题无人解答，群慢慢的失去意义。
今天我所谈的就是群里提问的艺术，让你的问题快速得到解决。
我将今天的问题分成以下三部分进行介绍：
提问之前 提问之时，怎么提问 注意事项 提问之前 在群里提问之前首先我们应该做好功课，看自己是否完成以下步骤，否则你的提问将一塌糊涂，大概率得不到想要 的答案。
尝试自己解决 不能自己解决应该准备的哪些 尝试自己解决 尝试自己解决是非常重要的一步，这也是我们能否经过这个问题能够成长的关键所在。
通过搜索引擎搜索：baidu 或者 google(推荐)，搜索结果中前三页如果找不到你想要的信息，就进行下一步吧。对于成熟的开源项目，你遇到的问题，很可能别人也遇到过。这时通过 Google、StackOverflow 等网站的搜索服务，可以帮你快速定位并解决问题。永远记住，地球上的你并不孤单，包括你遇到的问题。 **查阅手册/文档：**确保自己阅读过至少一次官方文档。这样在遇到问题时，如果能回忆起只言片语，就可以再去读一遍相关文档，问题往往也就解决了。 **查阅社区/论坛：**阅读常见问题文件（FAQ）或者开源项目的 issue，或者论坛(类似 react china) **询问朋友：**如果你使用的开源软件，在朋友圈或同事圈里也有人使用，那么抬起你的脚、或拿起你的电话，真挚诚恳的探讨不会遭遇拒绝，而会增进友谊。不要犹豫，你的内心渴望面对面交流，你的朋友也是。 **自检并不断测试：**试自己检查或试验以找到答案。 **阅读源码(这步非必须)：**如果你是程序开发者，尽量尝试阅读源码以找到答案。 经过以上 6 步或者 5 步你都无法解决遇到的问题，那么你确实针对这个问题能力有限，准备去群里请教了，那么在尝试自己解决之后无果，应该做哪些准备呢？
不能自己解决应该准备的哪些 一定要明白自己想要问什么问题：不能自己都说不清自己想要问什么问题，那么群里提问你也问不出什么来。 梳理准备您的问题：要说明之前你都干了些什么。 要用言简意赅的语言：这个是我们作为职场一个必备的技能，说重点，言简意赅。 怎么提问 抱着平和对等的心态，找到合适的途径后，就得静下心来将遇到的问题写成文字。书写文字不是一件简单的事情，我们可以从遵循一些简单的规则开始。
用词准确，问题明确 标题要简洁清晰，要言之有物。
Bad：救命呀/急/跪求，遇到了一个 react 问题，xxx 组件渲染不出来
Good：在使用 xxx 版本的 react ，我操作了 xxx，也写了 xxx，但是 xxx 组件渲染不出来
一个好标题范例是目标 —— 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。
描述清晰，信息充足 **准确有效的信息：**描述事实，而不是猜测，如果你想给出你的猜测，一定要先描述事实，给你的猜测一些证据，不然就不要猜测。
**问题表现/内容：**按照时间顺序列出问题症状。问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。
**简单的做过什么尝试：**在描述你做过什么尝试的时候，简单的你描述你做了哪些尝试就行，为什么要这么做其实不是那么重要。
如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。
经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。
玉伯有句话是这么说的：
提问者选择的路本身就是一条崎岖之路，对于要解决的问题，实际上有更好的方式。这种情况下，描述清楚目标，讲清楚要干什么非常重要。</description>
    </item>
    
    <item>
      <title>破坏开发人员生产力的十二件事</title>
      <link>/posts/%E8%AF%91%E6%96%87/157/</link>
      <pubDate>Fri, 23 Nov 2018 18:26:34 +0000</pubDate>
      
      <guid>/posts/%E8%AF%91%E6%96%87/157/</guid>
      <description>今天的文章是来自 medium 的一篇文章，点赞数有将近 1 万 9，所以翻译出来给大家分享一下，有些概念怕大家不了解，所以我放了一些 维基百科的解释。如果有翻译得不是很好的地方，请看原文：https://hackernoon.com/top-12-things-that-destroy-developer-productivity-2ddf0abc190
正文：
很多文章都涉及技术主管和项目经理的角色。我们经常遇到的一个共同主题是如何提高团队的工作效率。但是在你集中精力来提高生产力之前，你可能首先要考虑是什么在摧毁它，以便建立一个可靠的基础。不幸的是，即使 Peopleware 近 30 年前发布，我们也看到许多团队在一些（消极的）显着方式中遭受巨大的生产力损失！
没有人希望程序员在没有计算机的情况下完成工作，但是有很多公司希望程序员能够在不知情的情况下完成工作。这同样不切实际。
因此，让我们深入探讨我们的 12 个阻止您的开发人员“进入区域”并提高工作效率的事项列表。我将尝试从大多数到最不具影响力的列表中优先考虑此列表。随意评论！
如果您想知道这一切是否值得投资，只需考虑开发商的工资。生产力提高10％甚至更多！
中断和会议 在我看来，中断是开发人员的首要生产力杀手。开发人员在中断之前不能轻易回到他们正确的位置。他们需要进入发展的思维模式，然后慢慢追溯到他们离开的地方。这可能需要超过30分钟。中断越多，挫折越多，工作质量越差，错误就越多 - 而且还在继续。 “The more times you trip me up while I’m trying to get started — the longer between each time I’m going to try. If you fill my morning with interruptions — don’t be surprised when the day is unproductive.。” &amp;ndash;A developer on Reddit
大概意思就是说，每次被打断都要重新开始，如果你的一天里经常被打断，那么当你一天没有任何成果的时候，不要感到惊讶。
会议怎么样？会议和中断之间的唯一区别是会议是计划中断，这会使情况变得更糟。如果开发人员在处理任务时知道他们会中断，则他们无法完成任务。因此，如果他们在一两个小时内召开会议，他们将无法取得任何进展，因为大多数工程任务需要更多时间。
As Paul Graham wrote, “A single meeting can blow a whole afternoon by breaking it into two pieces, each too small to do anything hard in.</description>
    </item>
    
    <item>
      <title>你不知道的黑客</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/68/</link>
      <pubDate>Fri, 13 Apr 2018 22:32:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/68/</guid>
      <description>前言 我相信大家对于『黑客』这个词并不陌生，特别是对我们搞计算机的人来说，那是相当的熟悉。
在一般人的眼里『黑客』（hacker）就是入侵计算机的人，就是『计算机犯罪』的同义词。但是，它的原意并非如此。
起源 在 20 世纪 60 年代初，麻省理工学院有一个学生团体叫做『铁路模型技术俱乐部』，他们把难题的解决方法称为 hack。
这里，hack作为名词有两个意思，既可以指很巧妙或很便捷的解决方法，也可以指比较笨拙、不那么优雅的解决方法。两者都能称为hack，不同的是，前者是漂亮的解决方法（cool hack 或 neat hack），后者是丑陋的解决方法（ugly hack 或 quick hack）。hack 的字典解释是砍（木头），在这些学生看来，解决一个计算机难题就好像砍倒一棵大树。那么相应地，完成这种 hack 的过程就被称为 hacking，而从事 hacking 的人就是 hacker，也就是黑客。
所以在 20 世纪 60 年代，『黑客』这个词是一种能力的象征，而且自称黑客的人他们比如包含着高度的革新、独树一帜的风格、精湛的技艺，也就是说在其他人的眼中，他们就是大佬。
自由软件基金会创始人理查德·斯托尔曼认为黑客的行为必须同时满足，好玩、高智商、探索精神三个特点才是真正的黑客。这也是黑客所追求的三种价值，而不是实用性或金钱。
从这个意思出发，我们有时也会用到这个，比如我平时在实现某一个功能的时候，用常规的方法解决不了（或者说当时想不到科学的解决方法），用了一半不是那么科学的方法(或者不知道为什么这种方法就可以解决这个问题)的时候，我们也许会说我们用了一种 hack 的方式来解决了这个问题，并且会在这个方法写上一个注释标识是 hack，因为有可能其他人不知道为什么要这么用。
黑客精神 在史蒂文·利维出版的黑客著作 &amp;mdash;- 《黑客：计算机革命的英雄》中，将黑客的价值观总结为六条『黑客伦理』：
使用计算机以及所有有助于了解这个世界本质的食物都不应该收到任何限制。任何事情都应该亲手尝试。 信息应该全部免费 不信任权威，提倡去中心化 判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或地位等其他标准 你可以用计算机创造美和艺术 计算机使生活更美好 根据这六条『黑客理论』，黑客价值的核心原则可以概括为：分享、开放、民主、计算机的自由使用、进步。
历史上一些最优秀的程序员都是『黑客』。包括 Unix 创始人丹尼斯·里奇和肯·汤普森，Linux 创始人莱纳斯·托瓦兹，『开源运动』创始人埃里克·雷蒙德，微软公司创始人比尔·盖茨等等。正式黑客把计算机推向了更高的高度。
『黑客』被误解的原因 根据『黑客伦理』，黑客就是不服从管教，具有叛逆精神，根据史蒂文·利维描述的就是：“对于黑客来说，关着门就是一种挑衅，而锁着门就是一种侮辱。 ······ 黑客相信，只有有助于改进现状、探索未知，人们就应该被允许自由地使用各种工具和信息。当一个黑客需要一样东西来帮助自己创造、探索或者改正某种设备时，他不会自找麻烦，不会接受那些财产专有权的荒谬概念。”
他们侵入计算机系统的原因不是为了自己利益，而是为了自由，跟那些计算机罪犯是不同的。
然而，在 20 世纪 80年代初，一帮青少年黑客入侵了美国和加拿大的一些计算机系统，被《新闻周刊》封面报道的标题就是『小心：黑客在行动』，这件事被广泛报道，在报道时媒体就把黑客的行为注意在一个很窄的方面：入侵系统。同时，那些入侵计算机的程序员也自称『黑客』，从此黑客在大众心中就成了有害人群。
结语 真正的黑客致力于改变世界，让世界运转得更好。
我们把传统意义上的黑客称之为 hacker，而那些而已入侵计算机系统的人应该称为 cracker（入侵者）。
作为程序员的我们都应该以传统意义的黑客为目标努力，也许你就是下一个黑客，下一个改变世界的人。
整篇文章大部分内容来自于《黑客与画家》，可以推荐给大家都去看下这本书，感受一下那个时代正真的黑客精神。 ** 最后，大家可以在评论里面留言，你心目中最伟大的黑客都有谁。**
大家好，我是桃翁，我为自己代言！</description>
    </item>
    
    <item>
      <title>函数式编程笔记</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/18/</link>
      <pubDate>Fri, 05 Jan 2018 19:25:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/18/</guid>
      <description>&lt;p&gt;过去编程方式主要是以命令式编程为主，什么意思呢？简单说电脑的思维方式和我们人类的思考方式是不一样的。我们人类的大脑擅长的是分析问题，提出一个解决问题的方案，电脑则是生硬的执行指令，命令式编程就像是给电脑下达命令，让电脑去执行一样，现在主要的编程语言（比如：Java，C，C++等）都是由命令式编程构建起来的。
​ 而函数式编程就不一样了，这是模仿我们人类的思维方式发明出来的。例如：操作某个数组的每一个元素然后返回一个新数组，如果是计算机的思考方式，会这样想：创建一个新数组=&amp;gt;遍历旧数组=&amp;gt;给新数组赋值。如果是人类的思考方式，会这样想：创建一个数组方法，作用在旧数组上，返回新数组。这样此方法可以被重复利用。而这就是函数式编程了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2021 年度总结</title>
      <link>/posts/2022/2021-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/2021-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>当我起笔写总结的第一感受就是 2021 在写作这件事儿上，我变懒了，对外输出才 8 篇文章。
我翻了下前几年的年度终结，每年好像都觉得自己输出不够多，所以打心底里还是很想把写作这个事情做好的，但是由于自己思维的懒惰，总是没有落实下去。
工作 最近几年自己把工作的地位还是放得很高的，特别是来了蚂蚁之后，一个是因为工作任务比较重，暂用比较多的时间；二是因为在现在的财富积累上绝大部分来自于这份工作。
今年对我而言工作状态终于从忙碌回归到了正常，从来蚂蚁到 2021 年上半年，我基本上都处于一个满负荷的状态，工作日的时间百分之 90 的精力在工作上，准确的说是在业务上。
这种满负荷(业务压力)让我没跟太多的时间去思考自己如何成长、业务应该怎么去发展等，所以之前多次跟女朋友说想换一份工作，干着太累，自己也没太多成长。
后面由于业务调整加上自己终于在公司内找到一个技术发力点，所以心态回到正常，业务压力也从忙碌到正常，现在的状态还是比较满意。
另外有点就是渐渐的对业务价值这个词有了更深的感触，对我们老板说的一句话印象比较深刻：
公司招我们来不是让我们成长的，而是给公司创造业务价值的，所以你在公司不管造多牛逼的轮子，一定是要为业务服务的。所以最好的情况就是我们基于业务造的轮子，即给业务带来了帮助，也让自己技术得到了成长，双赢，这当然也是公司希望的。
所以作为技术人员一定要去了解业务，然后才知道我们的业务怎么赚钱的，或者他们怎么帮公司赚钱的，这样我们才能更有机会创造业务价值。
开源 一、开源最重要的是维护。
我很开心自己在蚂蚁体验技术部这个部门，这个部门应该是国内开源氛围最好的部门之一。组内也有多个非常优秀的开源项目，今年自己有幸参与了一点点 ahooks 和 antd mobile 。
让我开心的不是提了多少个 PR，而是了解了维护一个开源项目有多么的难，参与其中之后了解了开源项目的维护过程，了解了其中的艰辛，很多从公司开源出去的项目真的是纯靠爱发电，并不会纳入个人 KPI 里。
另外一个老板说过一句话：前端的绝大部分的技术项目，打的是维护，并没有太多的技术壁垒。
真的，这认识，太到位了，做开源最重要的持续不断的维护，而不是某个 KPI 项目。有部分阿里开源的东西，可能后期不怎么维护了，所以现在很多一看到阿里开源的，担心的这是不是 KPI 项目，会一直维护吗？可见一直维护才是最重要的一环。
二、尽量的去参与开源。
想起以前上大学的时候，一直在用 antd，从未想过能有机会给流行的开源项目提 PR，但是现在感觉提 PR 跟平时写代码一样了。
我觉得主要是两个原因：
一个是自己身边有很多这样的机会，身边同事都搞开源，想加入进去会变得很容易。 二是因为自己工作多年了，水平比以前高不少，代码也能看懂，自己写的代码也还行，能顺利的参与进去。 所以如果现在想参与开源项目，但是觉得自己还没有能力的，不要着急，打磨一下，让自己稍微厉害一点了来，另外就是要多找机会，看到你想参与的开源项目，有 issue 你可以解决的，你可以主动去提 PR，如果没有被合进去也没关系，一般作者是会给你建议的，这也是你提升的机会。
三、开源其实没那么难。
以前总觉得要去创造一个开源项目，想着要去做一个技术难度很高的开源项目，但是一直想不到，就觉得开源太难了。
今年在了解很多开源项目，以及开源项目背后的发展过程之后，其实自己以前的思路不太多，总想着要去做创新，做很牛逼的东西，做出来直接提效翻倍啥的。
如果没有这样的能力或者机会，我建议如果想做开源可以从集合类的库开始做，或者说一些最佳实践，demo、模板等。
什么叫集合类的库，我举几个例子就明白了。 ahooks（多个常用的自定义 hooks 集合）、antd（中后台组件集合）、lodash（工具函数集合）等等，这种项目你看，每一个集合里的元素都不是很难，写一个 hook、写一个组件、写一个函数有啥难的嘛，平时写项目公用组件，或者 common 文件夹里不也有么。**难的是要多、好用、长期维护。**可能你一个元素使用的人不多，但是当你的集合越来越多，就会跟越来越多人的需求匹配之后，就有用了。
最佳实践，demo 、模板类是什么样的呢？这种项目用户更多的可能是新手、或者小公司，刚接触某个技术栈的时候不知道怎么上手，不知道怎么写一个项目，不知道怎么写好一个项目，你就可以写一份 demo、或者最佳实践，让别人参考，或者快速搭建自己的项目。
这种项目比如：antd pro，你是不是也可以去写一个 antd mobile pro？或者 element pro ？或者 xx pro。类似的最佳实践还有很多很多，自己可以发散一下。</description>
    </item>
    
    <item>
      <title>为 VSCode 添加上程序员专用字体 Fira Code</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/290/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/290/</guid>
      <description>简介 推荐一款号称程序员的字体 Fira Code，Fira 是 Mozilla 主推的字体系列，Fira Code 是基于 Fira Mono 等宽字体的一个扩展，主要特点是加入了编程连字特性（ligatures）。
Fira Code 就是利用这个特性对编程中的常用符号进行优化，比如把输入的「!=」直接显示成「≠」或者把「&amp;gt;=」变成「≥ 」等等，以此来提高代码的可读性。
效果如下：
经过我体验一周来看，这款字体还是不错的。
更多请前往GitHub地址查看。
设置步骤 Step 1. 下载 前往 Fira Code 字体的 GitHub 地址，clone 或者 download字体文件，主要有 5 个 .ttf 字体文件，地址https://github.com/tonsky/FiraCode/tree/master/distr/ttf
Step 2. 安装 安装刚刚下载的 5 个字体文件：选择文件后点击鼠标右键，点击安装命令即可安装字体。
Step 3. 修改设置 打开 VS Code，如果在安装字体之前已经打开了，**一定要重启 **VS Code，否则识别不到新字体。
打开菜单File &amp;gt; Preferences &amp;gt; Settings，或者点击 File 后使用快捷键 Ctrl+,即可打开，然后打开 settings.json 文件，找到 editor.fontFamily字段，然后再把 Fira Code 添加到第一个，并且加上 &amp;quot;editor.fontLigatures&amp;quot;: true 。
&amp;#34;editor.fontFamily&amp;#34;: &amp;#34;&amp;#39;Fira Code&amp;#39;, Menlo, Monaco, &amp;#39;Courier New&amp;#39;, monospace&amp;#34;, &amp;#34;editor.</description>
    </item>
    
    <item>
      <title>函数式编程资料</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/197/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/197/</guid>
      <description>Eric Elliott 函数式教程 征服 JavaScript 面试: 什么是函数式编程？ 组合软件：1. 函数式编程的兴衰 为什么用 JavaScript 学习函数式编程？（软件编写）（第二部分） 函数式程序员的 JavaScript 简介 (软件编写)（第三部分） 高阶函数（软件编写）（第四部分） Reduce（软件编写）（第五部分） Functor 与 Category （软件编写）（第六部分） 函数式 Mixin（软件编写）（第七部分） 为什么在使用了类之后会使得组合变得愈发困难（软件编写）（第九部分） 借助函数完成可组合的数据类型（软件编写）（第十部分） JavaScript 让 Monad 更简单（软件编写）（第十一部分） JavaScript 轻量级函数式编程 JavaScript 轻量级函数式编程
Starkwang.log JavaScript函数式编程（一）
JavaScript函数式编程（二）
JavaScript函数式编程（三）
如果你想成为函数式编程爱好者 如何成为一位函数式编程爱好者(Part 1) 如何成为一位函数式编程爱好者(Part 2) 如何成为一位函数式编程爱好者(Part 3) 如何成为一位函数式编程爱好者(Part 4) 如何成为一位函数式编程爱好者(Part 5) 如何成为一位函数式编程爱好者(Part 6) 书籍 《JavaScript 函数式编程指南》推荐 《JavaScript 函数式编程思想》推荐 《JavaScript ES6 函数式入门经典》看了上面两本这本就不用买了 《JavaScript 函数式编程》 相关库 https://folktale.origamitower.com/ https://github.com/fantasyland/fantasy-land http://ramda.cn/ http://lodash.think2011.net/ </description>
    </item>
    
    <item>
      <title>我不喜欢这世界，我只喜欢你</title>
      <link>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/3/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;我这人运气一向不好，我这辈子最幸运的事大概就是遇见你，所以我特别特别珍惜，长这么大唯一坚持下来的事情就是爱你。&lt;/li&gt;
&lt;li&gt;反正得听你啰嗦一辈子，习惯就好。&lt;/li&gt;
&lt;li&gt;因为只有在我面前，她可以不用坚强。&lt;/li&gt;
&lt;li&gt;但我知道，一想到能和你共度余生，我就对余生充满期待。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
