[{"content":"前言 很久没有在外部写文章，跟我的读者们交流了，一些知心一点的同事，也离职了。所以最近感觉有点缺外部的输入，还是想写点文章，跟各种各样的朋友交流一下。 熟悉我的人应该知道，去年参加了支付宝的五福的前端开发，主要负责的是 AI 年画。 年画里面其实是有很多图形互动技术，比如秒轮廓，让后让兔子动起来，然后整个过度动画到装饰页面，装饰页面对于贴纸相关的操作，里面其实用到了大量的图形互动技术，主要用的是蚂蚁的 2D 互动引擎 Tiny.js。\n后面我会整理一下，把年画的一些方案公布出来，有兴趣的可以看一下。\n在做五福之前，我从来没有接触互动技术，对于如何开发互动应用没有任何概念，另外像五福这种大促时间又紧，任务又重，压力十分之大。 还好跟我合作的 partner 是懂的，并且有互动技术大佬给我们当技术顾问，所以才能顺利的上线并取得了不错的效果。\n工作内容发生变化 回到我自己今天写这篇文章的目的，主要是我的工作内容要发生变化了，以后要从一个传统前端要转向一个图形互动技术方向的前端了。 这意味着什么呢？\n服务的用户从公司内部用户转向了公司外部的 C 端用户。 用户量更大，意味着要求就更高，挑战就更大，也容易出故障。 技术方向发生了分叉，得重新开始学，学习任务极大。 互动技术方向对于我来说几乎是从 0 开始学，前面几年的前端经验积累用处就没那么大了，对于 React、构建工具、微前端这样的知识未来就不会再花很多的时间去学习了。 需要从 0 开始学习互动技术方向的内容：图形学、WebGL、2D 引擎库、3D 引擎库等等，还得稍微补一些数学知识。这块从我目前的学习以及同事了解，学习内容非常的多，而且对专业要求极高，不亚于传统前端的技术栈。 变化的原因主要是组内对于互动技术这块需要更多的人才，今年这块的业务会更多，另外就是在五福里接触过之后，觉得这块还是比较有意思的，特别是搞 3D 的，比如今年的福气乐园，看来就比较高大上。 两者结合，今年就准备开始走这个方向了。 不过对于现在来说，换方向对于职业发展有一些风险的，我也是在思考过后才决定的。\n前景思考 对于换职业方向，其实我觉得是一件很重要的事情，需要慎重，影响未来的发展，尽量还是朝着前景好的方向转。 我记一下我现在对这个方向的思考，如果你刚好准备换方向可以参考一下。\n担心的 路会往专精方向走，需要接受找工作没那么多公司招这个岗位的情况。 目前每个互联网公司都会招传统写页面的前端，但是对于图像互动技术的前端的岗位需求会少很多。 门槛高相对较高、知识的广度和深度往往不限于前端。 比如需要掌握图形学、部分数学这样非常专业的知识，相对还是比较难一些。 工程化相对落后，开发体验相对较差。 这块的知识体系跟图形/游戏行业是紧密相连的，整体看仅前端范围内还是比其它场景更大的端和场景弱不少，包括应用场景、专业度、生产模式工作流啥的，都比较落后。 看好的 就是因为门槛高，才容易形成壁垒，不容易别替换(当然，反过来，也不容易替换别人，看自己怎么看待)。 在随着未来 AI 的发展，同事随着年龄变大，才不容易被年轻人或者 AI 替代。 看好未来人机交互的进步，甚至是变革。 主要看好两个方向 元宇宙 (不看好的朋友请保留意见)。现在国内腾讯(QQ 小窝)、阿里(淘宝人生、天猫二楼的 3D体验空间)、百度(希壤)、网易(网易瑶台)等都在布局这方面的，国外的更不用说了，Facebook 都直接改名为 meta 了。 人机交互变革。目前来看前端主要是负责电脑或者手机显示器和人进行交互，未来以后可能是 VR、AR 进行交互。 最后 通过上面的分析，主要是看好未来人机交互的进步，才选择了这个方向。就算以后这个方向发展得不好，有了这些基础知识还是可以往其他的方向，比如一些设计行业(家装设计)、可视化、游戏等行业进行发展。\n最后如果你来选，你会怎么来选呢？欢迎留言说一下你的看法。\n","permalink":"/posts/2023/02-19-%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%83%8F%E4%BA%92%E5%8A%A8%E6%8A%80%E6%9C%AF%E5%89%8D%E6%99%AF%E6%80%9D%E8%80%83/","summary":"前言 很久没有在外部写文章，跟我的读者们交流了，一些知心一点的同事，也离职了。所以最近感觉有点缺外部的输入，还是想写点文章，跟各种各样的朋友交流一下。 熟悉我的人应该知道，去年参加了支付宝的五福的前端开发，主要负责的是 AI 年画。 年画里面其实是有很多图形互动技术，比如秒轮廓，让后让兔子动起来，然后整个过度动画到装饰页面，装饰页面对于贴纸相关的操作，里面其实用到了大量的图形互动技术，主要用的是蚂蚁的 2D 互动引擎 Tiny.js。\n后面我会整理一下，把年画的一些方案公布出来，有兴趣的可以看一下。\n在做五福之前，我从来没有接触互动技术，对于如何开发互动应用没有任何概念，另外像五福这种大促时间又紧，任务又重，压力十分之大。 还好跟我合作的 partner 是懂的，并且有互动技术大佬给我们当技术顾问，所以才能顺利的上线并取得了不错的效果。\n工作内容发生变化 回到我自己今天写这篇文章的目的，主要是我的工作内容要发生变化了，以后要从一个传统前端要转向一个图形互动技术方向的前端了。 这意味着什么呢？\n服务的用户从公司内部用户转向了公司外部的 C 端用户。 用户量更大，意味着要求就更高，挑战就更大，也容易出故障。 技术方向发生了分叉，得重新开始学，学习任务极大。 互动技术方向对于我来说几乎是从 0 开始学，前面几年的前端经验积累用处就没那么大了，对于 React、构建工具、微前端这样的知识未来就不会再花很多的时间去学习了。 需要从 0 开始学习互动技术方向的内容：图形学、WebGL、2D 引擎库、3D 引擎库等等，还得稍微补一些数学知识。这块从我目前的学习以及同事了解，学习内容非常的多，而且对专业要求极高，不亚于传统前端的技术栈。 变化的原因主要是组内对于互动技术这块需要更多的人才，今年这块的业务会更多，另外就是在五福里接触过之后，觉得这块还是比较有意思的，特别是搞 3D 的，比如今年的福气乐园，看来就比较高大上。 两者结合，今年就准备开始走这个方向了。 不过对于现在来说，换方向对于职业发展有一些风险的，我也是在思考过后才决定的。\n前景思考 对于换职业方向，其实我觉得是一件很重要的事情，需要慎重，影响未来的发展，尽量还是朝着前景好的方向转。 我记一下我现在对这个方向的思考，如果你刚好准备换方向可以参考一下。\n担心的 路会往专精方向走，需要接受找工作没那么多公司招这个岗位的情况。 目前每个互联网公司都会招传统写页面的前端，但是对于图像互动技术的前端的岗位需求会少很多。 门槛高相对较高、知识的广度和深度往往不限于前端。 比如需要掌握图形学、部分数学这样非常专业的知识，相对还是比较难一些。 工程化相对落后，开发体验相对较差。 这块的知识体系跟图形/游戏行业是紧密相连的，整体看仅前端范围内还是比其它场景更大的端和场景弱不少，包括应用场景、专业度、生产模式工作流啥的，都比较落后。 看好的 就是因为门槛高，才容易形成壁垒，不容易别替换(当然，反过来，也不容易替换别人，看自己怎么看待)。 在随着未来 AI 的发展，同事随着年龄变大，才不容易被年轻人或者 AI 替代。 看好未来人机交互的进步，甚至是变革。 主要看好两个方向 元宇宙 (不看好的朋友请保留意见)。现在国内腾讯(QQ 小窝)、阿里(淘宝人生、天猫二楼的 3D体验空间)、百度(希壤)、网易(网易瑶台)等都在布局这方面的，国外的更不用说了，Facebook 都直接改名为 meta 了。 人机交互变革。目前来看前端主要是负责电脑或者手机显示器和人进行交互，未来以后可能是 VR、AR 进行交互。 最后 通过上面的分析，主要是看好未来人机交互的进步，才选择了这个方向。就算以后这个方向发展得不好，有了这些基础知识还是可以往其他的方向，比如一些设计行业(家装设计)、可视化、游戏等行业进行发展。\n最后如果你来选，你会怎么来选呢？欢迎留言说一下你的看法。","title":"2023 关于图像互动技术前景思考"},{"content":"我自己最近由于组织架构的调整，调整到了做用户增长相关的业务，我才去了解了什么是用户增长，用户增长包含用户的获客、激活、留存、变现、推荐，然后知道用户增长是所以企业永远不会过时的话题。\n因为所有的企业如果需要成长，一定需要伴随用户的增长，扩大规模。\n然后我还想着在做用户增长相关的业务，想去深入学习一下，然后把自己的公众号当做产品来做用户增长。\n由于产品在给我们讲业务的时候，主要讲的是拉新获客相关的，所以我的头脑的一直就把 拉新作为用户增长的全部了。但是实际上拉新只是用户增长的一个环节，还有很多环节都需要用户增长，今天重点聊拉新。\n拉新是增长中的第一个要素，通过合理的拉新方式让用户知道一款产品并在使用找到产品提供的核心价值留下来，并在使用过程中对产品创造价值最终形成对产品在盈利上的供给。\n可见拉新主要是让不太清楚这款产品的用户，知道他的价值，然后使用这款产品，基本上这样拉新就算成功了。后续这个用户继续不继续使用，那就是激活、留存要做的事情了。\n常用的一些拉新方式就是找一些渠道打广告，公域的比如应用商店、抖音、快手、百度、小红书等；私域的比如公众号找博主，朋友圈；甚至有些还有线下地推的方式。\n今天在读《华与华正道》看到一句话：把现有的客户服务好，远方的客户自己会来。\n我发现自己悟了，懂得了一条新的渠道，而且靠谱，对用户增长后面的环节，比如激活、留存转化率都会更高。\n我们思考这么一个道理，现有的客户服务好，怎么对拉新有帮助的。\n服务好现有的客户，那么客户对身边的人有类似需求的，是不是可以带过来；社交电商就是基于此。 服务好现有的客户，自己的品牌口碑就会很好，当别人有类似需求的时候，找口碑好的产品，就会自己找上来。 这就是不做用户增长，也做到了用户增长。\n要是服务不好现有的客户，为了维持现有的收益，可能就得不停的通过传统的方式拉新，传统方式拉新成本贼高，投广告啥的都是很花钱的。然后把钱花了很多去投广告，如果资金不充裕，没有多余的，那么现有的客户更服务不好，又要去拉新，恶性循环。\n所以我觉得服务好现有的客户，是用户增长的基础，稳扎稳打，逐步扩张。\n基于以上的思考，我觉得我未来的做公众号的方向就需要转向服务好现有的读者，不断的去尝试对现在的读者有价值，愿意看的内容，而不是为了维持现有的阅读量，通过各种渠道去拉新人。\n另外我想到了我现在的公司，支付宝，在支付份额上最近几年被微信压得很惨，虽然我觉得支付宝被压得很惨的原因不是因为客户没有服务好，而是被微信的高频所压制。但是我还是觉得服务好现有的客户是比拉新更重要的，有没有办法把现在支付宝和微信重叠的用户，让他们都用支付宝，这如果都转过来了，已经够支付宝长久发展了。\n如果支付宝的服务好到这部分微信高频用户的都用上了支付宝，难道对于新用户在选支付产品的时候还不用支付宝吗？\n最后还是送给大家书中的一句话：\n《大学》说：“物有本末，事有终始，知所先后，则近道矣！”现有客户是本，新客户是末；把现有客户服务好是先，新客户是后。所以我一看见谁着急没客户，要去拓展，我就觉得他是舍本求末。到处去开拓客户，是最低效的经营手段。想要客户，只会让你签下不平等条约，最后除了得到一个“客户”，剩下的全是损失。\n不做「用户增长」的用户增长，才是最有效的用户增长。\n","permalink":"/posts/2022/03-21-%E6%9C%89%E4%B8%80%E7%A7%8D%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF%E6%96%B9%E6%A1%88%E5%8F%AB%E4%B8%8D%E5%81%9A%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF/","summary":"我自己最近由于组织架构的调整，调整到了做用户增长相关的业务，我才去了解了什么是用户增长，用户增长包含用户的获客、激活、留存、变现、推荐，然后知道用户增长是所以企业永远不会过时的话题。\n因为所有的企业如果需要成长，一定需要伴随用户的增长，扩大规模。\n然后我还想着在做用户增长相关的业务，想去深入学习一下，然后把自己的公众号当做产品来做用户增长。\n由于产品在给我们讲业务的时候，主要讲的是拉新获客相关的，所以我的头脑的一直就把 拉新作为用户增长的全部了。但是实际上拉新只是用户增长的一个环节，还有很多环节都需要用户增长，今天重点聊拉新。\n拉新是增长中的第一个要素，通过合理的拉新方式让用户知道一款产品并在使用找到产品提供的核心价值留下来，并在使用过程中对产品创造价值最终形成对产品在盈利上的供给。\n可见拉新主要是让不太清楚这款产品的用户，知道他的价值，然后使用这款产品，基本上这样拉新就算成功了。后续这个用户继续不继续使用，那就是激活、留存要做的事情了。\n常用的一些拉新方式就是找一些渠道打广告，公域的比如应用商店、抖音、快手、百度、小红书等；私域的比如公众号找博主，朋友圈；甚至有些还有线下地推的方式。\n今天在读《华与华正道》看到一句话：把现有的客户服务好，远方的客户自己会来。\n我发现自己悟了，懂得了一条新的渠道，而且靠谱，对用户增长后面的环节，比如激活、留存转化率都会更高。\n我们思考这么一个道理，现有的客户服务好，怎么对拉新有帮助的。\n服务好现有的客户，那么客户对身边的人有类似需求的，是不是可以带过来；社交电商就是基于此。 服务好现有的客户，自己的品牌口碑就会很好，当别人有类似需求的时候，找口碑好的产品，就会自己找上来。 这就是不做用户增长，也做到了用户增长。\n要是服务不好现有的客户，为了维持现有的收益，可能就得不停的通过传统的方式拉新，传统方式拉新成本贼高，投广告啥的都是很花钱的。然后把钱花了很多去投广告，如果资金不充裕，没有多余的，那么现有的客户更服务不好，又要去拉新，恶性循环。\n所以我觉得服务好现有的客户，是用户增长的基础，稳扎稳打，逐步扩张。\n基于以上的思考，我觉得我未来的做公众号的方向就需要转向服务好现有的读者，不断的去尝试对现在的读者有价值，愿意看的内容，而不是为了维持现有的阅读量，通过各种渠道去拉新人。\n另外我想到了我现在的公司，支付宝，在支付份额上最近几年被微信压得很惨，虽然我觉得支付宝被压得很惨的原因不是因为客户没有服务好，而是被微信的高频所压制。但是我还是觉得服务好现有的客户是比拉新更重要的，有没有办法把现在支付宝和微信重叠的用户，让他们都用支付宝，这如果都转过来了，已经够支付宝长久发展了。\n如果支付宝的服务好到这部分微信高频用户的都用上了支付宝，难道对于新用户在选支付产品的时候还不用支付宝吗？\n最后还是送给大家书中的一句话：\n《大学》说：“物有本末，事有终始，知所先后，则近道矣！”现有客户是本，新客户是末；把现有客户服务好是先，新客户是后。所以我一看见谁着急没客户，要去拓展，我就觉得他是舍本求末。到处去开拓客户，是最低效的经营手段。想要客户，只会让你签下不平等条约，最后除了得到一个“客户”，剩下的全是损失。\n不做「用户增长」的用户增长，才是最有效的用户增长。","title":"有一种用户增长方案，叫不做“用户增长”"},{"content":"债基是什么？ 债券型基金，就是主要投资债券的基金，规定基金资产80%以上要投资于债券，也可以有一小部分资金投资于股票市场、可转债、打新股等等。\n债券基金分类 只做债券的，叫“纯债基金”；\n做债券+打新股的叫“一级债基”；\n做债券+打新股+炒股的叫“二级债基”。\n主要投资可转债的叫“可转债基”。\n债券基金是怎么赚钱的？ 1、利息收入\n即债券持有到期所获得的票面利息收入。只要债券不出现兑付困难，持有至到期一般是不会出现亏损的。这个角度来看，长期债券基金的收益要高于短期债券基金。\n2、价差收入\n债券一般在银行间市场或沪深交易所交易，因流动性、市场利率、信用情况变化等，债券的价格是存在波动的。一般而言，利率上升，债券价格下降；利率下降，债券价格上升。因而根据债券二级市场价格变动，低买高卖可以赚取差价。\n3、债券回购\n这主要是通过回购业务将持有的债券质押进行融资，融得的资金又继续投入到债券市场，这就可以获得额外的杠杆收入。目前开放式基金杠杆比例不超过140%，封闭式基金以及定期开放式基金杠杆比例可以达200%。\n4、股票投资收入\n这主要说的是二级债券基金，\n可以通过参与二级市场股票投资，增厚基金收益。\n当然，这也要相应承担股票市场波动的风险。\n债基什么情况会跌 第一， 国债收益率快速上行\n因为国债利率大涨，那些求稳的大资金肯定会想配置更多国债，那么势必卖出一部分公司类债券。所以大多数债券遭到抛售，债券价格大跌，拖累债券基金净值下跌。\n第二， 碰到债券违约\n第 三 ，可转换债波动很大\n可转换债券和一般债券不一样，除了本身有还本付息的债券属性外，还有转股的权利。那么如果正股上涨，可转换债券就会上涨。\n","permalink":"/posts/2022/03-19-%E5%80%BA%E5%88%B8%E5%9F%BA%E9%87%91/","summary":"债基是什么？ 债券型基金，就是主要投资债券的基金，规定基金资产80%以上要投资于债券，也可以有一小部分资金投资于股票市场、可转债、打新股等等。\n债券基金分类 只做债券的，叫“纯债基金”；\n做债券+打新股的叫“一级债基”；\n做债券+打新股+炒股的叫“二级债基”。\n主要投资可转债的叫“可转债基”。\n债券基金是怎么赚钱的？ 1、利息收入\n即债券持有到期所获得的票面利息收入。只要债券不出现兑付困难，持有至到期一般是不会出现亏损的。这个角度来看，长期债券基金的收益要高于短期债券基金。\n2、价差收入\n债券一般在银行间市场或沪深交易所交易，因流动性、市场利率、信用情况变化等，债券的价格是存在波动的。一般而言，利率上升，债券价格下降；利率下降，债券价格上升。因而根据债券二级市场价格变动，低买高卖可以赚取差价。\n3、债券回购\n这主要是通过回购业务将持有的债券质押进行融资，融得的资金又继续投入到债券市场，这就可以获得额外的杠杆收入。目前开放式基金杠杆比例不超过140%，封闭式基金以及定期开放式基金杠杆比例可以达200%。\n4、股票投资收入\n这主要说的是二级债券基金，\n可以通过参与二级市场股票投资，增厚基金收益。\n当然，这也要相应承担股票市场波动的风险。\n债基什么情况会跌 第一， 国债收益率快速上行\n因为国债利率大涨，那些求稳的大资金肯定会想配置更多国债，那么势必卖出一部分公司类债券。所以大多数债券遭到抛售，债券价格大跌，拖累债券基金净值下跌。\n第二， 碰到债券违约\n第 三 ，可转换债波动很大\n可转换债券和一般债券不一样，除了本身有还本付息的债券属性外，还有转股的权利。那么如果正股上涨，可转换债券就会上涨。","title":"债券基金"},{"content":"最近在面试的时候经常会问：如何理解重排和重绘？\n我发现很多候选人都没有答道关键点上，感觉是在哪里看到过相关的文章，听起来零零散散，毫无逻辑。\n错误示范 一般的面试过程就是这样的：\n面试官：如何理解重排和重绘?\n候选人：重排就是当页面的结构发生变化了，就会重排，比如改变变字体的大小，增删 DOM 元素这样的。重绘就是页面结构没有变化，只是外观变了，比如改了一下字体颜色、背景颜色这样的。就只会发生重绘。\n当然他说的也没错，我也不能直接说他错，就继续引导\n面试官：那重排和重绘有什么关系吗？\n候选人：重排一定会导致重绘，重绘不一定会导致重排。\n面试官：为什么呢？\n候选人：因为重排结构发生变化了嘛，肯定会导致重绘。\n我这时候表情就是这样：\n如果你觉得上面的回答很真实，那下面的你确定得好好看看。\n接下来一般我不会直接跳过，我会再问一下浏览器关键渲染路径引导一下。\n如果不知道的话，我会再引导一下(这个时候其实基本已经放弃了)。\n问一下你知道当浏览器加载到一个 HTML 会发生什么事情吗？\n如果还是不知道的话，这下一题了。\n如果知道关键渲染路径的，基本引导一下还是可以搞明白，如果不清楚的，肯定是理解不了重排和重绘的。\n考点 这道题我一般考察两个点：\n浏览器的关键渲染路径。如果答不到这上面，一般这个题就凉了。 性能优化，如果减少重绘和回流，当然这个点肯定也是要基于对 关键渲染路径 的理解（这点不是关键点）。 复习 复习的目的是为了知道考点是啥，简单的给大家复习一下，更详细的内容希望按我介绍的知识点(可以看我文末推荐的文章进行深入学习)，毕竟复习不是上课。\n我们可以能知道，写了 HTML、CSS、JavaScript 就可以将页面渲染到屏幕上，但是浏览器是如何把我们的代码渲染到屏幕上的像素点的呢？这就需要了解到这么一个概念 CRP：\n关键渲染路径(Critical Rendering Path)是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。\n大致步骤是这样：在解析 HTML 时会创建 DOM，HTML 可以请求 JavaScript，而 JavaScript 反过来，又可以更改 DOM。HTML 包含或请求样式，依次来构建 CSSOM。浏览器引擎将两者结合起来以创建 Render Tree (渲染树)，Layout(布局)确定页面上所有内容的大小和位置，确定布局后，将像素 Paint (绘制)到屏幕上。\n优化关键渲染路径可以缩短首次渲染的时间。了解和优化关键渲染路径对于确保重排和重绘可以每秒 60 帧的速度进行，以确保高效的用户交互并避免讨厌是很重要的。\n接下来研究一下详细的过程：\n步骤 1. 生成DOM DOM构建是增量的。浏览器从远程下载 Byte =\u0026gt; 根据相应的编码 (如 utf8) 转化为字符串 =\u0026gt; 通过 AST 解析为 Token =\u0026gt; 生成 Node =\u0026gt; 生成 DOM。\n单个 DOM 节点以 startTag token 开始，以 endTag token 结束。 节点包含有关 HTML 元素的所有相关信息。 该信息是使用 token 描述的。 节点根据 token 层次结构连接到 DOM 树中。 如果另一组 startTag 和 endTag token 位于一组 startTag 和endTag 之间，则在节点内有一个节点，这就是我们定义 DOM 树层次结构的方式。\n2. 生成 CSSOM 浏览器解析 css文件，生成 CSSOM。CSSOM 包含了页面所有的样式，也就是如何展示 DOM 的信息。CSSOM 跟 DOM 很像，但是不同。DOM 构造是增量的，CSSOM 却不是。CSS 是渲染阻塞的：浏览器会阻塞页面渲染直到它接收和执行了所有的 CSS。\nCSS 是渲染阻塞是因为规则可以被覆盖，所以内容不能被渲染直到 CSSOM 的完成。\n3. Render Tree 渲染树(Render Tree)包括了内容和样式：DOM 和 CSSOM 树结合为渲染树。为了构造渲染树，浏览器检查每个节点，从 DOM 树的根节点开始，并且决定哪些 CSS 规则被添加。\n渲染树只包含了可见内容（body 里的部分）。Head（通常）不包含任何可见信息，因此不会被包含在渲染树种。如果有元素上有 display: none;，它本身和其后代都不会出现在渲染树中。\n4. Layout 一旦渲染树被构建，布局变成了可能。布局取决于屏幕的尺寸。布局这个步骤决定了在哪里和如何在页面上放置元素，决定了每个元素的宽和高，以及他们之间的相关性。\n提示：一个页面渲染在不同尺寸的屏幕上，比如渲染在移动端和 PC 端上，展示有差异，在前面的步骤都是不变的，只有在布局的时候才会根据屏幕尺寸进行差异化处理。\n5. Paint 最后一步是将像素绘制在屏幕上，栅格化所有元素，将元素转换为实际像素。\n一旦渲染树创建并且布局完成，像素就可以被绘制在屏幕上。加载时，整个屏幕被绘制出来。之后，只有受影响的屏幕区域会被重绘，浏览器被优化为只重绘需要绘制的最小区域。绘制时间取决于何种类型的更新被附加在渲染树上。绘制是一个非常快的过程，所以聚焦在提升性能时这大概不是最有效的部分\n重排(Reflow)和重绘(Repaint) 了解完上面的关键路径渲染之后，再来了解重排和重绘简直就是小 case。\n重排(Reflow)：元素的 位置发生变动 时发生重排，也叫回流。此时在 Layout 阶段，计算每一个元素在设备视口内的确切位置和大小。当一个元素位置发生变化时，其父元素及其后边的元素位置都可能发生变化，代价极高。\n在回答什么是重排的时候，关键不是位置发生变动，这只是原因(Why)，而不是 What。What 是重新计算每个元素在设备视口内的确切位置和大小。\n重绘(Repaint): 元素的 样式发生变动 ，但是位置没有改变。此时在关键渲染路径中的 Paint 阶段，将渲染树中的每个节点转换成屏幕上的实际像素，这一步通常称为绘制或栅格化。\n而回答什么是重绘的关键点在于在关键渲染路径中的 Paint 阶段，将渲染树中的每个节点转换成屏幕上的实际像素，这才是 What。\nJavaScript 与关键路径渲染 前面聊步骤的时候基本都是聊的 HTML 、CSS 与 CRP 的关系，最后再聊一下 JS 与 CRP 的关系，再看一下文章开头的这个图。\nJavaScript 的执行是在生成渲染树之前的。这也是为什么 JavaScript的加载、解析与执行会阻塞 DOM 的构建，阻塞页面的渲染。\n这其实是非常合理的\n因为JavaScript 可以修改网页的内容，它可以更改 DOM，如果不阻塞，那么这边在构建DOM，那边 JavaScript 在改 DOM，如何保障最终得到的DOM是否正确？而且在JS中前一秒获取到的DOM和后一秒获取到的DOM不一样是什么鬼？它会产生一系列问题，所以JS是阻塞的，它会阻塞DOM的构建流程，所以在 JS 中无法获取 JS 后面的元素，因为 DOM 还没构建到那。\n这就是为什么我们需要把 js 放在页面底部的原因，尽量保证 DOM 树生成完毕再去加载 JS，从而出现这样的效果。\n性能优化 基于以上的分析，简单的说几条性能优化的方式，自己可以去分析一下为什么这些方式可以做性能优化。\n减少DOM树渲染时间（譬如降低HTML层级、标签尽量语义化等等） 减少CSSOM树渲染时间（降低选择器层级等等） 减少 HTTP 请求次数及请求大小 将 css 放在页面开始位置 将 js 放在页面底部位置，并尽可能用 defer 或者 async 避免阻塞的 js 加载，确保 DOM 树生成完才会去加载 JS 用 link 替代@import 如果页面css较少，尽量使用内嵌式 为了减少白屏时间，页面加载时先快速生成一个DOM树 正确的性能优化思路 再啰嗦一下性能优化相关的，当你遇到一个性能问题的时候，绝对不是去网上找一些性能优化的方法，然后不管三七二十一，就整上去，这样大概率是没啥用的。\n第一件事情，一定是要先分析性能的瓶颈在哪里。\n第一件事情，一定是要先分析性能的瓶颈在哪里。\n第一件事情，一定是要先分析性能的瓶颈在哪里。\n比如你遇到了首屏加载的性能问题，你就要根据开发者工具，比如看 network 是否是由于资源体积太大导致请求慢，还是后端处理慢，还是资源太多了加载慢，如果这些都不是，可能是因为 渲染慢，再去分析 performce 面板，看一下是 js 执行慢，还是啥原因。\n再比如你遇到了 webpack 的性能问题，比如打包的资源太大了，你要去解决这个问题，你也不应该直接去随便找几个优化的方法就开始整，而是先应该通过 webpack-bundle-analyzer 插件去分析包大的原因是什么？\n是依赖包太大了，没有做按需加载？ 还是重复的打包了几个版本的相同依赖？ 还是因为 src 太大了，是否需要做个动态加载？ 还是因为其他的，通过 webpack-bundle-analyzer 分析出来的组成内容去找问题。 最后再总结一下，遇到问题应该先通过各种分析工具，找到出现性能瓶颈的原因，再根据这个原因去寻找对应的优化方式，要对症下药。\n不管是面试的时候回答，还是自己平时在处理问题的时候都要这样，只有分析出问题了，解决方案一大堆，找不到问题，瞎搞就是浪费时间。\n参考回答 我相信复习完之后，对这个知识点应该是清楚了，面试的时候不需要说这么多，把关键点说出来，让面试官知道你是懂的就行，如果面试官有兴趣的话会继续追问的，这个时候再详细的跟他介绍追问的点。\n如果是我被问到这个题，我的回答大概是这样的，仅供参考：\n重排和重绘是浏览器关键渲染路径上的两个节点， 浏览器的关键渲染路径就是 DOM 和 CSSOM 生成渲染树，然后根据渲染树通过一个布局(也叫 layout)步骤来确定页面上所有内容的大小和位置，确定布局后，将像素 绘制 (也叫 Paint)到屏幕上。\n其中重排就是当元素的位置发生变动的时候，浏览器重新执行布局这个步骤，来重新确定页面上内容的大小和位置，确定完之后就会进行重新绘制到屏幕上，所以重排一定会导致重绘。\n如果元素位置没有发生变动，仅仅只是样式发生变动，这个时候浏览器重新渲染的时候会跳过布局步骤，直接进入绘制步骤，这就是重绘，所以重绘不一定会导致重排。\n上面这样回答，我觉得在绝大部分面试官那里已经可以拿到这个题的分了。\n不过面试官还是有可能继续往深的问，小伙伴们可以在评论区说一说你们还遇到过哪些相关的问题，我后面再继续帮助大家一起分析。\n对于性能问题上，减少重绘和回流感觉没有那么重要，因为优化一般情况不是很明显，不答问题也不大，更多的性能优化是在整个链路上的优化，比如性能优化标题里面的那 8 个点。\n最后 在行业不景气的时候，希望大家都能顺利找到合适的工作。\n关于关键路径渲染和重排、重绘，我最后还是忍不住给大家推荐一下大漠老师的两篇文章，有空去拜读一下子。\n关键渲染路径（CRP） 理解 Web 的重排和重绘 参考文章： 关键渲染路径 developers.google.cn： 关键渲染路径 ","permalink":"/posts/2022/03-15-%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97%E4%B8%80%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/","summary":"最近在面试的时候经常会问：如何理解重排和重绘？\n我发现很多候选人都没有答道关键点上，感觉是在哪里看到过相关的文章，听起来零零散散，毫无逻辑。\n错误示范 一般的面试过程就是这样的：\n面试官：如何理解重排和重绘?\n候选人：重排就是当页面的结构发生变化了，就会重排，比如改变变字体的大小，增删 DOM 元素这样的。重绘就是页面结构没有变化，只是外观变了，比如改了一下字体颜色、背景颜色这样的。就只会发生重绘。\n当然他说的也没错，我也不能直接说他错，就继续引导\n面试官：那重排和重绘有什么关系吗？\n候选人：重排一定会导致重绘，重绘不一定会导致重排。\n面试官：为什么呢？\n候选人：因为重排结构发生变化了嘛，肯定会导致重绘。\n我这时候表情就是这样：\n如果你觉得上面的回答很真实，那下面的你确定得好好看看。\n接下来一般我不会直接跳过，我会再问一下浏览器关键渲染路径引导一下。\n如果不知道的话，我会再引导一下(这个时候其实基本已经放弃了)。\n问一下你知道当浏览器加载到一个 HTML 会发生什么事情吗？\n如果还是不知道的话，这下一题了。\n如果知道关键渲染路径的，基本引导一下还是可以搞明白，如果不清楚的，肯定是理解不了重排和重绘的。\n考点 这道题我一般考察两个点：\n浏览器的关键渲染路径。如果答不到这上面，一般这个题就凉了。 性能优化，如果减少重绘和回流，当然这个点肯定也是要基于对 关键渲染路径 的理解（这点不是关键点）。 复习 复习的目的是为了知道考点是啥，简单的给大家复习一下，更详细的内容希望按我介绍的知识点(可以看我文末推荐的文章进行深入学习)，毕竟复习不是上课。\n我们可以能知道，写了 HTML、CSS、JavaScript 就可以将页面渲染到屏幕上，但是浏览器是如何把我们的代码渲染到屏幕上的像素点的呢？这就需要了解到这么一个概念 CRP：\n关键渲染路径(Critical Rendering Path)是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。\n大致步骤是这样：在解析 HTML 时会创建 DOM，HTML 可以请求 JavaScript，而 JavaScript 反过来，又可以更改 DOM。HTML 包含或请求样式，依次来构建 CSSOM。浏览器引擎将两者结合起来以创建 Render Tree (渲染树)，Layout(布局)确定页面上所有内容的大小和位置，确定布局后，将像素 Paint (绘制)到屏幕上。\n优化关键渲染路径可以缩短首次渲染的时间。了解和优化关键渲染路径对于确保重排和重绘可以每秒 60 帧的速度进行，以确保高效的用户交互并避免讨厌是很重要的。\n接下来研究一下详细的过程：\n步骤 1. 生成DOM DOM构建是增量的。浏览器从远程下载 Byte =\u0026gt; 根据相应的编码 (如 utf8) 转化为字符串 =\u0026gt; 通过 AST 解析为 Token =\u0026gt; 生成 Node =\u0026gt; 生成 DOM。","title":"【面试系列一】如何回答如何理解重排和重绘"},{"content":"今天在阅读《华与华正道》，读到两句金句：\n做人要做学习型，不要做纠错型 不要批判思维，要价值思维 记忆深刻，分享一下我的理解。\n做人要做学习型 从小我们就学过《论语》的：三人行，必有我师，择其善者而从之,其不善者而改之。\n对这句的解释是：别人的言行举止，必定有值得我学习的地方。选择别人好的学习，看到别人缺点，反省自身有没有同样的缺点，如果有，加以改正。\n以前在学习的时候只是去死记硬背，并没有去想把这个思想实践到现实中，这就是读死书。\n其实读书和交友一样，要看他好的地方。如果纠到一点错就拒之门外，就无书可读、无友可交了。\n善于学习别人的人，每天都在成长，每次交流、都在学习，如果是纠错型的人，总是在挑刺，总是自以为是，这样就无法从别人身上学习，成长缓慢。一旦成长缓慢，思维受限，就更无法从牛人身上学习，恶性循环就是这样来的。\n除了要做一个学习的人，还要注意不要做一个纠错型的人，老纠别人的错，这样的话你会觉得周围所有人都不好，以自己为中心，这样身边的人都会对你避而远之。\n做事要做价值型 不要总是持有批判思维，要学会价值思维。\n身边有没有遇到过这样的案例，一个新东西出来，不是去研究这个东西的价值，而是上来就开始批判这个东西的好坏。\n就拿数字货币来说吧，可能听说过比特币是基于区块链做的，然后还有还有很多山寨币，很多人炒币亏了，就否认数字货币，否认区块链技术。\n然而实际上，这种去中心化区块链的方式，可能是历史依赖，解决信任问题的一大革命。\n在比特币上也是，真正去研究他价值的人，从来不是以炒的心态去做的，这些人早已经赚得盆满钵满了。\n对一个人，或一件事、一个方案，你不要一上来就评判他好或坏、对或错、接纳或拒绝。而是要关注他有什么价值，这样你就能得到价值。没有人经得起评判，但每个人都有价值。\n价值思维的人总是从任何事或人上，都能看到价值，然后从中学习，批判型的人会慢慢丧失研究的能力，上来就要得出一个结论，好或者坏，对或者错。\n总结 这两句金句给我最大的感受就是要放开自己，打开自己的眼界，让自己的见识增长，这样眼里就会容纳更多的东西，海纳百川有容乃大。\n这样我们才可能看到别人，或者事情的价值，打开自己学习的欲望，而不是眼界狭窄，认为这个世界仅仅只是二元的。\n","permalink":"/posts/2022/03-11-%E5%81%9A%E4%BA%BA%E8%A6%81%E5%81%9A%E5%AD%A6%E4%B9%A0%E5%9E%8B%E5%81%9A%E4%BA%8B%E5%84%BF%E8%A6%81%E5%81%9A%E4%BB%B7%E5%80%BC%E5%9E%8B/","summary":"今天在阅读《华与华正道》，读到两句金句：\n做人要做学习型，不要做纠错型 不要批判思维，要价值思维 记忆深刻，分享一下我的理解。\n做人要做学习型 从小我们就学过《论语》的：三人行，必有我师，择其善者而从之,其不善者而改之。\n对这句的解释是：别人的言行举止，必定有值得我学习的地方。选择别人好的学习，看到别人缺点，反省自身有没有同样的缺点，如果有，加以改正。\n以前在学习的时候只是去死记硬背，并没有去想把这个思想实践到现实中，这就是读死书。\n其实读书和交友一样，要看他好的地方。如果纠到一点错就拒之门外，就无书可读、无友可交了。\n善于学习别人的人，每天都在成长，每次交流、都在学习，如果是纠错型的人，总是在挑刺，总是自以为是，这样就无法从别人身上学习，成长缓慢。一旦成长缓慢，思维受限，就更无法从牛人身上学习，恶性循环就是这样来的。\n除了要做一个学习的人，还要注意不要做一个纠错型的人，老纠别人的错，这样的话你会觉得周围所有人都不好，以自己为中心，这样身边的人都会对你避而远之。\n做事要做价值型 不要总是持有批判思维，要学会价值思维。\n身边有没有遇到过这样的案例，一个新东西出来，不是去研究这个东西的价值，而是上来就开始批判这个东西的好坏。\n就拿数字货币来说吧，可能听说过比特币是基于区块链做的，然后还有还有很多山寨币，很多人炒币亏了，就否认数字货币，否认区块链技术。\n然而实际上，这种去中心化区块链的方式，可能是历史依赖，解决信任问题的一大革命。\n在比特币上也是，真正去研究他价值的人，从来不是以炒的心态去做的，这些人早已经赚得盆满钵满了。\n对一个人，或一件事、一个方案，你不要一上来就评判他好或坏、对或错、接纳或拒绝。而是要关注他有什么价值，这样你就能得到价值。没有人经得起评判，但每个人都有价值。\n价值思维的人总是从任何事或人上，都能看到价值，然后从中学习，批判型的人会慢慢丧失研究的能力，上来就要得出一个结论，好或者坏，对或者错。\n总结 这两句金句给我最大的感受就是要放开自己，打开自己的眼界，让自己的见识增长，这样眼里就会容纳更多的东西，海纳百川有容乃大。\n这样我们才可能看到别人，或者事情的价值，打开自己学习的欲望，而不是眼界狭窄，认为这个世界仅仅只是二元的。","title":"做人要做学习型，做事儿要做价值型"},{"content":"为什么你总是在焦虑，总是对生活感到不满呢？\n也许是因为期望值太高了。由于期望值过高，现实往往不能达到预期的标准，即使达到了预期的标准，也体验不到“超过预期”的欢欣，因此，完美主义者们总是感到忧心忡忡。\n也许是时候把自己的期望值降低一些了，这并不是对现实生活的消极应对，而是对幸福感的积极追寻。\n今天读到一段话 ——\n对事对人，永远保持低期望。对任何事，永远保持低期望。低期望，就能坚持，就能付出。期望值太高，则很快因失望而放弃。为什么总是不求回报的人得到最大回报，就是这个原因。\n对我自己以前的想法产生了巨大的冲击。\n特别是对事儿，我以前都是以高期望去做的，认为这样可以让自己在做事儿的时候会更有动力，因为觉得这个事儿只要做成了就会很牛逼，高期望。\n在读到这段话，也许我真的要改变以往的心态了。\n期望值是一个人对某个目标能够实现的可能性的估计，目标估计越高，并不意味着实现目标的概率就越大，反而会因为不能实现目标而引起失望，增加心理痛苦。\n生活中人们往往对某些东西抱有较高的期待，但是等到面对时，往往会发现这件东西并没有给你带来预期的效果，这种心理上的落差会让人倍感痛苦。\n我之前看到过这样一个公式：幸福 = 现实 - 期望。\n所以想要幸福，关键因数在于现实和期望。\n现实往往是难以改变的，但是我们可以管理我们的期望，调整节我们的幸福感。\n期望又分为对人的期待和对事儿的期待。\n怎么做到对事儿对人保持低期待呢？\n比如当我们再寻求朋友帮助的时候，我们一定要降低期望，帮我们是情谊不帮我们是本分。如果你抱着一定会帮你心态，一旦被拒绝，那么你的心理落差会巨大，会觉得这个朋友不给力，这点都不帮你。\n那么也许你跟这个朋友的关系就会就此走下坡路。\n但是如果抱着低期望，可能这个忙大概率，他不会帮我，毕竟挺麻烦他的。如果他拒绝了，反正你已经预料了，但是如果同意了，你会觉得这个朋友靠谱，值得信赖。\n这样不管什么情况，两个人的关系都不会出现问题。\n这个放在两性关系里也挺实用的，比如恋爱或者结婚之后，抱着很高的期望，觉得对方不会有很多缺点，所以当你对方的做法令你不满意的时候就会经常吵架。\n但是其实都是人嘛，怎么可能没有缺点，总会有多多少少的摩擦，降低期望，互相谅解。\n怎么做到对事儿保持低期待呢？\n对事儿保持期望其实很简单，就是降低目标就行了。\n以我自己为例子，我每次发文章都抱着这篇文章一定能火的心态，那肯定每天过得都愁眉苦脸。\n但是我放平心态，我最近并没有什么实质性的突破，发个文章跟平时保持差不多就行了。\n一旦可能比平时阅读量高一点，我就会开心一整天，如果反响平平，那也不会影响我的心情。\n其实我以前就是对事儿，是以高期望的心态去做的。所以我以前经常做着做着不符合预期的时候就很伤，特别打击人。\n就拿做公众号来说，以前一起做公众号的几个朋友，好多人比我还晚做，但是阅读量早已超过我许多了。\n其实被后来的人超越，以前我还挺难受的，但是后来想通了，自己确实没有别人写得多，没有付出那么多努力，做得差也应该嘛，后面心态就好了。\n最后的建议 保持低期望值，并不是要求你不思进取，而是因为人的欲望和贪婪是永无止境的，保持较低的期望值，反而会对安心做事、身心健康与事业成就有好处。在浮躁的社会环境中，保持低期望值，保持简约生活，可以调节与清净我们的心灵，指导我们实实在在的幸福生活。\n","permalink":"/posts/2022/03-10-%E5%B9%B8%E7%A6%8F%E7%9A%84%E7%A7%98%E8%AF%80--%E4%BF%9D%E6%8C%81%E4%BD%8E%E6%9C%9F%E6%9C%9B/","summary":"为什么你总是在焦虑，总是对生活感到不满呢？\n也许是因为期望值太高了。由于期望值过高，现实往往不能达到预期的标准，即使达到了预期的标准，也体验不到“超过预期”的欢欣，因此，完美主义者们总是感到忧心忡忡。\n也许是时候把自己的期望值降低一些了，这并不是对现实生活的消极应对，而是对幸福感的积极追寻。\n今天读到一段话 ——\n对事对人，永远保持低期望。对任何事，永远保持低期望。低期望，就能坚持，就能付出。期望值太高，则很快因失望而放弃。为什么总是不求回报的人得到最大回报，就是这个原因。\n对我自己以前的想法产生了巨大的冲击。\n特别是对事儿，我以前都是以高期望去做的，认为这样可以让自己在做事儿的时候会更有动力，因为觉得这个事儿只要做成了就会很牛逼，高期望。\n在读到这段话，也许我真的要改变以往的心态了。\n期望值是一个人对某个目标能够实现的可能性的估计，目标估计越高，并不意味着实现目标的概率就越大，反而会因为不能实现目标而引起失望，增加心理痛苦。\n生活中人们往往对某些东西抱有较高的期待，但是等到面对时，往往会发现这件东西并没有给你带来预期的效果，这种心理上的落差会让人倍感痛苦。\n我之前看到过这样一个公式：幸福 = 现实 - 期望。\n所以想要幸福，关键因数在于现实和期望。\n现实往往是难以改变的，但是我们可以管理我们的期望，调整节我们的幸福感。\n期望又分为对人的期待和对事儿的期待。\n怎么做到对事儿对人保持低期待呢？\n比如当我们再寻求朋友帮助的时候，我们一定要降低期望，帮我们是情谊不帮我们是本分。如果你抱着一定会帮你心态，一旦被拒绝，那么你的心理落差会巨大，会觉得这个朋友不给力，这点都不帮你。\n那么也许你跟这个朋友的关系就会就此走下坡路。\n但是如果抱着低期望，可能这个忙大概率，他不会帮我，毕竟挺麻烦他的。如果他拒绝了，反正你已经预料了，但是如果同意了，你会觉得这个朋友靠谱，值得信赖。\n这样不管什么情况，两个人的关系都不会出现问题。\n这个放在两性关系里也挺实用的，比如恋爱或者结婚之后，抱着很高的期望，觉得对方不会有很多缺点，所以当你对方的做法令你不满意的时候就会经常吵架。\n但是其实都是人嘛，怎么可能没有缺点，总会有多多少少的摩擦，降低期望，互相谅解。\n怎么做到对事儿保持低期待呢？\n对事儿保持期望其实很简单，就是降低目标就行了。\n以我自己为例子，我每次发文章都抱着这篇文章一定能火的心态，那肯定每天过得都愁眉苦脸。\n但是我放平心态，我最近并没有什么实质性的突破，发个文章跟平时保持差不多就行了。\n一旦可能比平时阅读量高一点，我就会开心一整天，如果反响平平，那也不会影响我的心情。\n其实我以前就是对事儿，是以高期望的心态去做的。所以我以前经常做着做着不符合预期的时候就很伤，特别打击人。\n就拿做公众号来说，以前一起做公众号的几个朋友，好多人比我还晚做，但是阅读量早已超过我许多了。\n其实被后来的人超越，以前我还挺难受的，但是后来想通了，自己确实没有别人写得多，没有付出那么多努力，做得差也应该嘛，后面心态就好了。\n最后的建议 保持低期望值，并不是要求你不思进取，而是因为人的欲望和贪婪是永无止境的，保持较低的期望值，反而会对安心做事、身心健康与事业成就有好处。在浮躁的社会环境中，保持低期望值，保持简约生活，可以调节与清净我们的心灵，指导我们实实在在的幸福生活。","title":"幸福的秘诀--保持低期望"},{"content":"今天读《华与华正道》看到一句话：如何管理时间？做到铁石心肠、制定节拍、不追热点。\n这三个法宝基本上已经足以满足绝大部分人的需求了。\n接下来我们来推演一下这三个法宝为什么有用。\n大前提：\n时间管理就是把重要的事情放在效率最高的时候做，让产生的价值最大化。即时间管理 = 做事价值 * 做事的效率\n你是承认时间并不能被管理，被管理的只有人。\n如果这个大前提是认同的，可以继续往下看，如果不认，可以关闭了，因为下面所有的推演都是基于此。\n法宝一：制定节拍 我们基于大前提一开始推演，时间管理 = 做事的价值 * 做事的效率。\n所以我们就要知道我们做什么事情价值高，同时，我们在什么时候做事的效率高。\n当我们知道之后，我们就需要制定我们自己的节拍，尽量的去固定自己的日程，在效率高的时候去做价值高的事情。\n这样我们才会效益最大化，时间管理就是有效的。\n如果我们没有制定自己的节拍，那么我们就是跟着别人的节拍走的，他想什么时候找你就什么时间找你。\n别人按照他的节拍走的，事儿都干完了，而自己的最重要的事情都还没干。\n这种情况就需要模糊，互相的去适应，去调整互相的节拍，尽量一致。\n另外自己的节拍最好可以公布出来，让大家都知道，这样磨合起来会快一点。\n法宝二：铁石心肠 基于大前提二：时间不能被管理，被管理的只有人。\n这个人有别人和自己。\n铁石心肠就是用来管理别人的，当别人来打断你的计划的时候，可以拒绝。\n没有什么抹不开面子的事儿，我的时间我做主。\n法宝三：不追热点 同样基于大前提二：时间不能被管理，被管理的只有人。\n这个人有别人和自己。\n不追热点就是用来管理自己的。\n让自己可以专注于的做事情，高效不仅需要一个合适的时间段，更重要的还是需要能专注下来，心无旁骛。\n追热点就像街上有人打架，你围观，还评论，最浪费时间。\n总结 总结下来管理时间就是严格准时自己制定的节拍，通过铁石心肠和不追热点的法宝管理别人和管理自己，让自己制定的节拍能够准时执行下去。\n","permalink":"/posts/2022/03-09-%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%89%E5%A4%A7%E6%B3%95%E5%AE%9D/","summary":"今天读《华与华正道》看到一句话：如何管理时间？做到铁石心肠、制定节拍、不追热点。\n这三个法宝基本上已经足以满足绝大部分人的需求了。\n接下来我们来推演一下这三个法宝为什么有用。\n大前提：\n时间管理就是把重要的事情放在效率最高的时候做，让产生的价值最大化。即时间管理 = 做事价值 * 做事的效率\n你是承认时间并不能被管理，被管理的只有人。\n如果这个大前提是认同的，可以继续往下看，如果不认，可以关闭了，因为下面所有的推演都是基于此。\n法宝一：制定节拍 我们基于大前提一开始推演，时间管理 = 做事的价值 * 做事的效率。\n所以我们就要知道我们做什么事情价值高，同时，我们在什么时候做事的效率高。\n当我们知道之后，我们就需要制定我们自己的节拍，尽量的去固定自己的日程，在效率高的时候去做价值高的事情。\n这样我们才会效益最大化，时间管理就是有效的。\n如果我们没有制定自己的节拍，那么我们就是跟着别人的节拍走的，他想什么时候找你就什么时间找你。\n别人按照他的节拍走的，事儿都干完了，而自己的最重要的事情都还没干。\n这种情况就需要模糊，互相的去适应，去调整互相的节拍，尽量一致。\n另外自己的节拍最好可以公布出来，让大家都知道，这样磨合起来会快一点。\n法宝二：铁石心肠 基于大前提二：时间不能被管理，被管理的只有人。\n这个人有别人和自己。\n铁石心肠就是用来管理别人的，当别人来打断你的计划的时候，可以拒绝。\n没有什么抹不开面子的事儿，我的时间我做主。\n法宝三：不追热点 同样基于大前提二：时间不能被管理，被管理的只有人。\n这个人有别人和自己。\n不追热点就是用来管理自己的。\n让自己可以专注于的做事情，高效不仅需要一个合适的时间段，更重要的还是需要能专注下来，心无旁骛。\n追热点就像街上有人打架，你围观，还评论，最浪费时间。\n总结 总结下来管理时间就是严格准时自己制定的节拍，通过铁石心肠和不追热点的法宝管理别人和管理自己，让自己制定的节拍能够准时执行下去。","title":"时间管理的三大法宝"},{"content":"React 是一个 JavaScript 库，它是当今最流行和行业领先的前端开发库。\nJavaScript 是一种松散的类型化语言，因此，它捕获了运行时。这样做的结果就是 JavaScript 错误被捕获得非常晚，这可能导致严重的 bug。\n当然 React 作为一个 JavaScript 库，也继承了这个问题。\n干净代码(Clean code)是一种一致的编程风格，它使代码更容易编写、读取和维护。任何人都可以编写计算机可以理解的代码，但是优秀的开发人员可以编写人类可以理解的干净的代码。\n干净的代码是一种以读者为中心的开发风格，它提高了我们的软件质量和可维护性。\n编写干净代码需要编写具有清晰和简单的设计模式的代码，这使得人们可以轻松地阅读、测试和维护代码。因此，干净的代码可以降低软件开发的成本。这是因为编写干净的代码所涉及的原则，消除了技术债务。\n在本文中，我们将介绍一些在使用 React 和 TypeScript 时使用的有用模式。\n💡 为了让您的团队更容易地保持代码健康并优先处理技术债务工作，请尝试使用 Stepsize 的 VS Code 和 JetBrains 扩展。它们帮助工程师创建技术问题，将它们添加到迭代 中，并持续解决技术债务——而不离开编辑器。\n现在让我们来了解一下在使用 React 和 Typescript 时应用的 10 个有用模式:\n1. 使用默认导入来导入 React 考虑下面的代码:\nimport * as React from \u0026#34;react\u0026#34;; 虽然上面的代码可以工作，但是如果我们不使用 React 的所有内容，那么导入它们是令人困惑的，也不是一个好的做法。一个更好的模式是使用如下所示的默认导出:\nimport React, {useContext, useState} from \u0026#34;react\u0026#34;; 使用这种方法，我们可以从 React 模块中解构我们需要的东西，而不是导入所有的内容。\n注意: 要使用这个选项，我们需要配置 tsconfig.json 文件，如下所示:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;esModuleInterop\u0026#34;: true\u0026#34; } } 在上面的代码中，通过将 esModuleInterop 设置为 true，我们启用了 allowSyntheticDefaultImports ，这对于 TypeScript 支持我们的语法非常重要。\n2. 类型声明要在运行时实现之前 考虑下面的代码:\nimport React, {Component} from \u0026#34;react\u0026#34;; const initialState = { count: 1 } const defaultProps = { name: \u0026#34;John Doe\u0026#34; } type State = typeof initialState; type Props = { count?: number } \u0026amp; typeof defaultProps class Counter extends Component { static defaultProps = defaultProps; state = initialState; // ... } 如果我们将运行时声明和编译时声明分开，并且编译时声明在运行时声明之前，那么上面的代码可以更清晰、更易读。\n考虑下面的代码:\nimport React, {Component} from \u0026#34;react\u0026#34;; type State = typeof initialState; type Props = { count?: number } \u0026amp; typeof defaultProps const initialState = { count: 1 } const defaultProps = { name: \u0026#34;John Doe\u0026#34; } class Counter extends Component { static defaultProps = defaultProps; state = initialState; // ... } 现在，初看起来，开发人员知道组件 API 是什么样的，因为代码的第一行清楚地显示了这一点。\n此外，我们还将编译时声明与运行时声明分开。\n3. 给 children 提供明确的 props Typescript 反映了 React 如何处理 children props，方法是在 react.d.ts 中为函数组件和类组件将其注释为可选的。\n因此，我们需要明确地为 children 提供一个 props 类型。但是，最好总是用类型明确地注释children的 props。在我们希望使用 children 进行内容投影的情况下，这是非常有用的，如果我们的组件不使用它，我们可以简单地使用 never 类型来注释它。\n考虑下面的代码：\nimport React, {Component} from \u0026#34;react\u0026#34;; // Card.tsx type Props = { children: React.ReactNode } class Card extends Component\u0026lt;Props\u0026gt; { render() { const {children} = this.props; return \u0026lt;div\u0026gt;{children}\u0026lt;/div\u0026gt;; } } 下面是一些注释 children 的 props 类型：\nReactNode | ReactChild | ReactElement 对于原始类型可以使用： string | number | boolean 对象和数组也是有效的类型 never | null | undefined – 注意：不建议使用 null 和 undefined 4. 使用类型推断来定义组件状态或 DefaultProps 看下面的代码：\nimport React, {Component} from \u0026#34;react\u0026#34;; type State = { count: number }; type Props = { someProps: string \u0026amp; DefaultProps; } type DefaultProps = { name: string } class Counter extends Component\u0026lt;Props, State\u0026gt; { static defaultProps: DefaultProps = {name: \u0026#34;John Doe\u0026#34;} state = {count: 0} // ... } 虽然上面的代码可以工作，但是我们可以对它进行以下改进: 启用 TypeScript 的类型系统来正确推断readonly 类型，比如 DefaultProps 和 initialState。\n为了防止由于意外设置状态而导致的开发错误: this.state = {}\n考虑下面的代码:\nimport React, {Component} from \u0026#34;react\u0026#34;; const initialState = Object.freeze({ count: 0 }) const defaultProps = Object.freeze({name: \u0026#34;John Doe\u0026#34;}) type State = typeof initialState; type Props = { someProps: string } \u0026amp; typeof defaultProps; class Counter extends Component\u0026lt;Props, State\u0026gt; { static readonly defaultProps = defaultProps; readonly state = {count: 0} // ... } 在上面的代码中，通过冻结 DefaultProps 和 initialState，TypeScript 类型系统现在可以将它们推断为readonly类型。\n另外，通过在类中将静态 defaultProps 和状态标记为 readonly，我们消除了上面提到的设置状态引起运行时错误的可能性。\n5. 声明 Props/State 时使用类型别名(type)，而不是接口(interface) 虽然可以使用interface，但为了一致性和清晰性起见，最好使用 type，因为有些情况下interface不能工作。例如，在前面的示例中，我们重构了代码，以使 TypeScript 的类型系统能够通过从实现中定义状态类型来正确推断 readonly类型。我们不能像下面的代码那样使用这个模式的interface:\n// works type State = typeof initialState; type Props = { someProps: string } \u0026amp; typeof defaultProps; // throws error interface State = typeof initialState; interface Props = { someProps: string } \u0026amp; typeof defaultProps; 此外，我们不能用联合和交集创建的类型扩展interface，因此在这些情况下，我们必须使用 type。\n6. 不要再 interface/type 中使用方法声明 这可以确保我们的代码中的模式一致性，因为 type/interface 推断的所有成员都是以相同的方式声明的。另外，--strictFunctionTypes 仅在比较函数时工作，而不适用于方法。你可以从这个 TS 问题中得到进一步的解释。\n// Don\u0026#39;t do interface Counter { start(count:number) : string reset(): void } // Do interface Counter { start: (count:number) =\u0026gt; string reset: () =\u0026gt; string } 7. 不要使用 FunctionComponent 或者简称为 FC 来定义一个函数组件。\n当使用 Typescript 和 React 时，函数组件可以通过两种方式编写:\n像一个正常函数一样，如下面的代码： type Props = { message: string }; const Greeting = ({ message }: Props) =\u0026gt; \u0026lt;div\u0026gt;{message}\u0026lt;/div\u0026gt;; 使用 React.FC 或者 React.FunctionComponent，像下面这样： import React, {FC} from \u0026#34;react\u0026#34;; type Props = { message: string }; const Greeting: FC\u0026lt;Props\u0026gt; = (props) =\u0026gt; \u0026lt;div\u0026gt;{props}\u0026lt;/div\u0026gt;; 使用 FC 提供了一些优势，例如对诸如 displayName、 propTypes 和 defaultProps 等静态属性进行类型检查和自动完成。但是它有一个已知的问题，那就是破坏 defaultProps 和其他属性: propTypes，contextTypes，displayName。\nFC 还提供了一个隐式类型的 children 属性，也有已知的问题。此外，正如前面讨论的，组件 API 应该是显式的，所以一个隐式类型的 children 属性不是最好的。\n8. 不要对类组件使用构造函数 有了新的 类属性 提议，就不再需要在 JavaScript 类中使用构造函数了。使用构造函数涉及调用 super ()和传递 props，这就引入了不必要的样板和复杂性。\n我们可以编写更简洁、更易于维护的 React class 组件，使用类字段，如下所示:\n// Don\u0026#39;t do type State = {count: number} type Props = {} class Counter extends Component\u0026lt;Props, State\u0026gt; { constructor(props:Props){ super(props); this.state = {count: 0} } } // Do type State = {count: number} type Props = {} class Counter extends Component\u0026lt;Props, State\u0026gt; { state = {count: 0} } 在上面的代码中，我们看到使用类属性涉及的样板文件较少，因此我们不必处理 this 变量。\n9. 不要在类中使用 public 关键字 考虑下面的代码：\nimport { Component } from \u0026#34;react\u0026#34; class Friends extends Component { public fetchFriends () {} public render () { return // jsx blob } } 由于类中的所有成员在默认情况下和运行时都是 public 的，因此不需要通过显式使用 public 关键字来添加额外的样板文件。相反，使用下面的模式:\nimport { Component } from \u0026#34;react\u0026#34; class Friends extends Component { fetchFriends () {} render () { return // jsx blob } } 10. 不要在组件类中使用 private 考虑下面的代码：\nimport {Component} from \u0026#34;react\u0026#34; class Friends extends Component { private fetchProfileByID () {} render () { return // jsx blob } } 在上面的代码中，private 只在编译时将 fetchProfileByID 方法私有化，因为它只是一个 Typescript 模拟。但是，在运行时，fetchProfileByID 方法仍然是公共的。\n有不同的方法使 JavaScript 类的属性/方法私有化，使用下划线(_)变数命名原则如下:\nimport {Component} from \u0026#34;react\u0026#34; class Friends extends Component { _fetchProfileByID () {} render () { return // jsx blob } } 虽然这并没有真正使 fetchProfileByID 方法成为私有方法，但它很好地向其他开发人员传达了我们的意图，即指定的方法应该被视为私有方法。其他技术包括使用 WeakMap、Symbol 和限定作用域的变量。\n但是有了新的 ECMAScript 类字段的提议，我们可以通过使用私有字段轻松优雅地实现这一点，如下所示:\nimport {Component} from \u0026#34;react\u0026#34; class Friends extends Component { #fetchProfileByID () {} render () { return // jsx blob } } 而且 TypeScript 支持 3.8 及以上版本私有字段的新 JavaScript 语法。\n附加：不要使用 enum 尽管 enum 在 JavaScript 中是一个保留字，但是使用 enum 并不是一个标准的惯用 JavaScript 模式。\n但是如果你使用的是 c # 或者 JAVA 这样的语言，那么使用 enum 可能是非常诱人的。但是，还有更好的模式，比如使用编译类型文字，如下所示:\n// Don\u0026#39;t do this enum Response { Successful, Failed, Pending } function fetchData (status: Response): void =\u0026gt; { // some code. } // Do this type Response = Sucessful | Failed | Pending function fetchData (status: Response): void =\u0026gt; { // some code. } 总结 毫无疑问，使用 Typescript 会给你的代码增加很多额外的样板文件，但是这样做的好处是非常值得的。\n为了使您的代码更干净、更好，不要忘记实现一个健壮的 TODO/issue 过程。它将帮助您的工程团队获得技术债务的可见性，在代码库问题上进行协作，并更好地规划冲刺。\n本文译自：https://dev.to/alexomeyer/10-must-know-patterns-for-writing-clean-code-with-react-and-typescript-1m0g\n","permalink":"/posts/2022/03-09-%E4%BD%BF%E7%94%A8-react-%E5%92%8C-typescript-something-%E7%BC%96%E5%86%99%E5%B9%B2%E5%87%80%E4%BB%A3%E7%A0%81%E7%9A%8410%E4%B8%AA%E5%BF%85%E7%9F%A5%E6%A8%A1%E5%BC%8F-copy/","summary":"React 是一个 JavaScript 库，它是当今最流行和行业领先的前端开发库。\nJavaScript 是一种松散的类型化语言，因此，它捕获了运行时。这样做的结果就是 JavaScript 错误被捕获得非常晚，这可能导致严重的 bug。\n当然 React 作为一个 JavaScript 库，也继承了这个问题。\n干净代码(Clean code)是一种一致的编程风格，它使代码更容易编写、读取和维护。任何人都可以编写计算机可以理解的代码，但是优秀的开发人员可以编写人类可以理解的干净的代码。\n干净的代码是一种以读者为中心的开发风格，它提高了我们的软件质量和可维护性。\n编写干净代码需要编写具有清晰和简单的设计模式的代码，这使得人们可以轻松地阅读、测试和维护代码。因此，干净的代码可以降低软件开发的成本。这是因为编写干净的代码所涉及的原则，消除了技术债务。\n在本文中，我们将介绍一些在使用 React 和 TypeScript 时使用的有用模式。\n💡 为了让您的团队更容易地保持代码健康并优先处理技术债务工作，请尝试使用 Stepsize 的 VS Code 和 JetBrains 扩展。它们帮助工程师创建技术问题，将它们添加到迭代 中，并持续解决技术债务——而不离开编辑器。\n现在让我们来了解一下在使用 React 和 Typescript 时应用的 10 个有用模式:\n1. 使用默认导入来导入 React 考虑下面的代码:\nimport * as React from \u0026#34;react\u0026#34;; 虽然上面的代码可以工作，但是如果我们不使用 React 的所有内容，那么导入它们是令人困惑的，也不是一个好的做法。一个更好的模式是使用如下所示的默认导出:\nimport React, {useContext, useState} from \u0026#34;react\u0026#34;; 使用这种方法，我们可以从 React 模块中解构我们需要的东西，而不是导入所有的内容。\n注意: 要使用这个选项，我们需要配置 tsconfig.json 文件，如下所示:\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;esModuleInterop\u0026#34;: true\u0026#34; } } 在上面的代码中，通过将 esModuleInterop 设置为 true，我们启用了 allowSyntheticDefaultImports ，这对于 TypeScript 支持我们的语法非常重要。","title":"使用 React 和 TypeScript 编写干净代码的10个必知模式"},{"content":"今天在阅读《华与华正道》读到这么一句话 ：\n回顾过去比展望未来重要一百倍，如果对过去不认真复盘，就会再次掉进过去的错误里。一个步骤一个步骤地复盘，一个动作一个动作地复盘，才能找到成功或失败的真因。在复盘中钻研，钻研工法，持续改善，最终实现全公司的技术进步。\n我们在哪些方面，应该回顾、复盘？ 工作上的事情，比如每一个项目做完了需要复盘，每个月至少写一个月报复盘一下，最好每周复盘。 自己的情绪，比如跟伴侣吵架了，复盘一下是什么情况，两个的情绪分别是啥样的，然后复盘完之后两个再沟通一下，增加感情。 时间管理，比如每天组内其他同学下班都挺早，为啥自己这么晚。为啥早上规划的 5 件事，到下班只做了 3 件事？是不是被别人占用的时间太多了，还是自己偷懒了？ 如果不回顾，会怎么样？ 如果我们不养成回顾的习惯，一路往前走，肯定是走不远的。\n因为如果我们不对过去的进行复盘，大概率会再次掉进过去的错误里，只有在复盘的时候找到根本原因，才能进行避免；\n同时做得好的地方，也不会被发现，就无法让自己产生积累，无法给其他人复制，这样就无法精进，所以是走不远的。\n如何让我们能坚持回顾 每天回顾固然是好的，但是对于大部分人来说是很有难度的。\n比如：\n上了一天班，很累，回家就想休息。\n回顾是一个思考的过程，思考是反人性的，大脑会痛苦，特别是在晚上，意志力会变得很弱。\n我以前还遇到过一个难点，不知道回顾什么，想每天写日记来回顾，但是不知道写啥。\n针对以上的难点，我的思考的解决方案有两个：\n针对 1 和 2，其实都是因为把回顾的时间放到了晚上，晚上其实在做脑力工作不是一个合适的时间，建议把回顾放到早上，早起写晨间日记，写完前一天的复盘之后，再根据复盘的内容做当天的规划。 针对第 3 天，可以从工作、学习、快乐的事情、梦想、理财、关系、健康这几个方向去做回顾，养成习惯之后，这个事情机会变得很容易。 如果自己能坚持每天回顾，我相信我可以在这一年过得非常的清晰，因为我每天都知道我的目标是什么，我现在离目标有多远，我还要做什么才可以实现我的目标。\n同时，我也可以通过反思、回顾及时的调整错误的做事方式，\n最后 希望大家少关注未来，多回望历史，对过去犯过的错，认真复盘总结\n我们预测不到特朗普上台，也预测不了新冠肺炎发生，预测不了美股熔断，现在也预测不了哪个国家会怎么样。德鲁克说，未来只有一点是确定的，就是肯定跟我们的预测不一样。所以，少关注未来，多回望历史。过去犯过的错，认真复盘总结，下次不要再犯。\n","permalink":"/posts/2022/03-08-%E5%9B%9E%E9%A1%BE%E8%BF%87%E5%8E%BB%E6%AF%94%E5%B1%95%E6%9C%9B%E6%9C%AA%E6%9D%A5%E9%87%8D%E8%A6%81%E4%B8%80%E7%99%BE%E5%80%8D/","summary":"今天在阅读《华与华正道》读到这么一句话 ：\n回顾过去比展望未来重要一百倍，如果对过去不认真复盘，就会再次掉进过去的错误里。一个步骤一个步骤地复盘，一个动作一个动作地复盘，才能找到成功或失败的真因。在复盘中钻研，钻研工法，持续改善，最终实现全公司的技术进步。\n我们在哪些方面，应该回顾、复盘？ 工作上的事情，比如每一个项目做完了需要复盘，每个月至少写一个月报复盘一下，最好每周复盘。 自己的情绪，比如跟伴侣吵架了，复盘一下是什么情况，两个的情绪分别是啥样的，然后复盘完之后两个再沟通一下，增加感情。 时间管理，比如每天组内其他同学下班都挺早，为啥自己这么晚。为啥早上规划的 5 件事，到下班只做了 3 件事？是不是被别人占用的时间太多了，还是自己偷懒了？ 如果不回顾，会怎么样？ 如果我们不养成回顾的习惯，一路往前走，肯定是走不远的。\n因为如果我们不对过去的进行复盘，大概率会再次掉进过去的错误里，只有在复盘的时候找到根本原因，才能进行避免；\n同时做得好的地方，也不会被发现，就无法让自己产生积累，无法给其他人复制，这样就无法精进，所以是走不远的。\n如何让我们能坚持回顾 每天回顾固然是好的，但是对于大部分人来说是很有难度的。\n比如：\n上了一天班，很累，回家就想休息。\n回顾是一个思考的过程，思考是反人性的，大脑会痛苦，特别是在晚上，意志力会变得很弱。\n我以前还遇到过一个难点，不知道回顾什么，想每天写日记来回顾，但是不知道写啥。\n针对以上的难点，我的思考的解决方案有两个：\n针对 1 和 2，其实都是因为把回顾的时间放到了晚上，晚上其实在做脑力工作不是一个合适的时间，建议把回顾放到早上，早起写晨间日记，写完前一天的复盘之后，再根据复盘的内容做当天的规划。 针对第 3 天，可以从工作、学习、快乐的事情、梦想、理财、关系、健康这几个方向去做回顾，养成习惯之后，这个事情机会变得很容易。 如果自己能坚持每天回顾，我相信我可以在这一年过得非常的清晰，因为我每天都知道我的目标是什么，我现在离目标有多远，我还要做什么才可以实现我的目标。\n同时，我也可以通过反思、回顾及时的调整错误的做事方式，\n最后 希望大家少关注未来，多回望历史，对过去犯过的错，认真复盘总结\n我们预测不到特朗普上台，也预测不了新冠肺炎发生，预测不了美股熔断，现在也预测不了哪个国家会怎么样。德鲁克说，未来只有一点是确定的，就是肯定跟我们的预测不一样。所以，少关注未来，多回望历史。过去犯过的错，认真复盘总结，下次不要再犯。","title":"回顾过去比展望未来重要一百倍"},{"content":"今天读《华与华正道》，读两句话：\n先认识到什么事情是我们做不到的，然后再积极地去做现在能做的事。 要认识到我们知道的有限，能做的事情很少，然后把最少的事情做到最彻底 这两句都是让我们更专注于当前的事的思维。\n一、认识到什么事情是我们做不到的，然后再积极地去做现在能做的事 不知道大家有没有这样一种体感，就是你越读书，越专研一个知识，会发现自己不懂的越来越多，感觉自己越学越菜，越学不懂的越多。\n这是正常的，不管是阅读，还是跟牛人交流，随着你对世界的认识越深刻，刚开始起的作用是消极的，然后才是积极的。\n消极，让我们认识到自己能力和认知的边界，认识到什么事情知道，什么事情不知道，然后才积极的去做自己能做的事情。\n这种消极的意义可以让我们避免一些侥幸的情况，堵塞一切错误的源头。\n比如我去年在做年度总结的时候就说道我现在放弃了投资个股，甚至一些主动型的基金。\n不仅仅是因为去年亏了，而是因为我去年看了很多的投资的书籍，知道了投资个股要想一直赢，是一件极难的事情，需要考虑的东西实在太多。\n那些金融公司的高材生，天天研究都不一定能保证能赚，甚至不一定能跑赢大盘，我一个一年就花几十个小时的人，怎么可能比他们强。\n所以选择投指数基金或者做一些低风险的投资。\n然后把更多的时间花在自己的工作或其他有意义的事情。\n这就是认识到自己的能力边界的意义，可以专注于自己能做的事情。\n二、要认识到我们知道的有限，能做的事情很少，然后把最少的事情做到最彻底 在上面已经明白了，我们要去积极的做自己能做的事情。\n但是其实能做的事情也很多，比如我想做自媒体，我可以：\n做公众号 做抖音 做头条 做小红书 做知乎 等等各种方式。\n但是除了公众号，其他的平台我都是几乎没有经验，如果花挺多时间到其他平台上，那将是充满很多的不确定。\n如果我每个平台都花时间去做，可能最终的效果就是每个渠道都没做起来，甚至公众号也垮了。\n所以我今年还是重点发力在公众号上，去寻找确定性的道路，把目标缩小到具有确定性。\n想要得到一切，不过是一厢情愿的幻想。\n要认识到，并接受现实——我们所知道的有限，我们能做的事情很少，然后把最少的事情做到最彻底。\n把最小确定性的目标实现，则运气上不封顶。想要的东西太多，则所得下不保底。\n总结 第一句话告诉了我们要去知道哪些我们是不知道的，积极去做能做的。\n第二句话是在能做的事情里去寻找确定的小目标，我们知道的有限，能做的也很少，把这少的、能做的事情做到最彻底。\n剩下的交给运气就行了。\n","permalink":"/posts/2022/%E4%B8%93%E6%B3%A8%E4%BA%8E%E8%87%AA%E5%B7%B1%E8%83%BD%E5%81%9A%E7%9A%84%E6%9C%80%E5%B0%91%E7%9A%84%E4%BA%8B%E6%83%85/","summary":"今天读《华与华正道》，读两句话：\n先认识到什么事情是我们做不到的，然后再积极地去做现在能做的事。 要认识到我们知道的有限，能做的事情很少，然后把最少的事情做到最彻底 这两句都是让我们更专注于当前的事的思维。\n一、认识到什么事情是我们做不到的，然后再积极地去做现在能做的事 不知道大家有没有这样一种体感，就是你越读书，越专研一个知识，会发现自己不懂的越来越多，感觉自己越学越菜，越学不懂的越多。\n这是正常的，不管是阅读，还是跟牛人交流，随着你对世界的认识越深刻，刚开始起的作用是消极的，然后才是积极的。\n消极，让我们认识到自己能力和认知的边界，认识到什么事情知道，什么事情不知道，然后才积极的去做自己能做的事情。\n这种消极的意义可以让我们避免一些侥幸的情况，堵塞一切错误的源头。\n比如我去年在做年度总结的时候就说道我现在放弃了投资个股，甚至一些主动型的基金。\n不仅仅是因为去年亏了，而是因为我去年看了很多的投资的书籍，知道了投资个股要想一直赢，是一件极难的事情，需要考虑的东西实在太多。\n那些金融公司的高材生，天天研究都不一定能保证能赚，甚至不一定能跑赢大盘，我一个一年就花几十个小时的人，怎么可能比他们强。\n所以选择投指数基金或者做一些低风险的投资。\n然后把更多的时间花在自己的工作或其他有意义的事情。\n这就是认识到自己的能力边界的意义，可以专注于自己能做的事情。\n二、要认识到我们知道的有限，能做的事情很少，然后把最少的事情做到最彻底 在上面已经明白了，我们要去积极的做自己能做的事情。\n但是其实能做的事情也很多，比如我想做自媒体，我可以：\n做公众号 做抖音 做头条 做小红书 做知乎 等等各种方式。\n但是除了公众号，其他的平台我都是几乎没有经验，如果花挺多时间到其他平台上，那将是充满很多的不确定。\n如果我每个平台都花时间去做，可能最终的效果就是每个渠道都没做起来，甚至公众号也垮了。\n所以我今年还是重点发力在公众号上，去寻找确定性的道路，把目标缩小到具有确定性。\n想要得到一切，不过是一厢情愿的幻想。\n要认识到，并接受现实——我们所知道的有限，我们能做的事情很少，然后把最少的事情做到最彻底。\n把最小确定性的目标实现，则运气上不封顶。想要的东西太多，则所得下不保底。\n总结 第一句话告诉了我们要去知道哪些我们是不知道的，积极去做能做的。\n第二句话是在能做的事情里去寻找确定的小目标，我们知道的有限，能做的也很少，把这少的、能做的事情做到最彻底。\n剩下的交给运气就行了。","title":"专注于自己能做的最少的事情"},{"content":"前言 今天阅读《华与华正道》，看到了跟花钱有关的两句话：\n要舍得多花“冤枉钱”，这样碰上刀刃的概率比较大 钱最贱，人最贵，贵的人，时间更贵 感受颇深，特来解读自己理解。\n要舍得多花“冤枉钱”，才容易花到刀刃上 经常父母会说：在外面不要乱花钱，要把钱花在刀刃上。\n但是父母并没有说\n「刀刃」是什么？ 怎么才能把钱花在「刀刃」上。 刀刃是什么？\n刀刃是刀最锋利的一边，用来比喻关键处。\n那其实把钱花到刀刃上，即为把钱花在关键处。\n这个关键处，对于不同的人，不同的时期，关键处也不一样。\n比如：\n读高中的时候，关键处就是高考，那么花钱到刀刃上就是要把到合适我的练习题。 上大学的时候，关键处是为了找工作，那么花钱到刀刃上，就需要把钱买到合适的编程书籍、合适的编程课程。 对于可能快结婚的人，那么花钱就应该花在买房、准备结婚的钱，而不是把钱拿去投资、创业、娱乐。 所以，想要正确的花钱，需要找到自己当前最需要什么，然后根据自己的需要找到「刀刃」。\n多花「冤枉钱」，是一个花到刀刃上的好方法。\n如何把钱花在刀刃上？\n答案是多花冤枉钱，这样碰上刀刃的概率比较大，就容易成功。如果想把所有的钱都花在刀刃上，那就根本碰不上刀刃，这人就没出息了。\n我举几个例子就会明白了。\n比如一些广告商，来公众号投广告，那么他们的刀刃就是把钱花下去了，就有转化率，有人报他们课。\n如果他们抱着只要投了，就一定有人报课的心态去投的话，他们就可能花大量的时间跟金钱去研究这个公众号主转化率是否符合期望。\n这样有两个问题：\n时间风险，可能会导致被其他的广告给吸引走了，现在一般一个行业同类的会有好几个，不存在只有一家公司。 金钱成本，在去深度判断一个公众号是否值得投入，可能需要买很多工具，已经人力去分析，这也是很大的成本。 所以往往刚开始广告商都是简单的了解一下号主，然后先投一次再说，效果好的，再复投就行了。这样可能是会多花「冤枉钱」，但是没有让优秀的号主被遗漏。\n再拿现在的很多公司拉新来说吧，比如注册邀请一个好友注册，奖励 20 元。\n他们其实要的用户是长期用它们的 APP，并且可以在他们平台消费的用户。\n但是要这样精准的用户(其实就是刀刃)，很难精确的筛选出来，去进行补贴吸引，所以只能多花「冤枉钱」，先铺量，再选优。\n这样就明白了吧，想把所有的钱花在刀刃上，最终可能就是碰不上刀刃。多花点冤枉钱，这样在刀刃上的概率大。\n钱最贱，人最贵，贵的人，时间更贵 书中是这么解释这句话的：\n能花钱办的事，绝对不要花时间。能用钱办的事，绝对不要用人。能外包给别人干的事，绝对不用自己人。钱最贱，人最贵，贵的人，时间更贵。别人再贵，也比自己人便宜。自己人最贵，所以要加大投资培养自己人。\n总结一下就是：按照贵重程度排序，人 \u0026gt; 时间 \u0026gt; 钱\n当然，这句话我并不是完全同意，我同意他的理念，不同意他的绝对。\n我身边有挺多人把钱看得太重要了，而忽略了时间成本。\n有一次跟几个朋友一起从杭州到上海去参加一个隆重的校友会，我们都买的是高铁票，一个多小时能到；而有一个人买的是火车票，应该要三个多小时。\n价钱上应该火车票会比高铁便宜一半。\n当时我们就说你这在车上浪费的时间，完全不知道，这次出去我们就是为了玩的，结果大多时间都浪费在了火车上。\n这个朋友当时完全不能理解时间比钱重要的思想，可能是从小节约用钱的思想根深蒂固。\n最终就是我们到了上海之后玩了好久他才到，他到了上海，都快吃晚饭了，结果就是啥都没玩到，你说这亏不亏嘛。\n如果你也觉得时间很重要，那就用钱去换时间。\n比如：\n你应该多花点钱让自己住得离公司近一点，而不是为了省钱，每天在通勤上花上 两三个小时。 短途出行，非高峰期，坚决选择打车。公共汽车、地铁路线虽多，但站站停，换车通常花太多时间。 付费学习，买书、买课程，买教练，不再世界上到处找免费的东西。 付费咨询：与其自己纠结，不如直接投资找个行业专家咨询建议。 常言道，年轻时用时间换钱，年老时用钱换时间。\n时间是我们最宝贵的资产，趁年轻时不必要的小钱就别刻意节省了，分配出一些金钱兑换时间多做些自己喜欢的事情岂不是更好？\n随着你养成了用金钱交换时间的习惯，减少找免费服务、便宜货。\n不知不觉，你反而节省了时间和原本会被消耗的专注力。\n总结 这两个花钱的观念我希望人人都能懂。\n多花冤枉钱，花在刀刃上。 用金钱换时间，人 \u0026gt; 时间 \u0026gt; 钱。 ","permalink":"/posts/2022/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%8A%B1%E9%92%B1/","summary":"前言 今天阅读《华与华正道》，看到了跟花钱有关的两句话：\n要舍得多花“冤枉钱”，这样碰上刀刃的概率比较大 钱最贱，人最贵，贵的人，时间更贵 感受颇深，特来解读自己理解。\n要舍得多花“冤枉钱”，才容易花到刀刃上 经常父母会说：在外面不要乱花钱，要把钱花在刀刃上。\n但是父母并没有说\n「刀刃」是什么？ 怎么才能把钱花在「刀刃」上。 刀刃是什么？\n刀刃是刀最锋利的一边，用来比喻关键处。\n那其实把钱花到刀刃上，即为把钱花在关键处。\n这个关键处，对于不同的人，不同的时期，关键处也不一样。\n比如：\n读高中的时候，关键处就是高考，那么花钱到刀刃上就是要把到合适我的练习题。 上大学的时候，关键处是为了找工作，那么花钱到刀刃上，就需要把钱买到合适的编程书籍、合适的编程课程。 对于可能快结婚的人，那么花钱就应该花在买房、准备结婚的钱，而不是把钱拿去投资、创业、娱乐。 所以，想要正确的花钱，需要找到自己当前最需要什么，然后根据自己的需要找到「刀刃」。\n多花「冤枉钱」，是一个花到刀刃上的好方法。\n如何把钱花在刀刃上？\n答案是多花冤枉钱，这样碰上刀刃的概率比较大，就容易成功。如果想把所有的钱都花在刀刃上，那就根本碰不上刀刃，这人就没出息了。\n我举几个例子就会明白了。\n比如一些广告商，来公众号投广告，那么他们的刀刃就是把钱花下去了，就有转化率，有人报他们课。\n如果他们抱着只要投了，就一定有人报课的心态去投的话，他们就可能花大量的时间跟金钱去研究这个公众号主转化率是否符合期望。\n这样有两个问题：\n时间风险，可能会导致被其他的广告给吸引走了，现在一般一个行业同类的会有好几个，不存在只有一家公司。 金钱成本，在去深度判断一个公众号是否值得投入，可能需要买很多工具，已经人力去分析，这也是很大的成本。 所以往往刚开始广告商都是简单的了解一下号主，然后先投一次再说，效果好的，再复投就行了。这样可能是会多花「冤枉钱」，但是没有让优秀的号主被遗漏。\n再拿现在的很多公司拉新来说吧，比如注册邀请一个好友注册，奖励 20 元。\n他们其实要的用户是长期用它们的 APP，并且可以在他们平台消费的用户。\n但是要这样精准的用户(其实就是刀刃)，很难精确的筛选出来，去进行补贴吸引，所以只能多花「冤枉钱」，先铺量，再选优。\n这样就明白了吧，想把所有的钱花在刀刃上，最终可能就是碰不上刀刃。多花点冤枉钱，这样在刀刃上的概率大。\n钱最贱，人最贵，贵的人，时间更贵 书中是这么解释这句话的：\n能花钱办的事，绝对不要花时间。能用钱办的事，绝对不要用人。能外包给别人干的事，绝对不用自己人。钱最贱，人最贵，贵的人，时间更贵。别人再贵，也比自己人便宜。自己人最贵，所以要加大投资培养自己人。\n总结一下就是：按照贵重程度排序，人 \u0026gt; 时间 \u0026gt; 钱\n当然，这句话我并不是完全同意，我同意他的理念，不同意他的绝对。\n我身边有挺多人把钱看得太重要了，而忽略了时间成本。\n有一次跟几个朋友一起从杭州到上海去参加一个隆重的校友会，我们都买的是高铁票，一个多小时能到；而有一个人买的是火车票，应该要三个多小时。\n价钱上应该火车票会比高铁便宜一半。\n当时我们就说你这在车上浪费的时间，完全不知道，这次出去我们就是为了玩的，结果大多时间都浪费在了火车上。\n这个朋友当时完全不能理解时间比钱重要的思想，可能是从小节约用钱的思想根深蒂固。\n最终就是我们到了上海之后玩了好久他才到，他到了上海，都快吃晚饭了，结果就是啥都没玩到，你说这亏不亏嘛。\n如果你也觉得时间很重要，那就用钱去换时间。\n比如：\n你应该多花点钱让自己住得离公司近一点，而不是为了省钱，每天在通勤上花上 两三个小时。 短途出行，非高峰期，坚决选择打车。公共汽车、地铁路线虽多，但站站停，换车通常花太多时间。 付费学习，买书、买课程，买教练，不再世界上到处找免费的东西。 付费咨询：与其自己纠结，不如直接投资找个行业专家咨询建议。 常言道，年轻时用时间换钱，年老时用钱换时间。\n时间是我们最宝贵的资产，趁年轻时不必要的小钱就别刻意节省了，分配出一些金钱兑换时间多做些自己喜欢的事情岂不是更好？\n随着你养成了用金钱交换时间的习惯，减少找免费服务、便宜货。\n不知不觉，你反而节省了时间和原本会被消耗的专注力。\n总结 这两个花钱的观念我希望人人都能懂。\n多花冤枉钱，花在刀刃上。 用金钱换时间，人 \u0026gt; 时间 \u0026gt; 钱。 ","title":"如何正确的花钱"},{"content":"大家好，我是桃翁，一个不止前端的前端工程师。\n前言 前几天在一个写作课里学习到一个写作技巧：文章 = 问题 + 答案。\n大概就是说当你看到一个话题，想写成文章的时候，可以想一想你针对这个话题会有哪些问题。然后挨个回答一下这个问题，把回答组合一下，就成为一篇文章了。\n我发现这个方法跟我有一些文章的方法很像，但是我并没有这样总结出来，而是在写的时候自然而然就这么去设计了。\n以这篇用 husky 和 lint-staged 构建代码检查工作流 文章举个例，做一个实战教学，建议看下面的内容的时候先阅读一下这篇文章。\n实战 一、提问题\n我要介绍的主题是：构建代码检查工作流。\n针对这个主题，我想到了几个问题：\n什么是代码检查？ 什么情况下需要用到代码检查？ 怎么做代码检查？ 怎么把代码检查做成工作流？ 注意：每个人想到的问题不一样，所以写的思路可能也不太一样。\n如果想不到什么问题，我这里给到的建议可以提 what、when、why、how 这样的问题，这也是一种写作方法，后面再讲。\n根据以上的思路就可以把大纲列出来。\n二、列大纲 其实一般可以直接把这些问题当做大纲。\n但是我这篇文章后面又考虑到怎么做代码检查东西比较多，只有在知道了最基础的代码检查方法之后，才可能推到出要用 husky 和 lint-staged 这样的工具。\n所以我最终还是以陈述的方式为大纲，一步一步的引导，最终把把代码检查做成工作流。\n所以最终这篇文章的目录大概是这样的。\n前言里面回答了什么是代码检查和什么情况下需要用到代码检查。\n在最简单的方法这个大纲里就是怎么做代码检查。\n最后的三个都是讲怎么把代码检查做成工作流。\n三、回答问题\n大纲做好了，就开始填内容了。\n前言就没什么好说的了，主要是介绍背景，然后引出我们怎么做代码检查。\n接下来就写了最简单的方法来做代码检查，再提出了两个问题。\n其实这两个问题就是来解决工作流的问题。\n下面的两个段落就是来解决这两个问题，看到没有，这又是问题 + 回答的模式，不仅大话题可以引发问题，还可以问题里套问题。\n标题：通过 scripts 来解决如果检测工具多，需要多次处理，解决问题 1.\n标题：通过 husky(哈士奇)来解决容易遗忘的问题，解决问题 2.\n所以整篇文章都是以问题驱动，一步一步引导读者把小问题解决了，最终串起来就把大问题解决了。\n总结 总结一下，这种问题 + 回答的写作方式有什么好处：\n**段落之间具有连贯性。**每个标题之前都是承上启下，都是来解决上面一个标题的问题，然后引出下面一个问题。 读者读起来很流畅，会产生恍然大悟的感觉。 最后在复盘一下这篇用 husky 和 lint-staged 构建代码检查工作流 我觉得不好的地方：\n标题不够小白，导致受众不够多，导致打开率低。 在前言里背景介绍得不够细致，如果以前没做过这方面的，可能体感不强。 ","permalink":"/posts/2022/%E5%AE%9E%E6%88%98%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%8A%B1%E4%BA%86-499-%E5%AD%A6%E5%88%B0%E7%9A%84%E5%86%99%E4%BD%9C%E6%96%B9%E6%B3%95%E9%97%AE%E9%A2%98-+-%E5%9B%9E%E7%AD%94/","summary":"大家好，我是桃翁，一个不止前端的前端工程师。\n前言 前几天在一个写作课里学习到一个写作技巧：文章 = 问题 + 答案。\n大概就是说当你看到一个话题，想写成文章的时候，可以想一想你针对这个话题会有哪些问题。然后挨个回答一下这个问题，把回答组合一下，就成为一篇文章了。\n我发现这个方法跟我有一些文章的方法很像，但是我并没有这样总结出来，而是在写的时候自然而然就这么去设计了。\n以这篇用 husky 和 lint-staged 构建代码检查工作流 文章举个例，做一个实战教学，建议看下面的内容的时候先阅读一下这篇文章。\n实战 一、提问题\n我要介绍的主题是：构建代码检查工作流。\n针对这个主题，我想到了几个问题：\n什么是代码检查？ 什么情况下需要用到代码检查？ 怎么做代码检查？ 怎么把代码检查做成工作流？ 注意：每个人想到的问题不一样，所以写的思路可能也不太一样。\n如果想不到什么问题，我这里给到的建议可以提 what、when、why、how 这样的问题，这也是一种写作方法，后面再讲。\n根据以上的思路就可以把大纲列出来。\n二、列大纲 其实一般可以直接把这些问题当做大纲。\n但是我这篇文章后面又考虑到怎么做代码检查东西比较多，只有在知道了最基础的代码检查方法之后，才可能推到出要用 husky 和 lint-staged 这样的工具。\n所以我最终还是以陈述的方式为大纲，一步一步的引导，最终把把代码检查做成工作流。\n所以最终这篇文章的目录大概是这样的。\n前言里面回答了什么是代码检查和什么情况下需要用到代码检查。\n在最简单的方法这个大纲里就是怎么做代码检查。\n最后的三个都是讲怎么把代码检查做成工作流。\n三、回答问题\n大纲做好了，就开始填内容了。\n前言就没什么好说的了，主要是介绍背景，然后引出我们怎么做代码检查。\n接下来就写了最简单的方法来做代码检查，再提出了两个问题。\n其实这两个问题就是来解决工作流的问题。\n下面的两个段落就是来解决这两个问题，看到没有，这又是问题 + 回答的模式，不仅大话题可以引发问题，还可以问题里套问题。\n标题：通过 scripts 来解决如果检测工具多，需要多次处理，解决问题 1.\n标题：通过 husky(哈士奇)来解决容易遗忘的问题，解决问题 2.\n所以整篇文章都是以问题驱动，一步一步引导读者把小问题解决了，最终串起来就把大问题解决了。\n总结 总结一下，这种问题 + 回答的写作方式有什么好处：\n**段落之间具有连贯性。**每个标题之前都是承上启下，都是来解决上面一个标题的问题，然后引出下面一个问题。 读者读起来很流畅，会产生恍然大悟的感觉。 最后在复盘一下这篇用 husky 和 lint-staged 构建代码检查工作流 我觉得不好的地方：\n标题不够小白，导致受众不够多，导致打开率低。 在前言里背景介绍得不够细致，如果以前没做过这方面的，可能体感不强。 ","title":"【实战】分享一个花了 499 学到的写作方法：问题 + 回答"},{"content":"前言 大家好，我是桃翁，今天给大家带来的是关于 git commit 那些事儿，希望大家喜欢。\n对于规范 git commit message 我是分成了两种类型去看待。\n对于通用库、开源项目这类多人维护，而且极大可能别人会来看这份代码的，一定要规范，特别是对于开源项目，往往会要列 Change Log，规范好 commit 节省自己整理 log 的时间，也方便了用户。\n对于业务代码，特别是那种一个人维护的，其实不搞问题也不大，因为极小可能会有人来看你的 commit message。但是我依然还是建议规范一下，不然一旦后面想去看就会花费很多的力气，毕竟规范一下也不麻烦。\n通过本篇文章你讲了解到三部分内容：\n了解 git commit 规范 学到用工具 Commitizen 来规范 commit 学到如何在 commit message 里加上好看的 emoji 规范 现在主流的 commit message 规范就是 Angular 团队所用的准则，继而衍生了 Conventional Commits specification. 很多工具也是基于此规范。\n每次提交，Commit message 都包括三个部分：header，body 和 footer，其中 header 有一个特殊的格式，包括了 type、scope、subject。\n\u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; 其中 header 是必选的，但是 header 里的 scope 是可选的，另外提交的 message 长度不要超过 100 个字符，太长了不易阅读。\n对于我个人来说，我觉得只要把 header 部分规范其实基本能满足绝大部分需要了，强制去规范 body 和 footer 对于团队的同学来说简直是折磨，所以我这里仅介绍 header 的几部分\ntype type 指明 git commit 的类别，应该使用以下类型\n『feat』: 新增功能 『fix』: 修复 bug 『docs』: 仅仅修改了文档，比如 README, CHANGELOG等等 『test』: 增加/修改测试用例，包括单元测试、集成测试等 『style』: 修改了空行、缩进格式、引用包排序等等（不改变代码逻辑） 『perf』: 优化相关内容，比如提升性能、体验、算法等 『refactor』: 代码重构，「没有新功能或者bug修复」 『chore』: 改变构建流程、或者增加依赖库、工具等 『revert』: 回滚到上一个版本 『merge』: 代码合并 这里面有些 angular 团队没有，自己可以自行增减\nscope（可选） scope用于说明 commit 影响的范围，根据不同项目有不同层次描述。若没有特殊规定，也可以描述影响的哪些功能等。\nsubject subject 是 commit 目的的简短描述，不超过50/80个字符，一般 git 提交的时候会有颜色提示。\n若英文用不惯，那么推荐使用中文 若是开源代码，一律推荐统一英文，英文不行可以翻译软件用起来 若是开源代码，可以再附加对应的issue地址 结尾不加标点符号 工具：Commitizen Commitizen是一个撰写合格 Commit message 的工具,（详细说明见 github 地址），用于代替 git commit 指令，而 cz-conventional-changelog 适配器提供 conventional-changelog 标准（约定式提交标准）。基于不同需求，也可以使用不同适配器。\n1. 全局安装 commitizen cz-conventional-changelog\nnpm install -g commitizen cz-conventional-changelog 2. git cz 取代 git commit\n安装完毕后，可直接使用 git cz 来取代 git commit。\n可以看到当你 cz 之后，下面有很多的 type 让你选择，这就省掉了每次你去想应该用哪种 type，非常方便。\n全局模式下，需要 ~/.czrc 配置文件, 为commitizen 指定 Adapter, 如果你不需要生成 Change Log 可以不用去处理。\n只要用了 Commitizen ，就很方便的就规范的大家的 message 。\n在 commit message 里用 emoji 在 git commit 上使用 emoji 提供了一种简单的方法，仅通过查看所使用的表情符号来确定提交的目的或意图, 得提交记录非常好理解，阅读体验非常棒。\n使用方法 git commit 时直接在注释中写入表情符号的代码部分即可完成表情 emoji 的提交。\n举个栗子：\n$ git commit -m \u0026#39;:tada: init commit\u0026#39; $ git commit -m \u0026#39;added image to repo :art:\u0026#39; 如果你用 Commitizen，可能不太好把 emoji 放在最前面，因为咱们操作的空间，就在 git cz 后第三次交互提示，也就是在输入 header 的 subject 的时候填入，如果是这样，可以选择把表情放到最后。\n效果展示： 如果你们团队是一个喜欢用 emoji 的团队，其实可以不用遵循上面的一节的规范，因为 emoji 已经可以表达出 header 的 type 的作用了，直接在 emoji 后面加描述即可。\nemoji 表情库 emoji emoji 代码 commit 说明 :tada: (庆祝) :tada: 初次提交 :new: (全新) :new: 引入新功能 :bookmark: (书签) :bookmark: 发行/版本标签 :bug: (bug) :bug: 修复 bug :ambulance: (急救车) :ambulance: 重要补丁 :globe_with_meridians: (地球) :globe_with_meridians: 国际化与本地化 :lipstick: (口红) :lipstick: 更新 UI 和样式文件 :clapper: (场记板) :clapper: 更新演示/示例 :rotating_light: (警车灯) :rotating_light: 移除 linter 警告 :wrench: (扳手) :wrench: 修改配置文件 :heavy_plus_sign: (加号) :heavy_plus_sign: 增加一个依赖 :heavy_minus_sign: (减号) :heavy_minus_sign: 减少一个依赖 :arrow_up: (上升箭头) :arrow_up: 升级依赖 :arrow_down: (下降箭头) :arrow_down: 降级依赖 :zap: (闪电):racehorse: (赛马) :zap::racehorse: 提升性能 :chart_with_upwards_trend: (上升趋势图) :chart_with_upwards_trend: 添加分析或跟踪代码 :rocket: (火箭) :rocket: 部署功能 :white_check_mark: (白色复选框) :white_check_mark: 增加测试 :memo: (备忘录):book: (书) :memo::book: 撰写文档 :hammer: (锤子) :hammer: 重大重构 :art: (调色板) :art: 改进代码结构/代码格式 :fire: (火焰) :fire: 移除代码或文件 :pencil2: (铅笔) :pencil2: 修复 typo :construction: (施工) :construction: 工作进行中 :wastebasket: (垃圾桶) :wastebasket: 废弃或删除 :wheelchair: (轮椅) :wheelchair: 可访问性 :construction_worker: (工人) :construction_worker: 添加 CI 构建系统 :green_heart: (绿心) :green_heart: 修复 CI 构建问题 :lock: (锁) :lock: 修复安全问题 :whale: (鲸鱼) :whale: Docker 相关工作 :apple: (苹果) :apple: 修复 macOS 下的问题 :penguin: (企鹅) :penguin: 修复 Linux 下的问题 :checkered_flag: (旗帜) :checkered_flag: 修复 Windows 下的问题 :twisted_rightwards_arrows: (交叉箭头) :twisted_rightwards_arrows: 分支合并 如何在命令行中显示 emoji 默认情况下，在命令行中并不会显示出 emoji, 仅显示 emoji 代码。不过可以使用 emojify 使得在命令行也可显示 emoji, 它是一个 shell 脚本，安装与使用都很简单，在这里 查看更详细的如何安装与使用。\n安装 emojify $ sudo sh -c \u0026#34;curl https://raw.githubusercontent.com/mrowa44/emojify/master/emojify -o /usr/local/bin/emojify \u0026amp;\u0026amp; chmod +x /usr/local/bin/emojify\u0026#34; 使用 emojify $ emojify \u0026#34;Hey, I just :raising_hand: you, and this is :scream: , but here\u0026#39;s my :calling: , so :telephone_receiver: me, maybe?\u0026#34; 显示效果： 在使用 git bash 的时候，设置替换日志中的表情符号代码\n$ git log --oneline --color | emojify | less -r 或者设置git log命令别名\n$ alias gitlog=\u0026#39;git log --oneline --color | emojify | less -r\u0026#39; $ gitlog 效果如下： 是不是很好玩，快去试试吧！\n参考资料 git-emoji-guide git commit 时使用 Emoji ? ","permalink":"/posts/%E6%8A%80%E6%9C%AF/2021-09-05-git-commit%E8%A7%84%E8%8C%83/","summary":"前言 大家好，我是桃翁，今天给大家带来的是关于 git commit 那些事儿，希望大家喜欢。\n对于规范 git commit message 我是分成了两种类型去看待。\n对于通用库、开源项目这类多人维护，而且极大可能别人会来看这份代码的，一定要规范，特别是对于开源项目，往往会要列 Change Log，规范好 commit 节省自己整理 log 的时间，也方便了用户。\n对于业务代码，特别是那种一个人维护的，其实不搞问题也不大，因为极小可能会有人来看你的 commit message。但是我依然还是建议规范一下，不然一旦后面想去看就会花费很多的力气，毕竟规范一下也不麻烦。\n通过本篇文章你讲了解到三部分内容：\n了解 git commit 规范 学到用工具 Commitizen 来规范 commit 学到如何在 commit message 里加上好看的 emoji 规范 现在主流的 commit message 规范就是 Angular 团队所用的准则，继而衍生了 Conventional Commits specification. 很多工具也是基于此规范。\n每次提交，Commit message 都包括三个部分：header，body 和 footer，其中 header 有一个特殊的格式，包括了 type、scope、subject。\n\u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; 其中 header 是必选的，但是 header 里的 scope 是可选的，另外提交的 message 长度不要超过 100 个字符，太长了不易阅读。","title":"git commit 规范和 如何在 commit 里使用 emoji"},{"content":"img img 是 HTML4 时就有的标签， 至今仍然是在网页中嵌入图片的最常用的方式。 与 \u0026lt;span\u0026gt;, \u0026lt;em\u0026gt; 等标签一样属于行内标签 （准确地说属于 Phrasing Content）。下面是一个示例：\n\u0026lt;img src=\u0026#34;favicon72.png\u0026#34; alt=\u0026#34;MDN logo\u0026#34; srcset=\u0026#34;favicon144.png 2x\u0026#34;\u0026gt; img 其实也可以控制在高清屏幕采用哪个图片，适合用在移动端\npicture \u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;/media/cc0-images/surfer-240-200.jpg\u0026#34; media=\u0026#34;(min-width: 800px)\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/media/cc0-images/painted-hand-298-332.jpg\u0026#34; alt=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; 要决定加载哪个URL，user agent 检查每个 \u0026lt;source\u0026gt; 的 srcset、media 和 type 属性，来选择最匹配页面当前布局、显示设备特征等的兼容图像。\npicture 就可以方便的控制在某种媒体类型，加载哪个图片。感觉比较适合做响应式用。\n相比 img 标签，picture 提供了更丰富的响应式资源选择方式；\npicture 是 HTML5 中定义新标签， 其中可以定义若干个 \u0026lt;source\u0026gt;，浏览器会匹配 \u0026lt;source\u0026gt; 的 type, media, srcset 等属性， 来找到最适合当前布局、视口宽度、设备像素密度 的一个去下载。 为了向下兼容不识别 \u0026lt;picture\u0026gt; 和 \u0026lt;source\u0026gt; 的浏览器，\u0026lt;picture\u0026gt; 中还可以写一个 \u0026lt;img\u0026gt; 作为 fallback。\n\u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;harttle-land-avatar.png\u0026#34; media=\u0026#34;(min-width: 750px)\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;harttle-land-banner.png\u0026#34; alt=\u0026#34;a banner for harttle.land\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; 图片如何做响应式 响应式：基于视口宽度 响应式设计 是一种 Web 页面设计方式， 使得不同 视口宽度 和 设备像素密度 下内容都可以很好地展示，都可以保证可用性和用户满足。\n提到响应式多数开发者都会想到 CSS 媒体查询，但 HTML5 中还定义了元素属性的媒体查询。 这使得可以通过媒体查询来根据元素渲染宽度 选择资源 和 图片占位：\n\u0026lt;img src=\u0026#34;avatar.png\u0026#34; srcset=\u0026#34;avatar-200.png 200w, avatar-400.png 400w\u0026#34; sizes=\u0026#34;(max-width: 600px) 200px, 50vw\u0026#34;\u0026gt; 浏览器会根据 sizes 的媒体查询来决定渲染大小；此后根据实际的渲染大小来决定选择哪个资源。 比如屏幕宽度为 500px，那么就会调整图片大小为 200px， 然后选择 srcset 中最匹配这个大小的 avatar-200.png 去下载。\n响应式：基于设备像素比 支持 HTML5 的浏览器中还可以基于 设备像素比 来选择资源。 在刚出现 Retina 屏幕时有些网页图片展现模糊， 就是因为在高像素密度（比如 2 倍设备像素比）的屏幕上仍然显示 1 倍大小的图片。 \u0026lt;img\u0026gt; 元素的 src 和 srcset 属性都支持 x 描述符来提供不同大小的图片。\n\u0026lt;img src=\u0026#34;avatar-1.0.png\u0026#34; srcset=\u0026#34;avatar-1.5.png 1.5x, avatar-2.0.png 2x\u0026#34;\u0026gt; 用户代理可以根据用户屏幕像素密度、缩放级别，甚至用户的网络条件选择任何一个给出的资源。 这里同时给出 src 也是为了向后兼容。\n响应式：基于媒体查询 上文提到在 \u0026lt;img\u0026gt; 元素的 sizes 中可以写媒体查询来计算宽高。 \u0026lt;picture\u0026gt; 中也可以通过媒体查询来选择 \u0026lt;source\u0026gt; 可以给不同的设备大小下载不同的图片。 区别在于 基于视口宽度 的资源选择侧重于对不同大小的屏幕选择宽度适合的，同样内容的图片。 基于媒体查询 的资源选择侧重于对不同的屏幕选择不同内容的图片。\n比如在移动设备上只显示头像，在大屏幕显示器上则显示完整的大图。\n\u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;avatar.png\u0026#34; media=\u0026#34;(max-width: 640px)\u0026#34;\u0026gt; \u0026lt;source srcset=\u0026#34;avatar-with-background.png\u0026#34; media=\u0026#34;(min-width: 640px)\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;avatar.png\u0026#34; alt=\u0026#34;smiling harttle\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; 基于媒体查询的选择在 HTML5 标准中称为 Art Direction。\n响应式：基于图片格式 \u0026lt;source\u0026gt; 元素的 type 属性可以指定图片格式，浏览器可以选择自己支持的去下载。 基于图片格式的选择可以用于性能优化，有些格式我们知道压缩比非常好但并非所有浏览器都支持。 这时就可以提供多种格式的图片让浏览器来选择。\n\u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;avatar.webp\u0026#34; type=\u0026#34;image/webp\u0026#34;\u0026gt; \u0026lt;source srcset=\u0026#34;avatar.jxr\u0026#34; type=\u0026#34;image/vnd.ms-photo\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;avatar.jpg\u0026#34; alt=\u0026#34;\u0026#34; width=\u0026#34;100\u0026#34; height=\u0026#34;150\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; 在这个例子中，如果用户代理支持 WebP 就会选择第一个 \u0026lt;source\u0026gt; 元素。 如果不支持 WebP，但支持 JPEG XR 就会选择第二个 source 元素。 如果这两种都不支持，就会选择 img 元素。（这个例子来自 HTML Standard）\n参考 正确使用 HTML5 标签：img, picture, figure 的响应式设计 ","permalink":"/posts/%E6%8A%80%E6%9C%AF/img-he-picture-de-qu-bie-he-shi-yong-chang-jing/","summary":"img img 是 HTML4 时就有的标签， 至今仍然是在网页中嵌入图片的最常用的方式。 与 \u0026lt;span\u0026gt;, \u0026lt;em\u0026gt; 等标签一样属于行内标签 （准确地说属于 Phrasing Content）。下面是一个示例：\n\u0026lt;img src=\u0026#34;favicon72.png\u0026#34; alt=\u0026#34;MDN logo\u0026#34; srcset=\u0026#34;favicon144.png 2x\u0026#34;\u0026gt; img 其实也可以控制在高清屏幕采用哪个图片，适合用在移动端\npicture \u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;/media/cc0-images/surfer-240-200.jpg\u0026#34; media=\u0026#34;(min-width: 800px)\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/media/cc0-images/painted-hand-298-332.jpg\u0026#34; alt=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; 要决定加载哪个URL，user agent 检查每个 \u0026lt;source\u0026gt; 的 srcset、media 和 type 属性，来选择最匹配页面当前布局、显示设备特征等的兼容图像。\npicture 就可以方便的控制在某种媒体类型，加载哪个图片。感觉比较适合做响应式用。\n相比 img 标签，picture 提供了更丰富的响应式资源选择方式；\npicture 是 HTML5 中定义新标签， 其中可以定义若干个 \u0026lt;source\u0026gt;，浏览器会匹配 \u0026lt;source\u0026gt; 的 type, media, srcset 等属性， 来找到最适合当前布局、视口宽度、设备像素密度 的一个去下载。 为了向下兼容不识别 \u0026lt;picture\u0026gt; 和 \u0026lt;source\u0026gt; 的浏览器，\u0026lt;picture\u0026gt; 中还可以写一个 \u0026lt;img\u0026gt; 作为 fallback。","title":"img 和 picture 的区别和使用场景"},{"content":"前阵子我们组大量招人，看到一些候选人拿了好几个 offer 摇摆不定，一直在纠结；也有不少读者私下跟我询问怎么选择；另外就是知乎上，我回答了一个 蚂蚁和字节怎么选的问题，阅读量比较高，所以也经常有人问我这个问题。\n所以想写篇文章来聊一聊这个问题。\n最多的就是字节和阿里怎么选 ♀️\n我去年换工作的时候也拿了好几个 offer (蚂蚁、字节、滴滴、拼多多、酷家乐)，当时也有过一阵子的纠结，觉得这个公司这里好，那个公司那里好，现在回想起来有点幼稚。\n关于我 我之前呆的公司是蘑菇街，一家比较年轻的公司，压力不大，每天基本认认真真敲个四个小时左右代码就可以完成工作，每天晚上大概 7 8 点下班。\n在蘑菇街主要是做平台服务，主要是负责一些运营的后台系统，所以不存在着倒排需求，基本上都是正排，在完成自己的工作以后，就有大量的时间去学习一些新知识。\n但是由于业务比较简单，所以很多新知识无法真正用到项目里，感觉自己的上限有所限制，所以一直有一个想去大公司，可以有更多可能的公司。\n具体原因见： 离开蘑菇街后，我最近的一些想法\n我是怎么选的 以下内容来自于我在知乎的回答：蚂蚁金服 VS 字节跳动的 Offer 怎么选择? - 桃翁的回答 - 知乎 https://www.zhihu.com/question/394340089/answer/1251264179\n我之前也有过这样的迷惑，也是最近吧，由于公司裁人，逼得我不得不去面试，面过了五家不差的公司(蚂蚁、字节、拼多多、滴滴、酷家乐) ，除了拼多多都是杭州的，因为我目前是在杭州的，所以杭州岗位比较多。\n当时在选 offer 的时候令我比较纠结的也是字节和蚂蚁，最后选择了蚂蚁，说一下我的选择逻辑吧，希望能给你一些参考。\n1 . 薪资方面。阿里在 P7 以前的薪资是没办法和字节比的，理论上字节待遇会比蚂蚁好，我也是，但是很多人在字节入职即巅峰，涨薪比较少，我了解过，字节绩效好或者晋升才有涨薪，如果绩效仅仅是达到期望基本不会涨薪，但是阿里会有普调，所以如果干几年薪资应该会差不多。另外薪资方面就是年终奖的问题，据我了解阿里的激励会比字节激励的比较多，对于 3.75 加 高潜的同学年终奖将异常的高，而且还会有股票和期权。\nbase 上字节是好于蚂蚁，年终奖蚂蚁好于字节，总体薪资我觉得字节还是会优于蚂蚁的，毕竟字节还有加班费和房补。\n背书方面。蚂蚁背靠阿里这座大山，我征询过我身边值得相信的一些大佬，大部分人还是觉得蚂蚁的背书是要大于字节的，就是觉得蚂蚁比字节难进，以后从蚂蚁出来和字节出来，蚂蚁更有优势一点。\n团队方面。蚂蚁杭州总部，字节是分部。当时我在的团队 leader 是在北京的，我是觉得老板毕竟在北京，虽然每个月会来分部带两天，但是总归还是没有老板在身边这么了解自己，所以在绩效方面我觉得蚂蚁是有优势的。另外我在蚂蚁的老板是我上一家公司的老板，比较熟悉，也给蚂蚁加了不少分。\n加班程度。蚂蚁很累，累的程度不必字节的大小周差。\n我的回答可能倾向于蚂蚁一点，因为我的最终选择是选择了蚂蚁，所以会觉得蚂蚁更好，因为我工作年限也不到 2 年，所以更看重成长和背书，我觉得在蚂蚁带来的成长会比字节多。如果仅仅看重薪资的话可能直接选 拼多多 了。\n如何选择 我们往往活在对未知的恐惧，害怕对未来预测的偏差，所以才不知道如何选择。我们往往什么都想要，或者说什么都不舍得放弃，所以才不知道如何选择。其实，只要我们清楚自己最想要的是什么，做减法就可以了。必须做减法，才能做选择。\n可以这么去做：\n行业、公司、团队、文化、城市、老板、工作内容、工作强度\u0026hellip;把你想得到的维度都列下来 然后就开始划除，一个个划掉。 最后剩下的那一到三个就是你真心不能放弃的，看看哪个机会最符合或接近符合，就是哪个。 每个人的境况不同，能做出的选择自然不同。所以，不要轻易地去为别人做决定，随意地去评价别人的决定。毕竟，你不傻，别人也不傻。\n无论今年几岁，我们都要尽量做出属于自己的选择，即使这个选择不完全是自己的真心，但真心一定要有。\n一些忠告 自己想要什么最重要。 刚开始工作 base 差个两三 k 不重要。 工作不久的成长很重要。 不要完全听别人的，包括你心中的大佬，别人的意见只能当做参考，不能作为答案。 选了就不要后悔，因为说不定其他选择也跟你想象的不一样。 如果能有多个选择，证明你在这个行业还是比较优秀的，但是也不要骄傲，当你到了跟你一样的公司去的时候，你会发现周边比你优秀的人不要太多。 最后希望每个人都能拿到满意的 offer，选择自己最想去的公司。\n参考 Offer 怎么选？这绝对是个问题。 ","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/337/","summary":"前阵子我们组大量招人，看到一些候选人拿了好几个 offer 摇摆不定，一直在纠结；也有不少读者私下跟我询问怎么选择；另外就是知乎上，我回答了一个 蚂蚁和字节怎么选的问题，阅读量比较高，所以也经常有人问我这个问题。\n所以想写篇文章来聊一聊这个问题。\n最多的就是字节和阿里怎么选 ♀️\n我去年换工作的时候也拿了好几个 offer (蚂蚁、字节、滴滴、拼多多、酷家乐)，当时也有过一阵子的纠结，觉得这个公司这里好，那个公司那里好，现在回想起来有点幼稚。\n关于我 我之前呆的公司是蘑菇街，一家比较年轻的公司，压力不大，每天基本认认真真敲个四个小时左右代码就可以完成工作，每天晚上大概 7 8 点下班。\n在蘑菇街主要是做平台服务，主要是负责一些运营的后台系统，所以不存在着倒排需求，基本上都是正排，在完成自己的工作以后，就有大量的时间去学习一些新知识。\n但是由于业务比较简单，所以很多新知识无法真正用到项目里，感觉自己的上限有所限制，所以一直有一个想去大公司，可以有更多可能的公司。\n具体原因见： 离开蘑菇街后，我最近的一些想法\n我是怎么选的 以下内容来自于我在知乎的回答：蚂蚁金服 VS 字节跳动的 Offer 怎么选择? - 桃翁的回答 - 知乎 https://www.zhihu.com/question/394340089/answer/1251264179\n我之前也有过这样的迷惑，也是最近吧，由于公司裁人，逼得我不得不去面试，面过了五家不差的公司(蚂蚁、字节、拼多多、滴滴、酷家乐) ，除了拼多多都是杭州的，因为我目前是在杭州的，所以杭州岗位比较多。\n当时在选 offer 的时候令我比较纠结的也是字节和蚂蚁，最后选择了蚂蚁，说一下我的选择逻辑吧，希望能给你一些参考。\n1 . 薪资方面。阿里在 P7 以前的薪资是没办法和字节比的，理论上字节待遇会比蚂蚁好，我也是，但是很多人在字节入职即巅峰，涨薪比较少，我了解过，字节绩效好或者晋升才有涨薪，如果绩效仅仅是达到期望基本不会涨薪，但是阿里会有普调，所以如果干几年薪资应该会差不多。另外薪资方面就是年终奖的问题，据我了解阿里的激励会比字节激励的比较多，对于 3.75 加 高潜的同学年终奖将异常的高，而且还会有股票和期权。\nbase 上字节是好于蚂蚁，年终奖蚂蚁好于字节，总体薪资我觉得字节还是会优于蚂蚁的，毕竟字节还有加班费和房补。\n背书方面。蚂蚁背靠阿里这座大山，我征询过我身边值得相信的一些大佬，大部分人还是觉得蚂蚁的背书是要大于字节的，就是觉得蚂蚁比字节难进，以后从蚂蚁出来和字节出来，蚂蚁更有优势一点。\n团队方面。蚂蚁杭州总部，字节是分部。当时我在的团队 leader 是在北京的，我是觉得老板毕竟在北京，虽然每个月会来分部带两天，但是总归还是没有老板在身边这么了解自己，所以在绩效方面我觉得蚂蚁是有优势的。另外我在蚂蚁的老板是我上一家公司的老板，比较熟悉，也给蚂蚁加了不少分。\n加班程度。蚂蚁很累，累的程度不必字节的大小周差。\n我的回答可能倾向于蚂蚁一点，因为我的最终选择是选择了蚂蚁，所以会觉得蚂蚁更好，因为我工作年限也不到 2 年，所以更看重成长和背书，我觉得在蚂蚁带来的成长会比字节多。如果仅仅看重薪资的话可能直接选 拼多多 了。\n如何选择 我们往往活在对未知的恐惧，害怕对未来预测的偏差，所以才不知道如何选择。我们往往什么都想要，或者说什么都不舍得放弃，所以才不知道如何选择。其实，只要我们清楚自己最想要的是什么，做减法就可以了。必须做减法，才能做选择。\n可以这么去做：\n行业、公司、团队、文化、城市、老板、工作内容、工作强度\u0026hellip;把你想得到的维度都列下来 然后就开始划除，一个个划掉。 最后剩下的那一到三个就是你真心不能放弃的，看看哪个机会最符合或接近符合，就是哪个。 每个人的境况不同，能做出的选择自然不同。所以，不要轻易地去为别人做决定，随意地去评价别人的决定。毕竟，你不傻，别人也不傻。\n无论今年几岁，我们都要尽量做出属于自己的选择，即使这个选择不完全是自己的真心，但真心一定要有。\n一些忠告 自己想要什么最重要。 刚开始工作 base 差个两三 k 不重要。 工作不久的成长很重要。 不要完全听别人的，包括你心中的大佬，别人的意见只能当做参考，不能作为答案。 选了就不要后悔，因为说不定其他选择也跟你想象的不一样。 如果能有多个选择，证明你在这个行业还是比较优秀的，但是也不要骄傲，当你到了跟你一样的公司去的时候，你会发现周边比你优秀的人不要太多。 最后希望每个人都能拿到满意的 offer，选择自己最想去的公司。","title":"聊聊关于如何选择offer"},{"content":"SOLID 是一套原则。它们主要是关心代码质量和可维护性的软件专业人员的指导方针。\nReact 不是面向对象，但这些原则背后的主要思想可能是有帮助的。在本文中，我将尝试演示如何应用这些原则来编写更好的代码。\n在前一篇文章中，我们讨论了单一责任原则。今天，我们将讨论 SOLID 的第二个原则: 开闭原则。\n本系列其他文章 如何应用 SOLID 原则在 React 中整理代码之单一原则 什么是开闭原则？ Robert c. Martin 认为这个原则是面向对象设计最重要的原则。但他不是第一个定义这个概念的人。Bertrand Meyer 于1988年在他的《面向对象软件构造》一书中写到了这一点。他解释了开放/封闭原则:\n软件实体(类、模块、功能等)应该对扩展开放，但对修改关闭。\n这个原则告诉您以这样一种方式来编写代码，即您能够在不更改现有代码的情况下添加其他功能。\n让我们看看我们在哪里可以应用这个原则。\n让我们从一个例子开始 假设我们有一个 User 组件，其中我们传递用户的详细信息，这个类的主要目的是显示该特定用户的详细信息。\n这是一个很简单的开始。但是我们的生活并不是那么简单。几天后，我们的经理告诉我们系统中有三种类型的用户: SuperAdmin、 Admin 等等。\n它们每个都有不同的信息和功能。\n一个糟糕的解决方案 第一个也是显而易见的解决方案：在组件中包含一个条件，并根据不同的用户类型呈现不同的信息。\nimport React from \u0026#39;react\u0026#39;; export const User = ({user}) =\u0026gt; { return \u0026lt;\u0026gt; \u0026lt;div\u0026gt; Name: {user.name}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; Email: {user.email}\u0026lt;/div\u0026gt; { user.type === \u0026#39;SUPER_ADMIN\u0026#39; \u0026amp;\u0026amp; \u0026lt;div\u0026gt; Details about super admin\u0026lt;/div\u0026gt; } { user.type === \u0026#39;ADMIN\u0026#39; \u0026amp;\u0026amp; \u0026lt;div\u0026gt; Details about admin\u0026lt;/div\u0026gt; } \u0026lt;/\u0026gt; } 你知道这里出了什么问题吗？\n首先，我们的代码现在是凌乱的。\n其次，如果我们需要其他类型的用户怎么办？\n然后，我们需要进入 User.js，为特定类型的用户添加另一个条件。\n这明显违反了开闭原则，因为我们不允许更改 User 组件内部的代码。\n解决方案是什么？ 在这个场景中我们可以应用两种主要的技术:\n高阶组件(HOC) 组件组合(Component composition) 在可能的情况下，最好采用第二种方法，但是在某些情况下，有必要使用 HOC。\n现在，我们将使用 Facebook 推荐的一种技术，称为组件组合。\n让我们创建单独的用户组件 现在，我们需要以这样一种方式设计代码，即不需要在 User.js 组件中添加条件。让我们为 SuperAdmin 创建一个单独的组件:\nimport React from \u0026#39;react\u0026#39;; import {User} from \u0026#34;./User\u0026#34;; export const SuperAdmin = ({user}) =\u0026gt; { return \u0026lt;\u0026gt; \u0026lt;User user={user} /\u0026gt; \u0026lt;div\u0026gt; This is super admin user details\u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; } 类似地，另一个是针对 Admin 用户的:\nimport React from \u0026#39;react\u0026#39;; import {User} from \u0026#34;./User\u0026#34;; export const Admin = ({user}) =\u0026gt; { return \u0026lt;\u0026gt; \u0026lt;User user={user} /\u0026gt; \u0026lt;div\u0026gt; This is admin user details\u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; } 现在我们的 App.js 文件变成了:\nimport React from \u0026#39;react\u0026#39;; import Admin from \u0026#39;./Admin\u0026#39; import SuperAdmin from \u0026#39;./SuperAdmin\u0026#39; export default function App = () =\u0026gt;{ const user = {} const userByTypes = { \u0026#39;admin\u0026#39; : \u0026lt;Admin /\u0026gt; , \u0026#39;superadmin\u0026#39; : \u0026lt;SuperAdmin /\u0026gt; } return \u0026lt;div\u0026gt; {userByTypes[`${user.type}`]} \u0026lt;div/\u0026gt; } 现在我们可以根据需要创建尽可能多的用户类型。我们针对特定用户的逻辑是封装的，因此我们不需要为了任何额外的修改而重新检查代码。\n有些人可能会说，我们正在不必要地增加文件数量。当然，您可以暂时保持原样，但是随着应用程序的复杂性增加，您肯定会感到痛苦。\n注意 SOLID 是一套原则。它们并不是强制性的，您必须应用于每个场景。作为一个经验丰富的开发人员，您应该在代码长度和可读性之间找到一个很好的平衡。\n要过分执着于这些原则。事实上，有一句名言可以解释这些情况:\nToo Much SOLID\n所以知道这些原则是好的，但是你必须保持平衡。对于一个或两个额外的字段，您可能不需要这些组合，但是将它们分开肯定会有长远的帮助。\n总结 了解这些原则会让你走很长的路，因为在一天结束的时候，一段好的代码才是最重要的，而且没有单一的方法来做事情。\n本文为译文，原文链接：https://betterprogramming.pub/applying-the-open-closed-principle-to-write-clean-react-components-4e4514963e40\n","permalink":"/posts/%E8%AF%91%E6%96%87/336/","summary":"SOLID 是一套原则。它们主要是关心代码质量和可维护性的软件专业人员的指导方针。\nReact 不是面向对象，但这些原则背后的主要思想可能是有帮助的。在本文中，我将尝试演示如何应用这些原则来编写更好的代码。\n在前一篇文章中，我们讨论了单一责任原则。今天，我们将讨论 SOLID 的第二个原则: 开闭原则。\n本系列其他文章 如何应用 SOLID 原则在 React 中整理代码之单一原则 什么是开闭原则？ Robert c. Martin 认为这个原则是面向对象设计最重要的原则。但他不是第一个定义这个概念的人。Bertrand Meyer 于1988年在他的《面向对象软件构造》一书中写到了这一点。他解释了开放/封闭原则:\n软件实体(类、模块、功能等)应该对扩展开放，但对修改关闭。\n这个原则告诉您以这样一种方式来编写代码，即您能够在不更改现有代码的情况下添加其他功能。\n让我们看看我们在哪里可以应用这个原则。\n让我们从一个例子开始 假设我们有一个 User 组件，其中我们传递用户的详细信息，这个类的主要目的是显示该特定用户的详细信息。\n这是一个很简单的开始。但是我们的生活并不是那么简单。几天后，我们的经理告诉我们系统中有三种类型的用户: SuperAdmin、 Admin 等等。\n它们每个都有不同的信息和功能。\n一个糟糕的解决方案 第一个也是显而易见的解决方案：在组件中包含一个条件，并根据不同的用户类型呈现不同的信息。\nimport React from \u0026#39;react\u0026#39;; export const User = ({user}) =\u0026gt; { return \u0026lt;\u0026gt; \u0026lt;div\u0026gt; Name: {user.name}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; Email: {user.email}\u0026lt;/div\u0026gt; { user.type === \u0026#39;SUPER_ADMIN\u0026#39; \u0026amp;\u0026amp; \u0026lt;div\u0026gt; Details about super admin\u0026lt;/div\u0026gt; } { user.type === \u0026#39;ADMIN\u0026#39; \u0026amp;\u0026amp; \u0026lt;div\u0026gt; Details about admin\u0026lt;/div\u0026gt; } \u0026lt;/\u0026gt; } 你知道这里出了什么问题吗？","title":"如何应用 SOLID 原则在 React 中整理代码之开闭原则"},{"content":"关于开发是否应该深入了解业务，听到两种我觉得不正确的类型：\n「我是开发，我就做好开发就行了，业务交给产品和运营同学」。不懂业务，完全不想了解型。 「懂业务之后就可以跟产品 PK 了，方便砍需求」。懂业务，目的不正确型。 我的观点是要想当一个优秀的开发者，必须懂业务，不是为了跟产品 PK，而是为了预判未来的发展方向，好指导自己写的代码可以适应未来更久的时间。\n懂业务，目的不正确型。 作为一个开发，不知道多少人经常会在耳边听到这么一句话：多了解业务，多了解业务。\n但是大部分情况下并没有告诉你为啥要了解业务。\n可能有些人心里会有这么一个答案：懂了业务可以在需求评审的时候可以跟产品 PK，指出他的需求不合理，然后给出一个合理的方案，这就是你对于业务的价值，然后就可以体现你的业务思考了；另外对于你觉得不合理的需求，还可以砍掉。\n这是我听到最多的关于为什么开发要懂业务的观点了，我以前也是这么认为的，但是当我真正的作为一个业务 owner 之后，逼得我不得不去了解业务，我才觉得这个观点不完全对，方向都是错的。\n上面观点的核心目标就是跟产品 PK，把产品作为开发的敌人去看待。现在网上很多这样的调侃，产品和程序员是对立的。\n在产品的眼里，程序员天生就是爱砍需求。\n而在程序员的眼里，会因为不会砍需求被老板教育，不要啥需求都接，要学会砍需求。\n实际上，懂业务不是为了去指导产品设计，而是为了预判未来的发展方向好指导自己写的代码可以适应未来更久的时间。\n懂了业务之后是去发现前端的“价值点”，不是为了跟产品 PK。。。。\n你如果去指导产品做产品，反过来想想如果让产品指导你做开发，那能靠谱吗?\n我很赞同玉伯说的专业度的问题，作为开发就是要在开发的专业度上表现出来，效率让产品业务都觉得不可思议。而不是让你的产品、业务能力表现出来让他们觉得不可思议(不是不行，但是这样很难，先把自己专业的搞好再说)。\n不懂业务，完全不想了解型。 另外还有一些是基本不怎么了解业务，就喜欢专研技术，这种想法基本是工作年限不超过三年的同学。刚毕业，对业务没有什么感知，觉得做技术的技术才是王道，整天喜欢研究各种新技术，处于一种被动接需求的状态。\n这种情况就很容易在晋升的时候无法说清楚业务价值，到底自己做的东西有什么用，给公司带来了什么价值，因为在做需求的时候本来没有去思考过业务价值，所以没办法形成闭环，仅仅只是零散的需求。\n实际上，我们应该这样做，在业务的背景之下，我们可以主动的**发现问题、定义问题、解决问题、优化效果，拿到结果。**这才是创作个人业绩的正确路线。\n如果不懂业务，怎么将技术放到业务里去？不放到业务里去怎么体现技术的价值？\n你不能光讲我做了一个什么东西，这个东西多么多么好，这个业务价值如果没有体现出来，那就是没用的。\n总结 上面分析了两种思维模式的差别，以及我觉得正确的思考方向。\n作为一个在业务团队的开发者，我们做一件事的时候，需要时刻提醒自己，要想清楚三个问题：\n弄清楚，为什么做这件事？做这件事的价值是什么？ 去思考，如何做这件事？ 完成后的产出是什么？明确衡量标准。 你们觉得作为一个业务团队的开发，业务和技术的关系应该是什么样的呢？\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/li-qing-ye-wu-tuan-dui-kai-fa-he-ye-wu-de-guan-xi/","summary":"关于开发是否应该深入了解业务，听到两种我觉得不正确的类型：\n「我是开发，我就做好开发就行了，业务交给产品和运营同学」。不懂业务，完全不想了解型。 「懂业务之后就可以跟产品 PK 了，方便砍需求」。懂业务，目的不正确型。 我的观点是要想当一个优秀的开发者，必须懂业务，不是为了跟产品 PK，而是为了预判未来的发展方向，好指导自己写的代码可以适应未来更久的时间。\n懂业务，目的不正确型。 作为一个开发，不知道多少人经常会在耳边听到这么一句话：多了解业务，多了解业务。\n但是大部分情况下并没有告诉你为啥要了解业务。\n可能有些人心里会有这么一个答案：懂了业务可以在需求评审的时候可以跟产品 PK，指出他的需求不合理，然后给出一个合理的方案，这就是你对于业务的价值，然后就可以体现你的业务思考了；另外对于你觉得不合理的需求，还可以砍掉。\n这是我听到最多的关于为什么开发要懂业务的观点了，我以前也是这么认为的，但是当我真正的作为一个业务 owner 之后，逼得我不得不去了解业务，我才觉得这个观点不完全对，方向都是错的。\n上面观点的核心目标就是跟产品 PK，把产品作为开发的敌人去看待。现在网上很多这样的调侃，产品和程序员是对立的。\n在产品的眼里，程序员天生就是爱砍需求。\n而在程序员的眼里，会因为不会砍需求被老板教育，不要啥需求都接，要学会砍需求。\n实际上，懂业务不是为了去指导产品设计，而是为了预判未来的发展方向好指导自己写的代码可以适应未来更久的时间。\n懂了业务之后是去发现前端的“价值点”，不是为了跟产品 PK。。。。\n你如果去指导产品做产品，反过来想想如果让产品指导你做开发，那能靠谱吗?\n我很赞同玉伯说的专业度的问题，作为开发就是要在开发的专业度上表现出来，效率让产品业务都觉得不可思议。而不是让你的产品、业务能力表现出来让他们觉得不可思议(不是不行，但是这样很难，先把自己专业的搞好再说)。\n不懂业务，完全不想了解型。 另外还有一些是基本不怎么了解业务，就喜欢专研技术，这种想法基本是工作年限不超过三年的同学。刚毕业，对业务没有什么感知，觉得做技术的技术才是王道，整天喜欢研究各种新技术，处于一种被动接需求的状态。\n这种情况就很容易在晋升的时候无法说清楚业务价值，到底自己做的东西有什么用，给公司带来了什么价值，因为在做需求的时候本来没有去思考过业务价值，所以没办法形成闭环，仅仅只是零散的需求。\n实际上，我们应该这样做，在业务的背景之下，我们可以主动的**发现问题、定义问题、解决问题、优化效果，拿到结果。**这才是创作个人业绩的正确路线。\n如果不懂业务，怎么将技术放到业务里去？不放到业务里去怎么体现技术的价值？\n你不能光讲我做了一个什么东西，这个东西多么多么好，这个业务价值如果没有体现出来，那就是没用的。\n总结 上面分析了两种思维模式的差别，以及我觉得正确的思考方向。\n作为一个在业务团队的开发者，我们做一件事的时候，需要时刻提醒自己，要想清楚三个问题：\n弄清楚，为什么做这件事？做这件事的价值是什么？ 去思考，如何做这件事？ 完成后的产出是什么？明确衡量标准。 你们觉得作为一个业务团队的开发，业务和技术的关系应该是什么样的呢？","title":"理清业务团队开发和业务的关系"},{"content":"大家好，我是桃翁！ 之前有小伙伴留言让我聊聊「希望聊一些在大厂工作是什么体验，想听如何融入，如何适应，如何成长的规划，遇到过的哪些比较棘手的问题和怎么处理的，期待」。\n他这里这么多问题，我准备每个问题都写一篇文章来聊，首先咱们要聊的就是「大厂的工作体验」。\n身边牛人多 可能很多想去大厂的同学，第一驱动力觉得大厂肯定很多大佬，然后进去了可以带带自己。\n其实这句话不全对，也别抱太大希望，进来了可能跟你的想法是不一样的。 我的体感是：前半句是对的，大厂里确实很多牛人，但是不会带你的，或者说不是你想象中那么带。\n在阿里这边一个新同学刚进来的时候，会在组内分配一个师兄，来协助你顺利度过试用期。但是不是那种事无巨细的关注你的那种，大部分时间师兄每天也很忙，一个新人来了还要帮你解决问题，所以师兄就会更忙了，所以师兄主要是帮你解答一些问题。\n再说说身边其他的牛人，牛可以很多方面的：\n比如 学校牛，在杭州这边浙大的比较多，我们组才 12 个人就有三个浙大的，还有在国外上大学的。\n网红，可以接触到很多之前只能在知乎、或者一些大会里才能看到或者听说的一些大牛，来了之后就可以见到，甚至面对面交流，每次交流都会受益匪浅，比如我在蚂蚁体验技术部就可以接触到玉伯、偏右这种超级前端网红。\n技术牛， 不管是 P5、P6、P7 哪个层级的，你都会发现每个人在一个甚至多个方面技术很厉害，说两个我们组的 P5，工作才一年多，早已经是 React 或者微前端方面的专家了，更高层级的那就更不用说了。\n总之，大厂里有非常多的优秀的人，意味着你有很多可以学习的榜样，如果有一些技术上的问题，以前可能只能在开源项目的 issue 上提问，现在你可以通过钉钉甚至直接面对面的进行交流。\n但是我还是秉承着一个观点，身边的人优秀，并不意味这自己优秀，也没人会主动带着你变成优秀的人，需要自己主动去跟他们学习，让自己成为别人眼中优秀的人。\n做项目成就感强 既然是大厂，不管是员工和用户相对都比较的多，做的东西反馈也会很多，不管是好的还是差的，都能感觉到有很多用户在使用，能感觉自己再为这么多人服务，能获得价值感。\n像我现在做的项目虽然是给内部小二(小二就是内部员工)用的，但是每天 UV 也有好几千，PV 也是上百万的，这跟我之前在上家公司做的内部系统就不太一样，之前做的东西不管好还是不好，没有什么人反馈，所以总是在找需求做，做出来也不知道有价值，存在感就比较低。\n如果能做 C 端用户的项目，比如像五福、双十一、双十二这种运营活动，虽然过程很艰苦，但是我相信做完了之后一定是满满的自豪感。\n做项目的成就感就来自于给自己、给别人带来了价值，能服务别人，如果你感受不到这份价值，这个项目估计不久就凉了。。。\n压力大 我以前在蘑菇街的时候每天正常作息上下班，基本没在工作上感受到过压力。\n但是在蚂蚁无处不在的压力，有时会把自己压得喘不过气，不过大部分时候会把压力当做动力，努力向前。\n一方面来自于项目压力，据我了解，在蚂蚁的业务团队相对于技术团队来说会忙一些。我们组现在主要是做业务，我们这边发布频率基本上一周一个迭代，一个迭代里可能还包含好几个需求，布频率极其高，项目周期又都很紧。\n偶尔还有项目紧急到需要倒排工期，就是不管你怎么搞，就是要在某一天上线。\n另外一方面来自于周围同事压力，前面也说了，周围的牛人很多，每个人身上你都能发现比自己优秀的地方，比自己级别低的、一个级别的要想着不要被别人超越，比自己级别高的，需要考虑怎么才能跟他们一样优秀。 对于项目压力大的正反馈就是逼着自己去做一些可以提效的技术方案，对于周围同事压力正反馈就是逼着自己去像他们学习，让自己变得越来越优秀。\n后记 这次主要聊的是环境和项目上的感受，下一篇会介绍一些关于技术上的一些体验。如果你之前没呆过大厂，你可以聊聊你想象的大厂是什么样子。如果你之前在待过，或者现在正在大厂里，可以聊聊你的感受是什么。\n同一个环境可能由于自己的心态不同，感受也会有差别，我只是分享我的感受，希望给你带来帮助。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/2021-03-13-%E5%9C%A8%E8%9A%82%E8%9A%81%E5%B7%A5%E4%BD%9C%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%80/","summary":"大家好，我是桃翁！ 之前有小伙伴留言让我聊聊「希望聊一些在大厂工作是什么体验，想听如何融入，如何适应，如何成长的规划，遇到过的哪些比较棘手的问题和怎么处理的，期待」。\n他这里这么多问题，我准备每个问题都写一篇文章来聊，首先咱们要聊的就是「大厂的工作体验」。\n身边牛人多 可能很多想去大厂的同学，第一驱动力觉得大厂肯定很多大佬，然后进去了可以带带自己。\n其实这句话不全对，也别抱太大希望，进来了可能跟你的想法是不一样的。 我的体感是：前半句是对的，大厂里确实很多牛人，但是不会带你的，或者说不是你想象中那么带。\n在阿里这边一个新同学刚进来的时候，会在组内分配一个师兄，来协助你顺利度过试用期。但是不是那种事无巨细的关注你的那种，大部分时间师兄每天也很忙，一个新人来了还要帮你解决问题，所以师兄就会更忙了，所以师兄主要是帮你解答一些问题。\n再说说身边其他的牛人，牛可以很多方面的：\n比如 学校牛，在杭州这边浙大的比较多，我们组才 12 个人就有三个浙大的，还有在国外上大学的。\n网红，可以接触到很多之前只能在知乎、或者一些大会里才能看到或者听说的一些大牛，来了之后就可以见到，甚至面对面交流，每次交流都会受益匪浅，比如我在蚂蚁体验技术部就可以接触到玉伯、偏右这种超级前端网红。\n技术牛， 不管是 P5、P6、P7 哪个层级的，你都会发现每个人在一个甚至多个方面技术很厉害，说两个我们组的 P5，工作才一年多，早已经是 React 或者微前端方面的专家了，更高层级的那就更不用说了。\n总之，大厂里有非常多的优秀的人，意味着你有很多可以学习的榜样，如果有一些技术上的问题，以前可能只能在开源项目的 issue 上提问，现在你可以通过钉钉甚至直接面对面的进行交流。\n但是我还是秉承着一个观点，身边的人优秀，并不意味这自己优秀，也没人会主动带着你变成优秀的人，需要自己主动去跟他们学习，让自己成为别人眼中优秀的人。\n做项目成就感强 既然是大厂，不管是员工和用户相对都比较的多，做的东西反馈也会很多，不管是好的还是差的，都能感觉到有很多用户在使用，能感觉自己再为这么多人服务，能获得价值感。\n像我现在做的项目虽然是给内部小二(小二就是内部员工)用的，但是每天 UV 也有好几千，PV 也是上百万的，这跟我之前在上家公司做的内部系统就不太一样，之前做的东西不管好还是不好，没有什么人反馈，所以总是在找需求做，做出来也不知道有价值，存在感就比较低。\n如果能做 C 端用户的项目，比如像五福、双十一、双十二这种运营活动，虽然过程很艰苦，但是我相信做完了之后一定是满满的自豪感。\n做项目的成就感就来自于给自己、给别人带来了价值，能服务别人，如果你感受不到这份价值，这个项目估计不久就凉了。。。\n压力大 我以前在蘑菇街的时候每天正常作息上下班，基本没在工作上感受到过压力。\n但是在蚂蚁无处不在的压力，有时会把自己压得喘不过气，不过大部分时候会把压力当做动力，努力向前。\n一方面来自于项目压力，据我了解，在蚂蚁的业务团队相对于技术团队来说会忙一些。我们组现在主要是做业务，我们这边发布频率基本上一周一个迭代，一个迭代里可能还包含好几个需求，布频率极其高，项目周期又都很紧。\n偶尔还有项目紧急到需要倒排工期，就是不管你怎么搞，就是要在某一天上线。\n另外一方面来自于周围同事压力，前面也说了，周围的牛人很多，每个人身上你都能发现比自己优秀的地方，比自己级别低的、一个级别的要想着不要被别人超越，比自己级别高的，需要考虑怎么才能跟他们一样优秀。 对于项目压力大的正反馈就是逼着自己去做一些可以提效的技术方案，对于周围同事压力正反馈就是逼着自己去像他们学习，让自己变得越来越优秀。\n后记 这次主要聊的是环境和项目上的感受，下一篇会介绍一些关于技术上的一些体验。如果你之前没呆过大厂，你可以聊聊你想象的大厂是什么样子。如果你之前在待过，或者现在正在大厂里，可以聊聊你的感受是什么。\n同一个环境可能由于自己的心态不同，感受也会有差别，我只是分享我的感受，希望给你带来帮助。","title":"在蚂蚁工作是一种什么样的体验(一)"},{"content":"前言 2020 年真的是不平凡的一年， 疫情夺走了很多人的生命，还夺走了我的工作(公司因为疫情被迫裁员)，所以今年换了工作来到了蚂蚁，在蚂蚁的工作经历跟之前在蘑菇街完全不一样。。。\n工作 来蚂蚁这半年我觉得在工作上的成长比我之前在蘑菇街一年半的成长都还多，经历比较丰富。\n阿里一直都有拥抱变化的文化，我来大概五个月的时候就换了三个主管，经历了好几次的组织架构变动，我刚进来的时候同组的同事（之前组内大概 12 人）到现在还跟我一组的仅剩一名。\n不过随着每一次的变动，我的分工也越来越清晰，从最开始哪里缺人就去哪里，再到负责一块模糊的业务线，再到一个人带着 3 个合作伙伴负责一整个业务线，再到现在有了 3 个正式加 6 个合作伙伴的阵型。\n作为整个业务线的 owner 不仅要接需求还要去预测业务未来的走向，这样才能在技术上做好提前的准备，当业务真的来了，才能快速的支持。这个是我在试用期答辩的时候面试官给到我的期望，这个我在之前试用期结束后有写过。\n原来我是个业务性选手？？？？\n只不过那个时候我只是觉得这个话说得很对，并没有体感，但是当我在负责整块业务的，以及带着一群人在做的期间，作为业务 owner 必须得去思考这些了，因为我们这里业务发展得很快，虽然我们业务团队成员变多了，但是需求也越来越多，所以如果不提前去做一些业务上的预测，技术上的沉淀，当业务发展再快点，需求再多一些我们目前的这些人就消化得很吃力，甚至吃不下，这是我今年非常大的一个收获。\n对于这个收获其实我之前想过我为什么可以得到，我刚开始把原因归结到了运气，因为我能有机会负责一条业务线的东西是由于我的师兄以及其他大部分同事都走了，现有的业务只能由留下来的人去承担，所以我当时想到了那些得到晋升或者 375 的同学是不是运气好，可以做到好的业务或者技术。但是又细想如果机会给你了，如果没有把它当机会，而且他这块重重的东西当做负担，或者平常心看待，可能也做不出什么优秀的成果。\n但是一件平凡的事情如果交给一个优秀的人去做，大概率还是会做出优秀的东西。\n所以最后我得出的结论是运气可以让一个准备好了，有实力的人加速成功，但不会让一个平凡的人获得成功。\n学习与写作 当我在准备写总结的时候，我本以为今年读的书(去年 20 本)会比去年要少，没想到今年还略多一点，读完的都有 29 本了，但是我明显能感觉到今年花在读书上的时间变少了，特别是在入职蚂蚁之后，属于自己的时间更少了。\n我想可能是渐渐的找到了读书的方法，越读越快了吧。\n下面是我今年读书列表：豆瓣主页\n在写作方面今年公开文章产量就很低了，只有 13 篇，基本都是上半年写的，下半年入职蚂蚁之后就基本没怎么写了，一方面是因为确实工作太忙了，另一方面需要在公司内部写不少的文档。\n文章列表见博客：前端桃园\n技术 很遗憾今年对技术没有做什么深的研究，主要是业务太忙，把我对技术的追求抹平了，整天就想着如何能把业务支持下去。\n来蚂蚁半年没写过 React，大部分时间写钉钉小程序和支付宝小程序，另外还写了将近两个月的云凤蝶。\n在我没怎么接触过小程序前，对小程序有刻板的印象，总觉得小程序限制太多，很简单，没有什么意思，当然也不知道其原理，所以对小程序比较抵触。\n但是当我写了两三个月之后，对小程序了解得越来越多，但是另一方面发现自己对小程序了解得越来越少，为什么这么说呢？\n当我还没怎么接触小程序的时候可能想到的就只有 小程序的语法是什么样的，小程序是怎么运行的，但是写得越来越久，发现自己以前的视野太小了，整个小程序生态还有很多东西可以去研究，越写越发现自己不会的越来越多，这些不知道反而让我对小程序产生了兴趣，感觉可以有新的东西值得去研究。\n比如小程序他是怎么运行的，跟原生、H5 之前的区别在哪里，关联是什么，view 层是怎么渲染的，逻辑部分的 js 是怎么执行的，与客户端，容器是怎么通信，怎么打包的，怎么编译的，编译出来的东西又是什么，怎么发布上架的，以及什么情况下使用小程序技术栈、什么情况下使用 h5 技术栈，等等等，这些没有搞明白的问题深深的让我对小程序产生了兴趣。\n所以明年在技术上的一个目标就是深入小程序。\n生活 家人 生活方面最令我开心的就是女朋友在 11 月份从上海辞职，来到了杭州，结束了 3 年的异地恋，每天下班后有个人在家里等的感觉真好！\n旅游 西安旅游\n国庆去西安旅游了，在去西安之前我们还先去南京溧水参加了【咪豆音乐节】。这次是准备得最充分的一次，还做了一些攻略。\n重庆 Outing\n重庆三峡博物馆\n江景：重庆洪崖洞夜景\n健身 今年开始有了到健身房健身的习惯，非常感谢 yixi 带我去健身房教我健身，我以前以为健身器材是非常简单的东西，一进去就知道怎么用，接触了过后才知道健身其实还是挺有学问的，不同的健身器材有多种不同的用法，每种用法锻炼的部位还不一样，所以可以根据自己想健身的部位去筛选器材和器材的使用方式。\n我大概从 9 月份初的时候第一次去的吧，一直到现在也是断断续续的，有时间就天天去，没时间就偷懒了，由于我们是中午去，所以时间还挺苛刻的，如果中午有会议啥的，很可能时间上赶不上了。\n不过从开始第一天到现在我还是能明显得感觉到自己力量的提升，粗略的估计手 腿 肩的力量提升有 30%左右，胸部就 15-20%的样子，总感觉胸部的力量比较弱，明年多练练胸。\n投资理财 2020 年在投资上最大的成长是学到了**「打新」**，我主要打的是港股，因为港股相对于 A 股来说中签率高，打新的赚的几率会比美股的大，我大概是在 11 月份才办好香港卡，入金到了富途，才开始打新，打了十几次才中了 3 次，每次收益都超过 15% ，但是在富途现金打新每次会收 50 的手续费，新手打新还是建议找一些现金打新免手续费的，比如艾德、华泰等。\n其他股票、基金就没什么也没什么好总结的。\n2021 目标 在社区里输出至少 10 篇文章。 平均每周至少去健身房 2 次。 旅游两次。 列太多也完不成，不列了。。。。。。 ","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/326/","summary":"前言 2020 年真的是不平凡的一年， 疫情夺走了很多人的生命，还夺走了我的工作(公司因为疫情被迫裁员)，所以今年换了工作来到了蚂蚁，在蚂蚁的工作经历跟之前在蘑菇街完全不一样。。。\n工作 来蚂蚁这半年我觉得在工作上的成长比我之前在蘑菇街一年半的成长都还多，经历比较丰富。\n阿里一直都有拥抱变化的文化，我来大概五个月的时候就换了三个主管，经历了好几次的组织架构变动，我刚进来的时候同组的同事（之前组内大概 12 人）到现在还跟我一组的仅剩一名。\n不过随着每一次的变动，我的分工也越来越清晰，从最开始哪里缺人就去哪里，再到负责一块模糊的业务线，再到一个人带着 3 个合作伙伴负责一整个业务线，再到现在有了 3 个正式加 6 个合作伙伴的阵型。\n作为整个业务线的 owner 不仅要接需求还要去预测业务未来的走向，这样才能在技术上做好提前的准备，当业务真的来了，才能快速的支持。这个是我在试用期答辩的时候面试官给到我的期望，这个我在之前试用期结束后有写过。\n原来我是个业务性选手？？？？\n只不过那个时候我只是觉得这个话说得很对，并没有体感，但是当我在负责整块业务的，以及带着一群人在做的期间，作为业务 owner 必须得去思考这些了，因为我们这里业务发展得很快，虽然我们业务团队成员变多了，但是需求也越来越多，所以如果不提前去做一些业务上的预测，技术上的沉淀，当业务发展再快点，需求再多一些我们目前的这些人就消化得很吃力，甚至吃不下，这是我今年非常大的一个收获。\n对于这个收获其实我之前想过我为什么可以得到，我刚开始把原因归结到了运气，因为我能有机会负责一条业务线的东西是由于我的师兄以及其他大部分同事都走了，现有的业务只能由留下来的人去承担，所以我当时想到了那些得到晋升或者 375 的同学是不是运气好，可以做到好的业务或者技术。但是又细想如果机会给你了，如果没有把它当机会，而且他这块重重的东西当做负担，或者平常心看待，可能也做不出什么优秀的成果。\n但是一件平凡的事情如果交给一个优秀的人去做，大概率还是会做出优秀的东西。\n所以最后我得出的结论是运气可以让一个准备好了，有实力的人加速成功，但不会让一个平凡的人获得成功。\n学习与写作 当我在准备写总结的时候，我本以为今年读的书(去年 20 本)会比去年要少，没想到今年还略多一点，读完的都有 29 本了，但是我明显能感觉到今年花在读书上的时间变少了，特别是在入职蚂蚁之后，属于自己的时间更少了。\n我想可能是渐渐的找到了读书的方法，越读越快了吧。\n下面是我今年读书列表：豆瓣主页\n在写作方面今年公开文章产量就很低了，只有 13 篇，基本都是上半年写的，下半年入职蚂蚁之后就基本没怎么写了，一方面是因为确实工作太忙了，另一方面需要在公司内部写不少的文档。\n文章列表见博客：前端桃园\n技术 很遗憾今年对技术没有做什么深的研究，主要是业务太忙，把我对技术的追求抹平了，整天就想着如何能把业务支持下去。\n来蚂蚁半年没写过 React，大部分时间写钉钉小程序和支付宝小程序，另外还写了将近两个月的云凤蝶。\n在我没怎么接触过小程序前，对小程序有刻板的印象，总觉得小程序限制太多，很简单，没有什么意思，当然也不知道其原理，所以对小程序比较抵触。\n但是当我写了两三个月之后，对小程序了解得越来越多，但是另一方面发现自己对小程序了解得越来越少，为什么这么说呢？\n当我还没怎么接触小程序的时候可能想到的就只有 小程序的语法是什么样的，小程序是怎么运行的，但是写得越来越久，发现自己以前的视野太小了，整个小程序生态还有很多东西可以去研究，越写越发现自己不会的越来越多，这些不知道反而让我对小程序产生了兴趣，感觉可以有新的东西值得去研究。\n比如小程序他是怎么运行的，跟原生、H5 之前的区别在哪里，关联是什么，view 层是怎么渲染的，逻辑部分的 js 是怎么执行的，与客户端，容器是怎么通信，怎么打包的，怎么编译的，编译出来的东西又是什么，怎么发布上架的，以及什么情况下使用小程序技术栈、什么情况下使用 h5 技术栈，等等等，这些没有搞明白的问题深深的让我对小程序产生了兴趣。\n所以明年在技术上的一个目标就是深入小程序。\n生活 家人 生活方面最令我开心的就是女朋友在 11 月份从上海辞职，来到了杭州，结束了 3 年的异地恋，每天下班后有个人在家里等的感觉真好！\n旅游 西安旅游\n国庆去西安旅游了，在去西安之前我们还先去南京溧水参加了【咪豆音乐节】。这次是准备得最充分的一次，还做了一些攻略。\n重庆 Outing\n重庆三峡博物馆\n江景：重庆洪崖洞夜景","title":"桃翁2020年度总结"},{"content":"01 前几天我试用期转正答辩了，老板也给过了，给到我的评价大概是：业务型选手，接下来一两年很关键，如果能够在业务中深入挖掘，会是个好苗子，否则就比较平了。\n这个评价其实我还是没想到的，或者说我之前根本没想过结果。\n其实我从大学毕业以来，都觉得自己是个**技术型选手，**之前在蘑菇街的时候我也是按照技术路线走的。在蘑菇街的时候工作不是很忙，所以也有时间去研究技术，也乐于分享然后才经常写文章，才做了公众号。\n02 不过在我年初的时候，我对技术的追求稍微弱了一点，这是在蘑菇街的时候准备晋升答辩过程中的一些变化。我的前辈呀、主管呀、HR 呀，在我准备 PPT 的期间都不断的给我灌输，你做的东西到底有什么业务价值？\n在这期间，我的 PPT 找了好几位前辈包括自己的主管都 review 过，也给他们进行试讲，每次的给到我的建议都会有，要注重业务价值。\n之后我的脑海里就深深的有了这么一个意识，技术是为业务服务的，技术的价值源之于业务的价值，而不是技术本身的价值。\n所以我在后面的工作中，会更注重业务价值，在做需求的时候不再去追求高大上的新技术，热技术，而是花更多的心思去问这个需求的背景，能解决什么问题，能为用户带来什么价值，能给公司带来什么利益。 **\n03 没想到我把这个意识也带进了蚂蚁，在蚂蚁的工作是非常忙碌的，我后面会写文章记录一下在蚂蚁有多忙，但是现在我只想说一点，反正忙到没时间去折腾新技术，注意是折腾不是学习，因为我在蚂蚁做的东西对于我来说，一直都是新的技术，但是没有时间去专研，学习新技术是为了完成需求。\n在答辩的前三天我还在跟我的老板说，业务太忙了，没时间写总结了，目前只写了一个总结的目录(可能就 50 个字左右)；老板跟我说，在 9 月 2 号前一定要提交总结，不然系统会自动试用期不通过，在那时我快要崩溃了，项目这么急，哪有时间写总结呀，还要答辩。\n真的是抽不出时间来写总结，每天加班到凌晨两三点，回家就想睡觉，根本没精力写。\n在答辩的前一天晚上，大概 8 点多的时候，其他伙伴在工作的时候，我就抽了大概一个半小时的样子按照我之前的目录写完了，感觉写出来毫无亮点，看起来就是自己的血泪史。反正就当完成任务了，明天毕竟要答辩了，不可能啥都没有吧，然后写完继续改 bug。\n那天我也回去得比较早，大概 12 点回去了。在这个点其实还是有点精力的，我就寻思着，我感觉自己写的总结很 low，没有亮点，给面试官留不下太多的印象。\n04 回来之后我就思考怎么才能让面试官觉得我做的东西有价值呢？想了半天没想出来，但是突然想到一个点，我当时不知道这个点该不该讲，但是我很想讲，那就是我现在所做业务的大图。我们整个组都在做一个叫 xx 的项目(应该说是一个很大，很复杂的业务，是很多的项目)，每个人都负责其中的一块，我刚开始来的时候就对这个项目很好奇，因为我完全不能理解 xx 这个项目是一个什么样的项目，是用来干啥的。\n甚至在我已经做了两个月的项目之后，我也仅仅只对我自己做的这块了解，对其他的人做的东西不知道有什么关联，但是我还是知道跟我肯定是有关联的，所以其实一直处于一种比较难受的地步，因为我不知道这个项目到底有多大的价值。\n直到我在第三个月做了另外一部分的需求之后，我才慢慢的了解了这个 xx 项目到底是个什么样子的，我们的目标是什么，我们要做成什么样子，我们现在已经有了哪些能力。\n那几天每天上下班的路上我就在思考这些东西，真的是每天想，后面终于想清楚了每个人做的东西之间的关联，感觉很舒服。\n我觉得这个东西对于我来说价值很大，虽然他是纯业务的，或者说根本都不是我一个人做的，但是这真的是我的收获，所以我觉得站在更高的视角去介绍我们组现在做的 xx 业务，我就画了整个业务架构图，包含了我们组每个人所做的业务以及他们之间的关联。\n然后就去介绍整个 xx 业务的背景，能解决什么问题，能为用户带来什么价值，能给公司带来什么利益(是不是觉得似曾相识)，最后再去介绍我做的东西在整个大图的意义的时候就很容易了。\n在答辩的时候我差不多一半的时间都在讲这个，最后也给面试官留下了深刻的影响，说我提供的视角让他学到了新东西，他之前从来没有这么想过。\n05 最后面试官给到我当面的评价也说到了我是一个善于思考的同学，喜欢去专研业务，还有其他的好的坏的评价，已经记不得了。\n但是最后老板给我的试用期总评里直接说道我是一个**业务型选手，**这是我没想到的。但是我从他的评语中还得出，我在技术上的研究不够，如果后面我不深入业务的话，技术也没研究，那就真的很平了。\n我后面多次思考了一下，我到底应该去做一个业务型选手还是技术型选手呢？我目前的答案是我应该去做业务型选手，因为我的理想是去创业的，感觉业务型选手更适合创业，如果以后想去做 CTO 啥的，还是选技术型选手比较好。\n06 想一想你们自己是想做业务型选手还是技术型选手呢？欢迎在评论区说出你们的答案，最好能带上理由。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/324/","summary":"01 前几天我试用期转正答辩了，老板也给过了，给到我的评价大概是：业务型选手，接下来一两年很关键，如果能够在业务中深入挖掘，会是个好苗子，否则就比较平了。\n这个评价其实我还是没想到的，或者说我之前根本没想过结果。\n其实我从大学毕业以来，都觉得自己是个**技术型选手，**之前在蘑菇街的时候我也是按照技术路线走的。在蘑菇街的时候工作不是很忙，所以也有时间去研究技术，也乐于分享然后才经常写文章，才做了公众号。\n02 不过在我年初的时候，我对技术的追求稍微弱了一点，这是在蘑菇街的时候准备晋升答辩过程中的一些变化。我的前辈呀、主管呀、HR 呀，在我准备 PPT 的期间都不断的给我灌输，你做的东西到底有什么业务价值？\n在这期间，我的 PPT 找了好几位前辈包括自己的主管都 review 过，也给他们进行试讲，每次的给到我的建议都会有，要注重业务价值。\n之后我的脑海里就深深的有了这么一个意识，技术是为业务服务的，技术的价值源之于业务的价值，而不是技术本身的价值。\n所以我在后面的工作中，会更注重业务价值，在做需求的时候不再去追求高大上的新技术，热技术，而是花更多的心思去问这个需求的背景，能解决什么问题，能为用户带来什么价值，能给公司带来什么利益。 **\n03 没想到我把这个意识也带进了蚂蚁，在蚂蚁的工作是非常忙碌的，我后面会写文章记录一下在蚂蚁有多忙，但是现在我只想说一点，反正忙到没时间去折腾新技术，注意是折腾不是学习，因为我在蚂蚁做的东西对于我来说，一直都是新的技术，但是没有时间去专研，学习新技术是为了完成需求。\n在答辩的前三天我还在跟我的老板说，业务太忙了，没时间写总结了，目前只写了一个总结的目录(可能就 50 个字左右)；老板跟我说，在 9 月 2 号前一定要提交总结，不然系统会自动试用期不通过，在那时我快要崩溃了，项目这么急，哪有时间写总结呀，还要答辩。\n真的是抽不出时间来写总结，每天加班到凌晨两三点，回家就想睡觉，根本没精力写。\n在答辩的前一天晚上，大概 8 点多的时候，其他伙伴在工作的时候，我就抽了大概一个半小时的样子按照我之前的目录写完了，感觉写出来毫无亮点，看起来就是自己的血泪史。反正就当完成任务了，明天毕竟要答辩了，不可能啥都没有吧，然后写完继续改 bug。\n那天我也回去得比较早，大概 12 点回去了。在这个点其实还是有点精力的，我就寻思着，我感觉自己写的总结很 low，没有亮点，给面试官留不下太多的印象。\n04 回来之后我就思考怎么才能让面试官觉得我做的东西有价值呢？想了半天没想出来，但是突然想到一个点，我当时不知道这个点该不该讲，但是我很想讲，那就是我现在所做业务的大图。我们整个组都在做一个叫 xx 的项目(应该说是一个很大，很复杂的业务，是很多的项目)，每个人都负责其中的一块，我刚开始来的时候就对这个项目很好奇，因为我完全不能理解 xx 这个项目是一个什么样的项目，是用来干啥的。\n甚至在我已经做了两个月的项目之后，我也仅仅只对我自己做的这块了解，对其他的人做的东西不知道有什么关联，但是我还是知道跟我肯定是有关联的，所以其实一直处于一种比较难受的地步，因为我不知道这个项目到底有多大的价值。\n直到我在第三个月做了另外一部分的需求之后，我才慢慢的了解了这个 xx 项目到底是个什么样子的，我们的目标是什么，我们要做成什么样子，我们现在已经有了哪些能力。\n那几天每天上下班的路上我就在思考这些东西，真的是每天想，后面终于想清楚了每个人做的东西之间的关联，感觉很舒服。\n我觉得这个东西对于我来说价值很大，虽然他是纯业务的，或者说根本都不是我一个人做的，但是这真的是我的收获，所以我觉得站在更高的视角去介绍我们组现在做的 xx 业务，我就画了整个业务架构图，包含了我们组每个人所做的业务以及他们之间的关联。\n然后就去介绍整个 xx 业务的背景，能解决什么问题，能为用户带来什么价值，能给公司带来什么利益(是不是觉得似曾相识)，最后再去介绍我做的东西在整个大图的意义的时候就很容易了。\n在答辩的时候我差不多一半的时间都在讲这个，最后也给面试官留下了深刻的影响，说我提供的视角让他学到了新东西，他之前从来没有这么想过。\n05 最后面试官给到我当面的评价也说到了我是一个善于思考的同学，喜欢去专研业务，还有其他的好的坏的评价，已经记不得了。\n但是最后老板给我的试用期总评里直接说道我是一个**业务型选手，**这是我没想到的。但是我从他的评语中还得出，我在技术上的研究不够，如果后面我不深入业务的话，技术也没研究，那就真的很平了。\n我后面多次思考了一下，我到底应该去做一个业务型选手还是技术型选手呢？我目前的答案是我应该去做业务型选手，因为我的理想是去创业的，感觉业务型选手更适合创业，如果以后想去做 CTO 啥的，还是选技术型选手比较好。\n06 想一想你们自己是想做业务型选手还是技术型选手呢？欢迎在评论区说出你们的答案，最好能带上理由。","title":"原来我是个业务性选手"},{"content":"前言 最近两篇面试以及离职相关的文章不容错过哦。\n离开蘑菇街后，我最近的一些想法\n拼多多和酷家乐面试总结\n今年面试还是比较顺的，面了五家公司(酷家乐、拼多多、字节、滴滴、蚂蚁)，都过了。\n在文章里我不仅会列出面试题，还会给到一些答题建议，个人能力有限，也不能保证我回答都正确，如果有错误，希望能纠正我。\n字节 一面 说一下浏览器缓存\n浏览器缓存分为强缓存和协商缓存，强缓存会直接从浏览器里面拿数据，协商缓存会先访问服务器看缓存是否过期，再决定是否从浏览器里面拿数据。\n控制强缓存的字段有：Expires和Cache-Control，Expires 和 Cache-Control。\n控制协商缓存的字段是：Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中 Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。\ncookie 与 session 的区别\nSession 是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中； Cookie 是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现 Session 的一种方式。\n详见：COOKIE和SESSION有什么区别？\n浏览器如何做到 session 的功能的。\n其实就是考察 http 怎么处理无状态是怎么处理的，具体可见 COOKIE和SESSION有什么区别？里面的答案。\n解释一下：csrf 和 xss\nXSS：恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。\nCSRF：CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。\n详见：前端安全面试题\n怎么防止 csrf 和 xss\n详见：前端安全面试题\n跨域的处理方案有哪些\n常用的：jsonp、CORS、nginx 代理，完整的大概是九种，可见：九种跨域方式实现原理（完整版）\nCORS 是如何做的？\n服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。\n对于 CORS ，Get 和 POST 有区别吗？\n其实想考察的就是什么时候会有预检请求(option 请求)。\n了解 HTTPS 的过程吗？\n推荐浪浪的 深入理解HTTPS工作原理\nwebpack 如何做性能优化\nwebpack 做性能优化主要是考虑打包体积和打包速度。\n体积分析用 webpack-bundle-analyzer 插件，速度分析用：speed-measure-webpack-plugin 插件。\n打包速度优化瓶子君的：玩转 webpack，使你的打包速度提升 90%。\nes module 和 commonjs 的区别\n高频题，考察 ES6 模块和 CommonJS 模块 的区别。关键点：1. 前者是值的引用，后者是值的拷贝。 2.前者编译时输出接口，后者运行时加载。\n推荐文章：前端模块化：CommonJS,AMD,CMD,ES6\nreact 里如何做动态加载\nReact.lazy ，另外通过 webpack 的动态加载：import() 和 ensure.require\n动态加载的原理是啥，就是 webpack 编译出来的代码\n讲道理 webpack 动态加载就两种方式：import()和 require.ensure，不过他们实现原理是相同的。\n我觉得这道题的重点在于动态的创建 script 标签，以及通过 jsonp 去请求 chunk，推荐的文章是：webpack是如何实现动态导入的\n笔试题：页面结构包括页头（永远在顶部）、主体内容、页脚，页脚永远在页面底部（不是窗口底部），即内容高度不够时，页脚也要保证在页面底部\n常规题，考察基本的布局\n笔试题：写 new 的执行过程\nnew 的执行过程大致如下：\n创建一个对象\n将对象的 _ proto_ 指向 构造函数的 prototype\n将这个对象作为构造函数的 this\n返回该对象。\nfunction myNew(Con, ...args) { let obj = Object.create(Con.prototype) let result = Con.apply(obj, args) return typeof obj === \u0026#39;object\u0026#39; ? result : obj } 笔试题：写一个处理加法可能产生精度的函数，比如 0.1 + 0.2 = 0.3\n思路：对于浮点数在底层处理是有问题的，所以目的就是想办法将所以的浮点数转化为整数进行处理，同时乘以一个倍数(A)，然后加起来后再除以这个倍数(A)，这个倍数应该是两个数中最小的那个数的倍数，比如 0.1 + 0.02 ,那么应该同时乘以 100，变为 10 + 2，然后再将值除以 100。\n1000000000 + 1000000000 允许返回字符串 处理大数\n大数问题就是通过字符串来处理，从后往前加，然后处理进位的问题。\n二面 聊项目\n项目基本是问：\n项目难点以及怎么解决的 项目有哪些亮点？ 写一个 es6 的继承过程\n这个题我觉得出得很好，很考察基本功。\n// 这个是要实现的方法 createClass = fun(sons, super) { // TODO return fn; } // 这是个 es6 的一个例子，要实现 extends 的功能。 class Man extends Human { cons (args) { super(args) // xxxxx } speak() { console.log(\u0026#39;\u0026#39;) } } 写一个大数相乘的解决方案。传两个字符串进来，返回一个字符串\nfunction multi(str1, str2) { } 这道题跟一面的时候思路差不多，只是进位的时候不一定是 1。\n三面 聊项目\n写一个防抖函数\n算法题:https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/\n小节 字节果然是出了名的考算法题比较多的，基本每面都会算法题和编程题，对编程能力比较看重吧。\n讲道理一面还是比较常规的，二三面因为都是团队 leader 和更高级别的，问的技术细节也比较少了，重点考察一些技术方案和项目的问题。\n滴滴 一面 webpack 原理\n大致就是：\n初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数； 开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译； 确定入口：根据配置中的 entry 找出所有的入口文件； 编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理； 完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系； 输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会； 输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。 在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。\nbabel 原理\nbabel的转译过程分为三个阶段：parsing、transforming、generating，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：\nES6代码输入 babylon 进行解析得到 AST plugin 用 babel-traverse 对 AST 树进行遍历转译,得到新的AST树 用 babel-generator 通过 AST 树生成 ES5 代码 虚拟 DOM 的理解\n从 React 历史的长河里聊虚拟DOM及其价值\n项目里如何做的性能优化\n这个跟我的项目相关。\n写过webpack loader 或者插件吗\n讲讲你写的 babel 插件\n二面 redux 的原理\nredux 做状态管理和发布订阅模式有什么区别\nredux 其实也是一个发布订阅，但是 redux 可以做到数据的可预测和可回溯。\nreact-redux 的原理，是怎么跟 react 关联起来的\nreact-redux 的核心组件只有两个，Provider 和 connect，Provider 存放 Redux 里 store 的数据到 context 里，通过 connect 从 context 拿数据，通过 props 传递给 connect 所包裹的组件。\n了解多端的原理吗？\n不清楚，没了解过。\nhttp 与 tcp 的关系\ntcp 可以建立多个连接吗？\n我估计是想问 http 的管线化，当时忘了这个叫啥了\n介绍一下为什么要有 三次握手，四次挥手\n写过 babel 插件吗？用来干啥的？怎么写的 babel 插件\n写过一些简单的 babel 插件，说了我们公司用来通过代码生成文档的 babel 插件是怎么做的。\n知道怎么转化成 AST 的吗？\n我估计就是问词法分析和语法分析相关的\n研究过 React 的运行时吗？\n职业规划。\n三面 项目介绍\n说一下你的项目有哪些复杂的点，以及怎么解决的\n这个聊了挺久的，还聊了一些数据量比较大的怎么处理。\n你们的业务组件库有多少个，是什么样的组件\n权限组件是怎么设计的\n会node 吗？\n我说我只会增删改查，会点 express，然后就开始一顿狂轰乱炸的知识。\n介绍一下你对中间件的理解\n怎么保证后端服务稳定性，怎么做容灾\n感觉已经超纲了，基本没做过，还好之前跟后端同学聊过他们怎么做容灾的，还记得两点说了下。\n多个服务器部署 降级处理，服务挂了，从缓存里面取。 怎么让数据库查询更快\n索引 如果数据量太多了可以拆表，分多个数据库 数据库是用的什么？\nmysql\n为什么用 mysql\n希望滴滴能提供给你什么？\n这个题其实还挺常考的，可以好好准备下，背一下答案。\n最后面试官问我有什么想问他的么，我说没有，因为我之前问得挺多了。不过他还是给我介绍了他们业务还是很厉害的，集团第三，还拿了 A 级绩效，公司有很多技术上的沉淀，跨端呀，web IDE 呀，等等\n这个时候我就感觉自己能过了，感觉是在吸引我去，偷笑。\n四面 介绍一下项目的难点以及怎么解决的\n一起讨论那些难点\n自己有什么技术上的优势\n最近在研究什么技术？\n职业规划\n移动端的业务有做过吗？\n希望滴滴能提供给你什么？\n当业务重的时候怎么安排时间？\n小节 滴滴我面的这个岗位是可能回去做一些多端应用，所以会涉及到很多 webpack 和 ast 相关的东西，所以这些问得比较多，感觉这个组还是很不错的，能做到很多技术上的东西。\n蚂蚁 一面 讲讲来蘑菇街都干了哪些事情\n聊聊有什么技术上的沉淀\n除了 redux mbox dva 还用过其他的 状态管理没\nhooks 原理\n看过 hooks 相关的草案吗\n你对蚂蚁有什么期望，或者说技术的规划，想做的东西\nvue3 的 类似 hooks 的原理是怎么样的\n二面 聊项目，项目的难点，以及自己做了哪些事情\n为什么项目里会引入 TS\ndva 和 redux 的区别\n职业发展，今年的打算\n组件升级怎么让使用这个组件的人都知道。\n如果让你设计项目自动设计组件升级，并且安全，你会怎么去设计\n三面 全程聊项目，因为他不是前端的，所以没问前端任何知识，主要聊业务相关的，看看我对业务的理解，以及一些想法。\n项目难点\n怎么解决\n项目有什么改进的地方\n业务方怎么拿到反馈的，就是做的这个东西具体有什么用\n小节 一面面试官问了很多我完全不知道的东西，我知道的东西可能答的比较随意吧，记不起来了。反正能深深的感受到面试对知识的广度和深度远超我很多很多，基本不在一个 level 的。\n二三面已经是 P9 的大佬来面了，所以也没问太多的技术细节，都是考察一些技术的解决方案和项目的东西。\n蚂蚁的面试其实还是比较难的，问题都不是那种有确定的答案，基本都是考察你平时的积累和经验。\n最后 上一篇拼多多和酷家乐的面经之后有很多人问我工作几年，怎么学习的之类的，或者你面了这么多都过了是不是有什么技巧呀？\n首先我目前工作了快两年了，18 年 7 月份毕业的。\n关于如何准备面试的问题，我的策略是把自己会的东西以及常用的东西，尽量让面试官问不倒你，不会的东西可以跟面试官说不会，不怎么了解，那一般面试官也不会问相关的问题了，如果连自己常用的东西都了解得不深，那么就不太有可能把平时不常用的了解得很深了。\n比如我可能写 react 比较多，参与过组件库的开发，webpack 写得也比较多。所以我在准备的时候，就尽量准备的这些知识，了解我的人都知道，我对 react 研究得比较多，原理、性能优化都写过文章，所以如果考 react 的东西，我基本不担心。 对于 vue、移动端、小程序、node 啥的，我基本没准备，问倒的时候我就说仅仅了解，没有什么实战经验。\n最后我是桃翁，一个爱思考的前端er，期待你的关注。\n如果你最近也在找工作，欢迎找我交流，下面是我公众号。\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/321/","summary":"前言 最近两篇面试以及离职相关的文章不容错过哦。\n离开蘑菇街后，我最近的一些想法\n拼多多和酷家乐面试总结\n今年面试还是比较顺的，面了五家公司(酷家乐、拼多多、字节、滴滴、蚂蚁)，都过了。\n在文章里我不仅会列出面试题，还会给到一些答题建议，个人能力有限，也不能保证我回答都正确，如果有错误，希望能纠正我。\n字节 一面 说一下浏览器缓存\n浏览器缓存分为强缓存和协商缓存，强缓存会直接从浏览器里面拿数据，协商缓存会先访问服务器看缓存是否过期，再决定是否从浏览器里面拿数据。\n控制强缓存的字段有：Expires和Cache-Control，Expires 和 Cache-Control。\n控制协商缓存的字段是：Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中 Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。\ncookie 与 session 的区别\nSession 是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中； Cookie 是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现 Session 的一种方式。\n详见：COOKIE和SESSION有什么区别？\n浏览器如何做到 session 的功能的。\n其实就是考察 http 怎么处理无状态是怎么处理的，具体可见 COOKIE和SESSION有什么区别？里面的答案。\n解释一下：csrf 和 xss\nXSS：恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。\nCSRF：CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。\n详见：前端安全面试题\n怎么防止 csrf 和 xss\n详见：前端安全面试题\n跨域的处理方案有哪些\n常用的：jsonp、CORS、nginx 代理，完整的大概是九种，可见：九种跨域方式实现原理（完整版）\nCORS 是如何做的？","title":"蚂蚁、字节、滴滴面试经历总结"},{"content":"前言 写作是我一直都提倡每个人去做的一件事情，也许你是通过写作来进行总结，也许你是通过写作生计，也许像我一样写文章提升自己的影响力，不管怎么样，工欲善其事必先利其器，今天我将两年以来最好用的一套写作软件配置介绍给大家。\n在这篇文章中你可以了解到三个工具：\n最好用的 markdown 写作编辑器 mac 平台专属的图床工具 选取合适的工具美化排版 写作软件(Typora) 我使用过很多的 markdown 编辑器，bear、MWeb、UIysses、印象笔记等等，每个都号称最专业的 markdown 软件，但是这些软件对于图片的处理都不是特别满足我的需求。\n只有 typora，让文字和图片完美的结合在一起，并且支持将文章复制到其他平台。\n接下来，我将介绍一下 Typora 吸引我的几个地方：\n1. 所见即所得的特性 实时预览，不需要分两栏。\n2. 自定义主题。 你可以从官网下载主题，或者自己写主题。\n3. 大纲与文章目录。 自动识别标题，展示出目录。\n4. 可以方便的将图片自动上传到自己的图床上 大部分的写作编辑器都需要手动的去将图片上传到图床上，然后再把链接写到编辑器来，这样来回切换很麻烦。typora 可以自动识别图片然后直接上传上自己的图床上。\n当你把图片直接拖到编辑器，或者说截屏之后复制到编辑器的时候，就会让你选择是否上传图片，点击上传图片就可以直接上传到图床上，然后将链接替换成图床的链接。\n你只需要在偏好设置图像的上传服务设置为 iPic 即可，下面我会介绍 iPic。\n上传服务这里还可以选择自定义命令，也就是说你可以自己写一个上传图片的 shell 然后上传到自己的图床上，图片处理非常的强大。\n5. 可以直接复制富文本格式(包括主题样式)到公众号或者其他支持富文本的地方。 公众号后台排版其实不是特别好用，另外我们程序员往往喜欢写 markdown 而不是富文本，所以就需要一个将 markdown 转富文本的一个工具，typora 在这方面也很擅长。\n图片处理(iPic 和 iPic Move) 怎么获得免费图床 对于图床这个东西，我觉得还是用自己的比较好，或者说付费的图床，而不是选用网上一些免费的，比如微博图床，其他网站的图床(比如掘金)，使用别人的图床虽然免费，但是一旦加了防盗链，你想迁移图片就非常的麻烦(我就踩过这个坑)，那么这个时候免费的其实就更贵了。\n所以很早我就开始研究怎么能用上专业的，自己的图床，我就发现了七牛云这个良心云服务商。七牛云对于新用户免费送 10 个 G 的空间，你可以将图片通过对象存储的方式存在七牛云里。而且这些图片还是都可以增加 CDN 的。\n具体如何去创建自己的对象存储空间，你可以参考官网教程。\n有了图床，如何将图片上传到图床上面去呢？在 Mac 下 iPic 就是一个很好的工具。\niPic iPic 是一个 Markdown 图床上传工具，将你的图片上传到你的图床上后，你可以得到一个 markdown 格式的图片文本，然后你可以直接复制到你的编辑器中。\n你只需要在偏好设置里面设置好你自己图床相关的参数就可以很方便的上传图片到图床了。\niPic Mover iPic Mover 可以一键将已有 Markdown 文件中所有图片迁移至新图床。批量上传图片、图床搬家，从未如此简单。\n有了 iPic Mover，你就可以将你以前的图片统统放到自己的图床了，再也不怕别人给你加防盗链了。\n美化排版 美化排版我的目的是要将文章复制到公众号里，公众号是需要讲颜值的，这样别人读起来才会舒服，读完率才会高。\n自定义主题 基于以上目的，如果你觉得默认的主题不太好看，Typora 默认还提供了好几种主题，你可以切换你自己喜欢的。\ntypora 默认提供了大概五个主题，你可以进行切换选择，如果你觉得这几个还不够好看，那么你可以去主题市场下载更多好看的主题。\n如果你对主题市场的主题还不满意，可以手写一份 CSS，打造自己的主题。\nMdnice 另外一个 markdown 美化排版的工具就是大名鼎鼎的 mdnice，提供了将近 20 种主题：\n另外这个工具还支持格式化文档和微信外链转脚注的功能，这对于做公众号的同学来说非常的友好。也强烈推荐大家去尝试一下。\n后记 以上就是我完成一篇公众号文章所需要用到的一些工具以及使用方法，我相信这些工具可以令你在写文章的时候不会为了工具不好用而烦恼，也不会为了写出来的文章排版不好看被读者吐槽。\n如果你有更好的写作工具或者使用方法，欢迎留言给我，咱们一起讨论。\n我是桃翁，一个爱思考的前端er，期待你的关注。如果这篇文章能给你带来收获，希望你能点赞转发。\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/319/","summary":"前言 写作是我一直都提倡每个人去做的一件事情，也许你是通过写作来进行总结，也许你是通过写作生计，也许像我一样写文章提升自己的影响力，不管怎么样，工欲善其事必先利其器，今天我将两年以来最好用的一套写作软件配置介绍给大家。\n在这篇文章中你可以了解到三个工具：\n最好用的 markdown 写作编辑器 mac 平台专属的图床工具 选取合适的工具美化排版 写作软件(Typora) 我使用过很多的 markdown 编辑器，bear、MWeb、UIysses、印象笔记等等，每个都号称最专业的 markdown 软件，但是这些软件对于图片的处理都不是特别满足我的需求。\n只有 typora，让文字和图片完美的结合在一起，并且支持将文章复制到其他平台。\n接下来，我将介绍一下 Typora 吸引我的几个地方：\n1. 所见即所得的特性 实时预览，不需要分两栏。\n2. 自定义主题。 你可以从官网下载主题，或者自己写主题。\n3. 大纲与文章目录。 自动识别标题，展示出目录。\n4. 可以方便的将图片自动上传到自己的图床上 大部分的写作编辑器都需要手动的去将图片上传到图床上，然后再把链接写到编辑器来，这样来回切换很麻烦。typora 可以自动识别图片然后直接上传上自己的图床上。\n当你把图片直接拖到编辑器，或者说截屏之后复制到编辑器的时候，就会让你选择是否上传图片，点击上传图片就可以直接上传到图床上，然后将链接替换成图床的链接。\n你只需要在偏好设置图像的上传服务设置为 iPic 即可，下面我会介绍 iPic。\n上传服务这里还可以选择自定义命令，也就是说你可以自己写一个上传图片的 shell 然后上传到自己的图床上，图片处理非常的强大。\n5. 可以直接复制富文本格式(包括主题样式)到公众号或者其他支持富文本的地方。 公众号后台排版其实不是特别好用，另外我们程序员往往喜欢写 markdown 而不是富文本，所以就需要一个将 markdown 转富文本的一个工具，typora 在这方面也很擅长。\n图片处理(iPic 和 iPic Move) 怎么获得免费图床 对于图床这个东西，我觉得还是用自己的比较好，或者说付费的图床，而不是选用网上一些免费的，比如微博图床，其他网站的图床(比如掘金)，使用别人的图床虽然免费，但是一旦加了防盗链，你想迁移图片就非常的麻烦(我就踩过这个坑)，那么这个时候免费的其实就更贵了。\n所以很早我就开始研究怎么能用上专业的，自己的图床，我就发现了七牛云这个良心云服务商。七牛云对于新用户免费送 10 个 G 的空间，你可以将图片通过对象存储的方式存在七牛云里。而且这些图片还是都可以增加 CDN 的。\n具体如何去创建自己的对象存储空间，你可以参考官网教程。\n有了图床，如何将图片上传到图床上面去呢？在 Mac 下 iPic 就是一个很好的工具。\niPic iPic 是一个 Markdown 图床上传工具，将你的图片上传到你的图床上后，你可以得到一个 markdown 格式的图片文本，然后你可以直接复制到你的编辑器中。","title":"Mac写作环境搭建"},{"content":"前言 离职原因看我这篇文章吧：离开蘑菇街后，我最近的一些想法，然后不得不去找工作恰饭呀。\n我目前面了五家公司：滴滴、蚂蚁、拼多多、酷家乐、字节跳动，拼多多和酷家乐基本已拿到 offer，蚂蚁二面完了，滴滴和字节即将三面，我先把我已经面过的面经先总结出来，其他的不管过没过，这周内我都会总结出来，希望能给到正在找工作同学的帮助。\n在文章里我不仅会列出面试题，还会给到一些答题建议，个人能力有限，也不能保证我回答都正确，如果有错误，希望能纠正我。\n酷家乐 酷家乐是我最早面的一家公司，还没被裁的那周二刚好面完，结果周五就被裁了，可能这就是冥冥之中吧。\n面试的部门是工具组，是酷家乐最核心的部门，四面面试官跟我说我面的组是工具团队中的最核心组，会涉及到一些图像相关的技术，比如 Tree.js、WebGL等，所以这个组其实也挺好的，感觉能学到不少技术。\n一面(电话面) 你在项目如何优化的\n我在简历里面写到了性能优化相关的，所以这个问题。\n你做的项目有什么值得说的\n基本上就是考察项目的亮点，可以说一些项目难点是如何解决的，或者介绍一些项目中用到的牛逼的技术。\nTs 有什么优势\n讲道理所有现在在网上能查到的优势都是得益于静态语言的优势。\ntype 和 interface 的区别\n这是一个高频题，如果考察 TS，这应该是最容易考察的，网上也都能查到相关的资料，但是很可能忽略一个点：type 只是一个类型别名，并不会产生类型。所以其实 type 和 interface 其实不是同一个概念，其实他们俩不应该用来比较的，只是有时候用起来看着类似。\nReact 事件机制\n我觉得需要答的点：\nReact 为什么要用合成事件 事件机制：注册和分发的过程。这里面至少要说出事件注册都是在元素的最顶层 document 节点上。 参考资料：一文吃透 React 事件机制原理\n聊聊 React 的 diff\n聊 diff 建议先看看我之前写过的一篇关于虚拟 DOM 的文章：从 React 历史的长河里聊虚拟DOM及其价值，有助于理解 diff 的意义。\ndiff 的细节可以看我之前写的：详解 React 16 的 Diff 策略\nReact 优化\n可以看之前我写的 React 函数式组件性能优化指南，对于类组件也有对应的 API。\n怎么理解闭包\n基础中的基础，虽然社招考得不多，但是如果连闭包都理解不了，应该会减分不少。闭包由于在规范里没有定义，所以很多人下的定义不一样，理解的角度也不同，但是自己要有一套正确的理解方式，如果按照我的理解 JavaScript 里面所有的函数都是闭包，因为有全局环境，所有的函数都可以访问全局变量。\n节流怎么实现的\n防抖和节流的代码还是需要会手写的，这也是一个闭包的例子，\n原型，class B 继承 class A 翻译成 es5 应该是什么样子\n说实话，我觉得这道题其实蛮有水平的，即考察了如何写出一个好的继承方式，也对 new 过程进行了考察，还对考察了对 Class 的理解。\n注意的点：class 是有重载功能的，怎么在子类的构造函数里面调用 super\n二面(现场面) react 的基本原理\nUI = f(state) ，虚拟 DOM、diff 策略、setState\nreact 如何做性能优化\n这个题也是高频，见一面回答\nredux 的重点概念\nstore、reduce、action、actionCreater、dispatch\n聊一聊 React 的生命周期\n尽量把 React 15 和 16 的进行对比，然后 16 为什么要准备废除那几个生命周期，以及新增的生命周期可以进行替代。\n这个图好好的理解一下\n聊一聊 hooks 怎么处理生命周期\n讲道理函数式组件是没有生命周期的，但是如何去模拟类组件的生命周期的作用，都是在 useEffect 里面进行操作的，因为生命周期里面所做的基本都是副作用，放到 useEffect 里是最合适的，专门用来处理副作用。\n笔试题一\nconst a = { b ： 3} function foo(obj) { obj.b = 5 return obj } const aa = foo(a) console.log(a.b) console.log(aa.b) 笔试题二： function Ofo() {} function Bick() { this.name = \u0026#39;mybick\u0026#39; } var myBick = new Ofo() Ofo.prototype = new Bick() var youbick = new Bick() console.log(myBick.name) console.log(youbick.name) 笔试题三：考察盒子模型和 box-sizing 属性，判断元素的尺寸和颜色。\n实现一个 fill 函数，不能用循环。\n考察递归\n用 ES5 实现私有变量\n考察闭包的使用\n三面(现场面) 简历里面的性能优化是如何做的\n减少请求频率、图片压缩、React.memo、React.useMemo\nclass 组件里面如何做性能优化(因为前面我说了用 React.memo 做了性能优化)\nshouldComponentUpdate(简称 SCU)。SCU 跟 immutable 强相关，一定要好好理解 react 的 immutable，否则很可能理解不了为什么不能直接去修改 state，然后再去 setState，以及 redux 的 reducer 要返回一个新的对象。\n实现一个 Typescript 里的 Pick\ntype Pick\u0026lt;T, K extends keyof T\u0026gt; = { [P in K]: T[P] }\n手写 Promise.all\n手写并发只能 10 个\n算法题，怎么判断单链表相交。\n很多种方法，我当时说的是最后一个节点如果相同，那么就代表相交。\n算法题，怎么找到第一个相交的节点。\n同时遍历两个链表到尾部，同时记录两个链表的长度。若两个链表最后的一个节点相同，则两个链表相交。有两个链表的长度后，我们就可以知道哪个链表长，设较长的链表长度为len1,短的链表长度为len2。则先让较长的链表向后移动(len1-len2)个长度。然后开始从当前位置同时遍历两个链表，当遍历到的链表的节点相同时，则这个节点就是第一个相交的节点。\n这是我刚想到的一种方式，不过当时面试的时候我记得好像更简单，但是想不起来了。\n四面(现场面) 你觉得你在公司人缘怎么样\n你觉得你为你们小组做了什么贡献\n为什么要离职\n除了我们公司还投了其他公司吗\n薪资和层级有什么要求\n如何垂直水平居中\n你看过开源库的源码吗？\n那你聊聊 React 的源码，把你记得起的讲一讲\n我看过 React 的一部分源码的，所以关于 React 源码更新部分的东西，应该基本都能说个大概。\nFiberNode 有哪些属性\nstadeNode 有什么用？\n还有一些技术问题想不起来了\n小结 酷家乐面试体验还是不错的，我是一面电话面，面完觉得 OK 之后就叫到公司去现场面试，6 点半下班了就骑车去了酷家乐，七点开始面试，一口气面完了三面，饭都没来得及吃，不过面试官很好给我倒了水。\n感觉面试官对我的项目似乎不太敢兴趣，很少问项目的东西，可能由于他们是工具组，连我简历里面组件库相关的也没面，考察基础的比较多，基础考察得比较全面。\n但是由于考虑到我之前做的项目复杂性不够，以及工作年限的问题，给到的评级不高，导致薪资也不是特别高，但是已经是这个评级的顶峰了，要是没有更好的 offer 酷家乐还是非常值得去的，特别是工具组。\n拼多多 一面 react 16 生命周期有什么改变\ncomponentWillMount，componentWillReceiveProps，componentWillUpdate 准备废除，新增了 static getDerivedStateFromProps 和 getSnapshotBeforeUpdate\n我还详细的介绍了为什么要用 getDerivedStateFromProps 来代替即将废除的三个生命周期，主要是16 版本 render 之前的生命周期可能会被多次执行，具体的可看我的这篇文章：Deep In React之浅谈 React Fiber 架构(一)\n详细的介绍一下 getDerivedStateFromProps\n你在项目中如何做性能优化的\nflex: 0 1 auto; 是什么意思？\nflex 这个属性常考题，好好把阮老师的那篇 flex 语法篇看完 flex 的面试题基本没问题。\nless 的 \u0026amp; 代表什么？\n算法题：求最大公共前缀，如 ['aaafsd', 'aawwewer', 'aaddfff'] =\u0026gt; 'aa'\n不能调试，全靠编程素养，只能面试官才能运行。\ninterface 和 type 的区别\n又考了，上面有回答\n有用状态管理吗？\n我常用的是 redux 和 dva，然后再聊了聊区别已经 redux 的理念\n有用 ssr 吗？\n没用过\nnode 熟悉吗？\n写得少\n二面 class 组件与函数式组件的区别\n生命周期、设计理念，感觉这道题比较开发，可以看看 dan 的这篇：函数式组件与类组件有何不同？\ncss 优先级\nimportant \u0026gt; 内联 \u0026gt; ID选择器 \u0026gt; 类选择器 \u0026gt; 标签选择器\n避免 css 全局污染。\n我常用的 css modules\ncss modules 的原理\n生成唯一的类名\n有一个a标签，如何动态的决定他的样式。\n我说了先写几个 css，然后外部传一个前缀的方式。面试官问了都要这样吗？我说可以通过 context 的方式，就不需要每个组件都传了。\nimport 和 require 导入的区别\n高频题，考察 ES6 模块和 CommonJS 模块 的区别。关键点：1. 前者是值的引用，后者是值的拷贝。 2.前者编译时输出接口，后者运行时加载。\n推荐文章：前端模块化：CommonJS,AMD,CMD,ES6\nrequire 有什么性能问题\n好好想想上一个题的区别就能想到了\n组件库如何做按需加载\n我常用的是babel-plugin-import\nwebpack 如何实现动态加载\n讲道理 webpack 动态加载就两种方式：import()和 require.ensure，不过他们实现原理是相同的。\n我觉得这道题的重点在于动态的创建 script 标签，以及通过 jsonp 去请求 chunk，推荐的文章是：webpack是如何实现动态导入的\nreact 里有动态加载的 api 吗？\nReact.lazy\nReact.lazy 的原理是啥？\nwebpack 能动态加载 require 引入的模块吗？\n应该是不能的，前面说了，webpack 支持动态导入基本上只能用 import() 和require.ensure。\nrequire 引入的模块 webpack 能做 Tree Shaking 吗？\n不能，Tree Shaking 需要静态分析，只有 ES6 的模块才支持。\n设计一个input 组件需要哪些属性。我说了 value 、defaultValue、onChange\nvalue 的类型是什么？\nonChange 怎么规定 value 的类型\ninterface 和 type 的区别\n写一个 promise 重试函数，可以设置时间间隔和次数。function foo(fn, interval, times) {}\n常规题，网上有参考答案的。\n三面 组件平台有哪些功能？\n详细的跟我讨论组件平台的设计，因为他们也想做一个组件平台。\n实现一个 redux\n实现 createStore 的功能，关键点发布订阅的功能，以及取消订阅的功能。\n用 ts 实现一个 redux\n简单的加上类型，我写的类型没有 redux 源码那么复杂，当时写得比较简单。\n小节 一面的时候其实我自己感觉答得不是特别好，连 less 的语法都忘记了，当时面下来感觉要凉了，平时写 样式的时间确实太少了。\n很幸运的时候还是给我过了，二面面试官我觉得面得很专业，基本都是从浅入深的考察知识的深度，我感觉答得还可以，因为我是属于那种会的就尽量深一点，暂时不用的就很少花时间，所以我目前知识的广度很有欠缺，对于 node、ssr、移动端、小程序这些方面我的能力都很薄弱，但是面试的时候如果你不熟悉，直接说不熟悉就行，他就不会面了。\n我准备面试之前对我自己的要求就是，我会的尽量不会很快就被问倒，所以我重点复习了我擅长的知识。\n面下来感觉拼多多也没有想象中那么难，虽然拼多多薪资算行业内高的，不过拼多多在上海，我在杭州，另外就是强制上 6 天班，我比较忌惮这点。考虑到我和女朋友本来就是异地，要是单休，而且节假日也会比正常的少，见面的机会就更少了。\n反正选 offer 这种事还是尽量综合考虑吧，团队、薪资、个人生活都应该考虑进去。\n最后 我是桃翁，一个爱思考的前端er，期待你的关注。\n如果你最近也在找工作，欢迎找我交流，下面是我公众号。\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/318/","summary":"前言 离职原因看我这篇文章吧：离开蘑菇街后，我最近的一些想法，然后不得不去找工作恰饭呀。\n我目前面了五家公司：滴滴、蚂蚁、拼多多、酷家乐、字节跳动，拼多多和酷家乐基本已拿到 offer，蚂蚁二面完了，滴滴和字节即将三面，我先把我已经面过的面经先总结出来，其他的不管过没过，这周内我都会总结出来，希望能给到正在找工作同学的帮助。\n在文章里我不仅会列出面试题，还会给到一些答题建议，个人能力有限，也不能保证我回答都正确，如果有错误，希望能纠正我。\n酷家乐 酷家乐是我最早面的一家公司，还没被裁的那周二刚好面完，结果周五就被裁了，可能这就是冥冥之中吧。\n面试的部门是工具组，是酷家乐最核心的部门，四面面试官跟我说我面的组是工具团队中的最核心组，会涉及到一些图像相关的技术，比如 Tree.js、WebGL等，所以这个组其实也挺好的，感觉能学到不少技术。\n一面(电话面) 你在项目如何优化的\n我在简历里面写到了性能优化相关的，所以这个问题。\n你做的项目有什么值得说的\n基本上就是考察项目的亮点，可以说一些项目难点是如何解决的，或者介绍一些项目中用到的牛逼的技术。\nTs 有什么优势\n讲道理所有现在在网上能查到的优势都是得益于静态语言的优势。\ntype 和 interface 的区别\n这是一个高频题，如果考察 TS，这应该是最容易考察的，网上也都能查到相关的资料，但是很可能忽略一个点：type 只是一个类型别名，并不会产生类型。所以其实 type 和 interface 其实不是同一个概念，其实他们俩不应该用来比较的，只是有时候用起来看着类似。\nReact 事件机制\n我觉得需要答的点：\nReact 为什么要用合成事件 事件机制：注册和分发的过程。这里面至少要说出事件注册都是在元素的最顶层 document 节点上。 参考资料：一文吃透 React 事件机制原理\n聊聊 React 的 diff\n聊 diff 建议先看看我之前写过的一篇关于虚拟 DOM 的文章：从 React 历史的长河里聊虚拟DOM及其价值，有助于理解 diff 的意义。\ndiff 的细节可以看我之前写的：详解 React 16 的 Diff 策略\nReact 优化\n可以看之前我写的 React 函数式组件性能优化指南，对于类组件也有对应的 API。\n怎么理解闭包\n基础中的基础，虽然社招考得不多，但是如果连闭包都理解不了，应该会减分不少。闭包由于在规范里没有定义，所以很多人下的定义不一样，理解的角度也不同，但是自己要有一套正确的理解方式，如果按照我的理解 JavaScript 里面所有的函数都是闭包，因为有全局环境，所有的函数都可以访问全局变量。\n节流怎么实现的","title":"拼多多和酷家乐面试经历总结"},{"content":"前言 被裁之后我就一直在家复习，面试，所以就一直没有写文章，没有太多心思搭理公众号，现在也拿了两个 offer 了，所以开始回到正途。\n胎死腹中的 Vue 3.0 Beta 文章 4 月 17 日，早上我收到了浪浪(浪里行舟)的消息，给我发了一个微博消息，尤大在微博上宣布发布 Vue 3.0 Beta 了，然后跟我说这是热点，让我写一篇文章，我就暂停了前一天晚上定时发的文章，准备写一篇详细介绍 Vue 3.0 Beta 所发布的东西。\n所以当天我早早的来到了公司，希望在上班前能搞定，然后就开始翻阅 vue-next 的文档以及草案，想从根源去探究 vue 3.0 Beta 能给我们带来什么。\n没过多久，在我们技术部的群里有人就 @ 了所有人，让我们去看下邮件，邦哥(化名)发了一封邮件，每个人都要看一下。\n我由于还在写文章，收集资料，就没那么快去看邮件，不一会儿，突然安静的 9L 就开始叽叽喳喳，议论纷纷，这时我感觉应该是一件大事儿。\n我就迅速打开了邮件，第一段就描述着公司在今天要优化 140+ 的人，第二段描述着公司的核心方向，直播和品牌特卖，在这个时候，我已经能意识到，我可能要被优化了，也许我们组绝大部分人都会被优化，因为我们组基本是做内部系统的，跟核心业务极大的偏离。\n我也加入到他们叽叽喳喳的氛围中，放下了手上所有的事情，和旁边的同事讨论着裁员的事情。\n被裁 大概在十一点左右的时候，我左手边的一个应届生小声的说，我凉了，HR 让我去 11 楼一趟，然后我将这个事情传达给了我们的一个小群，以及我对接的后端，并询问他他们组的情况。\n没想到聊着聊着，他跟我留下了一句，我中了，我先上去了。\n接下来就眼睁睁的看着身边的人一个一个的都被喊上去，从工作一年的到两年的(包括我)，再到四年的，以及更多的。\n到中午的时候，我们组只留下一个人没沟通了，是一个工作了四年多的老员工了，就坐在我旁边，他很慌，因为大家都拿着赔偿金(n+1.5)，他也想有。\n一直等到一点、两点、三点、四点，五点，他放弃了，成为了我们这层楼我们组唯一个留下的。\n后面就开始办理离职手续，交接项目，晚上我们整个前端到旁边的修舍酒店进行聚餐，虽然离别时悲伤的，但是被裁的人拿到高于常规的赔偿，是幸运的。\n这次裁员对于应届生来说是最惨的，他们工作年限不久，不到一年，对于社招来说，是非常的吃亏的。工作年限不够，而且整个大环境来说又不好，现在又被裁没有工作，大公司很少会招工作年限这么短的，去小公司又有可能被压价。\n唉，不想写这些消极情绪的了，在这被裁的两周里，空闲下来我也思考了很多，接下来说一些我的见解，希望能给到大家帮助。\n定时更新简历 之前我在知乎上看到一个 HR 的回答里面说到，不管你跳不跳槽，其实都可以定时更新自己的简历。\n我是比较赞成他的说法的，我倾向于半年更新一次简历，因为在更新简历的过程中你会去思考，去总结你在之前的这半年里，你做了什么有价值的东西，有没有什么亮点。\n一旦发现在这半年里没有做出什么成绩，那么你也许需要在后面的时间里调整自己的工作方式，思考为什么没有值得写在简历里面的东西，然后给自己定目标，做规划，尽量在半年后可以有一些亮点可以跟别人吹。\n多做总结 总结这个东西，其实每个人都会觉得应该做，但是很少人真正的去执行，也许是因为太忙，也许是因为懒，也许是因为觉得他不重要。\n我相信很多人会有这样的感觉，当别人问你做的项目有没有什么难度，在做的时候遇到了什么困难，以及怎么解决的。你会感觉都已经做出来了，感觉没什么难的了。\n其实在我看来，这其实就是没有及时的总结导致的。\n我的建议是当你遇到难题并解决之后，马上记下来，因为这个时候是你最有动力，也是最清醒的时刻，一旦你想后面有空了再记，那么基本上就是不会记了。\n另外就是每个项目完结之后也需要进行总结，遇到的问题，项目的架构，项目的价值等等，这些东西是以后可以跟面试官聊项目的资本。如果不记下来，当你写简历的时候，很可能会把关键的地方忘掉。\n忙一点的公司挺好 可能对于这一点很多人会觉得我政治不正确，觉得理想的工作不应该是朝九晚六，到点下班么。\n但是我最近在观察那些发展得好的企业，加班都比较严重，比如阿里、腾讯、字节跳动、拼多多等，当然这些公司都会给你更高的薪水。\n为什么我会绝对忙的公司其实挺好呢？主要是因为公司发展迅速，意味着就会扩大生产，那么就需要更多的劳动力，但是对于招聘合适的人又是一个急不得的事儿，所以留在公司的人可能会很忙，得干超出正常一个人所干的事儿。\n这样其实你可以有更多需求做，也许是重复的，也许是新的东西，不管怎么样，一旦你代码写得多，你能更可能发现到别人发现不到的痛点，也会给公司做更多的贡献，其实对于成长是有帮助的。\n可能有人会觉得我只是一个打工的，在规定的时间把东西做完，下班时间再去学习，其实这种方式对于大部分人来说不是特别的高效，因为学习这件事其实是反人性的，下班了也许你更多的时间会用于其他娱乐中。\n再说一下对于比较闲的公司，也许很多人都想去，比如外企，相对国内的大厂来说要轻松很多，但是闲的公司很容易让人养成懒的习惯，特别是对于工作不久的，一旦养成了懒惰的习惯，就会危害自己一辈子。\n我希望这一点不要跟我争论，如果你希望去不忙的公司，你去就行了，也不用说服我。\n可以想想之前甲骨文裁员的时候，那些老员工的无奈。\n结语 蘑菇街还是一家很有良心的公司，我也很感谢公司给我带来的成长，希望蘑菇街能越来越好。\n这次裁员其实对于我来说影响不是特别的大，因为我其实在工作期间会偶尔出去其他公司面试，面试的目的其实不仅仅是想换份工作，另外主要也想看看自己在面试中发现自己哪些不足，然后好好的改进。\n刚好在裁员的那一周，我也过了一家杭州 1000 人左右的公司，但是觉得给的薪资不是特别满意，所以我被裁之后就安心在家复习，继续投一些大点的公司。\n投递的公司有蚂蚁、滴滴、字节跳动，拼多多(已经面完，可拿 offer)，没拿到 offer 的也都在流程中(二面或者三面)，基本上还没有挂过。\n后面我会将我最近的面试题总结下来，以及我是如何复习的，希望能给到正在找工作或者想找工作的人帮助。\n我是桃翁，期待你的关注\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/317/","summary":"前言 被裁之后我就一直在家复习，面试，所以就一直没有写文章，没有太多心思搭理公众号，现在也拿了两个 offer 了，所以开始回到正途。\n胎死腹中的 Vue 3.0 Beta 文章 4 月 17 日，早上我收到了浪浪(浪里行舟)的消息，给我发了一个微博消息，尤大在微博上宣布发布 Vue 3.0 Beta 了，然后跟我说这是热点，让我写一篇文章，我就暂停了前一天晚上定时发的文章，准备写一篇详细介绍 Vue 3.0 Beta 所发布的东西。\n所以当天我早早的来到了公司，希望在上班前能搞定，然后就开始翻阅 vue-next 的文档以及草案，想从根源去探究 vue 3.0 Beta 能给我们带来什么。\n没过多久，在我们技术部的群里有人就 @ 了所有人，让我们去看下邮件，邦哥(化名)发了一封邮件，每个人都要看一下。\n我由于还在写文章，收集资料，就没那么快去看邮件，不一会儿，突然安静的 9L 就开始叽叽喳喳，议论纷纷，这时我感觉应该是一件大事儿。\n我就迅速打开了邮件，第一段就描述着公司在今天要优化 140+ 的人，第二段描述着公司的核心方向，直播和品牌特卖，在这个时候，我已经能意识到，我可能要被优化了，也许我们组绝大部分人都会被优化，因为我们组基本是做内部系统的，跟核心业务极大的偏离。\n我也加入到他们叽叽喳喳的氛围中，放下了手上所有的事情，和旁边的同事讨论着裁员的事情。\n被裁 大概在十一点左右的时候，我左手边的一个应届生小声的说，我凉了，HR 让我去 11 楼一趟，然后我将这个事情传达给了我们的一个小群，以及我对接的后端，并询问他他们组的情况。\n没想到聊着聊着，他跟我留下了一句，我中了，我先上去了。\n接下来就眼睁睁的看着身边的人一个一个的都被喊上去，从工作一年的到两年的(包括我)，再到四年的，以及更多的。\n到中午的时候，我们组只留下一个人没沟通了，是一个工作了四年多的老员工了，就坐在我旁边，他很慌，因为大家都拿着赔偿金(n+1.5)，他也想有。\n一直等到一点、两点、三点、四点，五点，他放弃了，成为了我们这层楼我们组唯一个留下的。\n后面就开始办理离职手续，交接项目，晚上我们整个前端到旁边的修舍酒店进行聚餐，虽然离别时悲伤的，但是被裁的人拿到高于常规的赔偿，是幸运的。\n这次裁员对于应届生来说是最惨的，他们工作年限不久，不到一年，对于社招来说，是非常的吃亏的。工作年限不够，而且整个大环境来说又不好，现在又被裁没有工作，大公司很少会招工作年限这么短的，去小公司又有可能被压价。\n唉，不想写这些消极情绪的了，在这被裁的两周里，空闲下来我也思考了很多，接下来说一些我的见解，希望能给到大家帮助。\n定时更新简历 之前我在知乎上看到一个 HR 的回答里面说到，不管你跳不跳槽，其实都可以定时更新自己的简历。\n我是比较赞成他的说法的，我倾向于半年更新一次简历，因为在更新简历的过程中你会去思考，去总结你在之前的这半年里，你做了什么有价值的东西，有没有什么亮点。\n一旦发现在这半年里没有做出什么成绩，那么你也许需要在后面的时间里调整自己的工作方式，思考为什么没有值得写在简历里面的东西，然后给自己定目标，做规划，尽量在半年后可以有一些亮点可以跟别人吹。\n多做总结 总结这个东西，其实每个人都会觉得应该做，但是很少人真正的去执行，也许是因为太忙，也许是因为懒，也许是因为觉得他不重要。\n我相信很多人会有这样的感觉，当别人问你做的项目有没有什么难度，在做的时候遇到了什么困难，以及怎么解决的。你会感觉都已经做出来了，感觉没什么难的了。\n其实在我看来，这其实就是没有及时的总结导致的。\n我的建议是当你遇到难题并解决之后，马上记下来，因为这个时候是你最有动力，也是最清醒的时刻，一旦你想后面有空了再记，那么基本上就是不会记了。\n另外就是每个项目完结之后也需要进行总结，遇到的问题，项目的架构，项目的价值等等，这些东西是以后可以跟面试官聊项目的资本。如果不记下来，当你写简历的时候，很可能会把关键的地方忘掉。\n忙一点的公司挺好 可能对于这一点很多人会觉得我政治不正确，觉得理想的工作不应该是朝九晚六，到点下班么。\n但是我最近在观察那些发展得好的企业，加班都比较严重，比如阿里、腾讯、字节跳动、拼多多等，当然这些公司都会给你更高的薪水。\n为什么我会绝对忙的公司其实挺好呢？主要是因为公司发展迅速，意味着就会扩大生产，那么就需要更多的劳动力，但是对于招聘合适的人又是一个急不得的事儿，所以留在公司的人可能会很忙，得干超出正常一个人所干的事儿。\n这样其实你可以有更多需求做，也许是重复的，也许是新的东西，不管怎么样，一旦你代码写得多，你能更可能发现到别人发现不到的痛点，也会给公司做更多的贡献，其实对于成长是有帮助的。\n可能有人会觉得我只是一个打工的，在规定的时间把东西做完，下班时间再去学习，其实这种方式对于大部分人来说不是特别的高效，因为学习这件事其实是反人性的，下班了也许你更多的时间会用于其他娱乐中。\n再说一下对于比较闲的公司，也许很多人都想去，比如外企，相对国内的大厂来说要轻松很多，但是闲的公司很容易让人养成懒的习惯，特别是对于工作不久的，一旦养成了懒惰的习惯，就会危害自己一辈子。\n我希望这一点不要跟我争论，如果你希望去不忙的公司，你去就行了，也不用说服我。","title":"离开蘑菇街后，我最近的一些想法"},{"content":"译者序 最近在研究 JavaScript 基础性的东西，但是看到对于执行上下文的解释我发现有两种，一种是执行上下文包含：scope(作用域)、variable object(变量对象)、this value(this 值)，另外一个种是包含：lexical environment(词法环境)、variable environment(变量环境)、this value(this 值)。\n后面我查阅了不少博客以及 ES3 和 ES5 的规范才了解到，第一种是 ES3 的规范，经典书籍《JavaScript高级程序设计》第三版就是这样解释的，也是网上广为流传的一种，另一种是 ES5 的规范。\n然后我接着又去翻了 ES2018 中的，发现又有变化了，已经增加了更多的内容了，考虑到这部分内容颇为复杂，准备后面再进行总结分享，查资料的时候看到这篇讲执行上下文(ES5 )的还不错，所以就翻译出来先分享给大家。\n以后看到变量对象、活动对象知道是 ES3 里面的内容，而如果是词法环境、变量环境这种词就是 ES5 以后的内容。\n以下是正文：\n什么是执行上下文？ 简而言之，执行上下文是计算和执行 JavaScript 代码的环境的抽象概念。每当 Javascript 代码在运行的时候，它都是在执行上下文中运行。\n执行上下文的类型 JavaScript 中有三种执行上下文类型。\n全局执行上下文 — 这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 this 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。 函数执行上下文 — 每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。 Eval 函数执行上下文 — 执行在 eval 函数内部的代码也会有它属于自己的执行上下文，但由于 JavaScript 开发者并不经常使用 eval，所以在这里我不会讨论它。 执行栈 执行栈，也就是在其它编程语言中所说的“调用栈”，是一种拥有 LIFO（后进先出）的数据结构，被用来存储代码运行时创建的所有执行上下文。\n当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。\n引擎会执行处于栈顶的执行上下文的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。\n让我们通过下面的代码示例来理解：\nlet a = \u0026#39;Hello World!\u0026#39;; functionfirst() { console.log(\u0026#39;Inside first function\u0026#39;); second(); console.log(\u0026#39;Again inside first function\u0026#39;); } functionsecond() { console.log(\u0026#39;Inside second function\u0026#39;); } first(); console.log(\u0026#39;Inside Global Execution Context\u0026#39;); 上述代码的执行上下文栈。\n当上述代码在浏览器加载时，JavaScript 引擎创建了一个全局执行上下文并把它压入当前执行栈。当遇到 first() 函数调用时，JavaScript 引擎为该函数创建一个新的执行上下文并把它压入当前执行栈的顶部。\n当从 first() 函数内部调用 second() 函数时，JavaScript 引擎为 second() 函数创建了一个新的执行上下文并把它压入当前执行栈的顶部。当 second() 函数执行完毕，它的执行上下文会从当前栈弹出，并且控制流程到达下一个执行上下文，即 first() 函数的执行上下文。\n当 first() 执行完毕，它的执行上下文从栈弹出，控制流程到达全局执行上下文。一旦所有代码执行完毕，JavaScript 引擎从当前栈中移除全局执行上下文。\n怎么创建执行上下文？ 到现在，我们已经看过 JavaScript 怎样管理执行上下文了，现在让我们了解 JavaScript 引擎是怎样创建执行上下文的。\n创建执行上下文有两个阶段：1) 创建阶段 和 2) 执行阶段。\n创建阶段 在 JavaScript 代码执行前，执行上下文将经历创建阶段。在创建阶段会发生三件事：\nthis 值的决定，即我们所熟知的 this 绑定。 创建词法环境组件。 创建变量环境组件。 所以执行上下文在概念上表示如下：\nExecutionContext = { ThisBinding = \u0026lt;this value\u0026gt;, LexicalEnvironment = { ... }, VariableEnvironment = { ... }, } this 绑定：** 在全局执行上下文中，this 的值指向全局对象。(在浏览器中，this引用 Window 对象)。\n在函数执行上下文中，this 的值取决于该函数是如何被调用的。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined（在严格模式下）。例如：\nlet foo = { baz: function() { console.log(this); } } foo.baz(); // \u0026#39;this\u0026#39; 引用 \u0026#39;foo\u0026#39;, 因为 \u0026#39;baz\u0026#39; 被 // 对象 \u0026#39;foo\u0026#39; 调用 let bar = foo.baz; bar(); // \u0026#39;this\u0026#39; 指向全局 window 对象，因为 // 没有指定引用对象 词法环境 官方的 ES6 文档把词法环境定义为\n词法环境是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义标识符和具体变量和函数的关联。一个词法环境由环境记录器和一个可能的引用outer词法环境的空值组成。\n简单来说词法环境是一种持有标识符—变量映射的结构。（这里的标识符指的是变量/函数的名字，而变量是对实际对象[包含函数类型对象]或原始数据的引用）。\n现在，在词法环境的内部有两个组件：(1) 环境记录器和 (2) 一个外部环境的引用。\n环境记录器是存储变量和函数声明的实际位置。 外部环境的引用意味着它可以访问其父级词法环境（作用域）。 译者注：外部环境已经跟 ES3 规定的作用域的作用类似\n词法环境有两种类型：\n全局环境（在全局执行上下文中）是没有外部环境引用的词法环境。全局环境的外部环境引用是 null。它拥有内建的 Object/Array/等、在环境记录器内的原型函数（关联全局对象，比如 window 对象）还有任何用户定义的全局变量，并且 this的值指向全局对象。 在函数环境中，函数内部用户定义的变量存储在环境记录器中。并且引用的外部环境可能是全局环境，或者任何包含此内部函数的外部函数。 环境记录器也有两种类型（如上！）：\n声明式环境记录器存储变量、函数和参数。 对象环境记录器用来定义出现在全局上下文中的变量和函数的关系。 简而言之，\n在全局环境中，环境记录器是对象环境记录器。 在函数环境中，环境记录器是声明式环境记录器。 注意 — 对于函数环境，声明式环境记录器还包含了一个传递给函数的 arguments 对象（此对象存储索引和参数的映射）和传递给函数的参数的 length。\n抽象地讲，词法环境在伪代码中看起来像这样：\nGlobalExectionContext = { LexicalEnvironment: { EnvironmentRecord: { Type: \u0026#34;Object\u0026#34;, // 在这里绑定标识符 } outer: \u0026lt;null\u0026gt; } } FunctionExectionContext = { LexicalEnvironment: { EnvironmentRecord: { Type: \u0026#34;Declarative\u0026#34;, // 在这里绑定标识符 } outer: \u0026lt;Global or outer function environment reference\u0026gt; } } 变量环境： 它同样是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。\n如上所述，变量环境也是一个词法环境，所以它有着上面定义的词法环境的所有属性。\n在 ES6 中，词法环境组件和变量环境的一个不同就是前者被用来存储函数声明和变量（let 和 const）绑定，而后者只用来存储 var 变量绑定。\n我们看点样例代码来理解上面的概念：\nlet a = 20; const b = 30; var c; function multiply(e, f) { var g = 20; return e * f * g; } c = multiply(20, 30); 执行上下文看起来像这样：\nGlobalExectionContext = { ThisBinding: \u0026lt;Global Object\u0026gt;, LexicalEnvironment: { EnvironmentRecord: { Type: \u0026#34;Object\u0026#34;, // 在这里绑定标识符 a: \u0026lt; uninitialized \u0026gt;, b: \u0026lt; uninitialized \u0026gt;, multiply: \u0026lt; func \u0026gt; } outer: \u0026lt;null\u0026gt; }, VariableEnvironment: { EnvironmentRecord: { Type: \u0026#34;Object\u0026#34;, // 在这里绑定标识符 c: undefined, } outer: \u0026lt;null\u0026gt; } } FunctionExectionContext = { ThisBinding: \u0026lt;Global Object\u0026gt;, LexicalEnvironment: { EnvironmentRecord: { Type: \u0026#34;Declarative\u0026#34;, // 在这里绑定标识符 Arguments: {0: 20, 1: 30, length: 2}, }, outer: \u0026lt;GlobalLexicalEnvironment\u0026gt; }, VariableEnvironment: { EnvironmentRecord: { Type: \u0026#34;Declarative\u0026#34;, // 在这里绑定标识符 g: undefined }, outer: \u0026lt;GlobalLexicalEnvironment\u0026gt; } } 注意 — 只有遇到调用函数 multiply 时，函数执行上下文才会被创建。\n可能你已经注意到 let 和 const 定义的变量并没有关联任何值，但 var 定义的变量被设成了 undefined。\n这是因为在创建阶段时，引擎检查代码找出变量和函数声明，虽然函数声明完全存储在环境中，但是变量最初设置为 undefined（var 情况下），或者未初始化（let 和 const 情况下）。\n这就是为什么你可以在声明之前访问 var 定义的变量（虽然是 undefined），但是在声明之前访问 let 和 const 的变量会得到一个引用错误。\n这就是我们说的变量声明提升。\n执行阶段 这是整篇文章中最简单的部分。在此阶段，完成对所有这些变量的分配，最后执行代码。\n注意 — 在执行阶段，如果 JavaScript 引擎不能在源码中声明的实际位置找到 let 变量的值，它会被赋值为 undefined。\n结论 我们已经讨论过 JavaScript 程序内部是如何执行的。虽然要成为一名卓越的 JavaScript 开发者并不需要学会全部这些概念，但是如果对上面概念能有不错的理解将有助于你更轻松，更深入地理解其他概念，如变量声明提升，作用域和闭包。\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/315/","summary":"译者序 最近在研究 JavaScript 基础性的东西，但是看到对于执行上下文的解释我发现有两种，一种是执行上下文包含：scope(作用域)、variable object(变量对象)、this value(this 值)，另外一个种是包含：lexical environment(词法环境)、variable environment(变量环境)、this value(this 值)。\n后面我查阅了不少博客以及 ES3 和 ES5 的规范才了解到，第一种是 ES3 的规范，经典书籍《JavaScript高级程序设计》第三版就是这样解释的，也是网上广为流传的一种，另一种是 ES5 的规范。\n然后我接着又去翻了 ES2018 中的，发现又有变化了，已经增加了更多的内容了，考虑到这部分内容颇为复杂，准备后面再进行总结分享，查资料的时候看到这篇讲执行上下文(ES5 )的还不错，所以就翻译出来先分享给大家。\n以后看到变量对象、活动对象知道是 ES3 里面的内容，而如果是词法环境、变量环境这种词就是 ES5 以后的内容。\n以下是正文：\n什么是执行上下文？ 简而言之，执行上下文是计算和执行 JavaScript 代码的环境的抽象概念。每当 Javascript 代码在运行的时候，它都是在执行上下文中运行。\n执行上下文的类型 JavaScript 中有三种执行上下文类型。\n全局执行上下文 — 这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 this 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。 函数执行上下文 — 每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。 Eval 函数执行上下文 — 执行在 eval 函数内部的代码也会有它属于自己的执行上下文，但由于 JavaScript 开发者并不经常使用 eval，所以在这里我不会讨论它。 执行栈 执行栈，也就是在其它编程语言中所说的“调用栈”，是一种拥有 LIFO（后进先出）的数据结构，被用来存储代码运行时创建的所有执行上下文。\n当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。\n引擎会执行处于栈顶的执行上下文的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。\n让我们通过下面的代码示例来理解：\nlet a = \u0026#39;Hello World!","title":"理解 JavaScript 中的执行上下文和执行栈"},{"content":"基本规范 每个文件只包含的一个 React 组件： 联系紧密的组件可以使用「命名空间」的形式； 每个文件中可包含多个纯函数组件。 始终使用 JSX 语法，不要使用 React.createElement 创建 ReactElement，以提高编写速度、可读性、可维护性（没有 JSX 转换的特殊场景例外，如在 console 中测试组件）。 文件规范 组件文件使用一致的.js或 .jsx后缀。所有组件文件的后缀名从.js或.jsx中任选其一。不应在项目中出现部分组件为.js文件，部分为.jsx的情况。\n每个存放组件的目录使用一个index.js/index.jsx以命名导出的形式暴露所有组件。同目录内的组件相互引用使用import Foo from './Foo';进行。引用其它目录的组件使用import {Foo} from '../component';进行。\n命名规范 文件名：使用大驼峰命名法（PascalCase），如 MyComponent.jsx；\n组件命名：组件名称和文件名一致，如 MyComponent.jsx 里的组件名应该是 MyComponent；一个目录的根组件使用 index.jsx 命名，以目录名称作为组件名称；\n引用命名：React 组件使用大驼峰命名法（PascalCase）；\n高阶组件使用camelCase命名。高阶组件事实上并非一个组件，而是一个“生成组件类型”的函数，因此遵守JavaScript函数命名的规范，使用camelCase命名。\n使用onXxx形式作为props中用于回调的属性名称。使用统一的命名规则用以区分props中回调和非回调部分的属性，在JSX上可以清晰地看到一个组件向上和向下的逻辑交互。\n使用withXxx或xxxable形式的词作为高阶组件的名称。高阶组件是为组件添加行为和功能的函数，因此使用如上形式的词有助于对其功能进行理解。\n带命名空间的组件 如果一个组件有许多关联子组件，可以以该组件作为命名空间编写、调用子组件。 class Form extends React.Component { // ... } class Row extends React.Component {} class Label extends React.Component {} class Input extends React.Component {} Form.Row = Row; Form.Label = Label; Form.Input = Input; export default Form; // refence Form component import Form from \u0026#39;./Form\u0026#39;; const App = ( \u0026lt;Form\u0026gt; \u0026lt;Form.Row\u0026gt; \u0026lt;Form.Label /\u0026gt; \u0026lt;Form.Input /\u0026gt; \u0026lt;/Form.Row\u0026gt; \u0026lt;/Form\u0026gt; ); 属性 属性设置 在组件行内设置属性（以便 propTypes 校验），不要在外部改变属性的值； 属性较多使用 {…this.props} 语法； // good const props = {}; props.foo = x; props.bar = y; const component = \u0026lt;Component {...props} /\u0026gt;; 属性值明确为 true 时，省略值。 属性对齐方式 属性较少时可以行内排列； 属性较多时每行一个属性，闭合标签单独成行。 // bad - too long \u0026lt;input type=\u0026#34;text\u0026#34; value={this.state.newDinosaurName} onChange={this.inputHandler.bind(this, \u0026#39;newDinosaurName\u0026#39;)} /\u0026gt; // bad - aligning attributes after the tag \u0026lt;input type=\u0026#34;text\u0026#34; value={this.state.newDinosaurName} onChange={this.inputHandler.bind(this, \u0026#39;newDinosaurName\u0026#39;)} /\u0026gt; // good \u0026lt;input type=\u0026#34;text\u0026#34; value={this.state.newDinosaurName} onChange={this.inputHandler.bind(this, \u0026#39;newDinosaurName\u0026#39;)} /\u0026gt; 属性空格 属性 = 前后不要添加空格 JSX 中的花括号前后不要添加空格。 // bad \u0026lt;Foo bar={ baz } foo = \u0026#34;bar\u0026#34; /\u0026gt; // good \u0026lt;Foo bar={baz} foo=\u0026#34;bar\u0026#34; /\u0026gt; // good { left: \u0026#39;20px\u0026#39; } 为一个对象 \u0026lt;Foo style={{ left: \u0026#39;20px\u0026#39; }} /\u0026gt; propTypes 及默认值 组件属性都应该在 propTypes 中声明类型； 始终明确指定非必选属性的默认值。 // bad function SFC({ foo, bar, children }) { return \u0026lt;div\u0026gt;{foo}{bar}{children}\u0026lt;/div\u0026gt;; } // good function SFC({ foo, bar, children }) { return \u0026lt;div\u0026gt;{foo}{bar}{children}\u0026lt;/div\u0026gt;; } SFC.propTypes = { foo: PropTypes.number.isRequired, bar: PropTypes.string, children: PropTypes.node, }; SFC.defaultProps = { bar: \u0026#39;\u0026#39;, children: null, }; 引号 JSX 属性使用双引号 \u0026quot;； JS 使用单引号 '； () 使用 多行的 JSX 使用 () 包裹，有组件嵌套时使用多行模式； // bad return (\u0026lt;div\u0026gt;\u0026lt;ComponentOne /\u0026gt;\u0026lt;ComponentTwo /\u0026gt;\u0026lt;/div\u0026gt;); // good var multilineJsx = ( \u0026lt;header\u0026gt; \u0026lt;Logo /\u0026gt; \u0026lt;Nav /\u0026gt; \u0026lt;/header\u0026gt; ); // good return ( \u0026lt;div\u0026gt; \u0026lt;ComponentOne /\u0026gt; \u0026lt;ComponentTwo /\u0026gt; \u0026lt;/div\u0026gt; ); 单行 JSX 省略 () 自闭合标签 自闭合所有没有子组件的标签； 自闭合标签 / 前留一个空格。 // bad \u0026lt;Logo\u0026gt;\u0026lt;/Logo\u0026gt; // very bad \u0026lt;Foo /\u0026gt; // bad \u0026lt;Foo /\u0026gt; // good \u0026lt;Logo /\u0026gt; 方法 事件函数用 public class fields 型 // good class Foo extends React.Component { handleClick = () =\u0026gt; { this.setState({ xxx: aaa }) } render() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; ) } } // bad class Foo extends React.Component { handleClick () { this.setState({ xxx: aaa }) } render() { return ( \u0026lt;button onClick={this.handleClick.bind(this)}\u0026gt; Click me \u0026lt;/button\u0026gt; ) } } 事件处理方法以 handle 开头，如 handleClick() {}，用 on 的作为回调做区分 组件代码组织 按照生命周期顺序组织组件的属性、方法； 方法（属性）之间空一行； render() 方法始终放在最后； 自定义方法 React API 方法之后、render() 之前； class extends React.Component 顺序： static 属性 static 方法 constructor getChildContext componentWillMount componentDidMount componentWillReceiveProps shouldComponentUpdate componentWillUpdate componentDidUpdate componentWillUnmount 点击处理函数或者其他事件处理函数，如 onClickSubmit() 或 onChangeDescription() render 的 getter 方法，如 getSelectReason() 或 getFooterContent() 可选的 render 方法，如 renderNavigation() 或 renderProfilePicture() render 定义 propTypes, defaultProps, contextTypes 代码校验工具 ESLint ESLint React Plugin ESLint JSX A11Y Plugin 参考：https://github.com/minwe/style-guide/blob/master/React.js.md\n参考：JasonBoy/javascript\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/314/","summary":"基本规范 每个文件只包含的一个 React 组件： 联系紧密的组件可以使用「命名空间」的形式； 每个文件中可包含多个纯函数组件。 始终使用 JSX 语法，不要使用 React.createElement 创建 ReactElement，以提高编写速度、可读性、可维护性（没有 JSX 转换的特殊场景例外，如在 console 中测试组件）。 文件规范 组件文件使用一致的.js或 .jsx后缀。所有组件文件的后缀名从.js或.jsx中任选其一。不应在项目中出现部分组件为.js文件，部分为.jsx的情况。\n每个存放组件的目录使用一个index.js/index.jsx以命名导出的形式暴露所有组件。同目录内的组件相互引用使用import Foo from './Foo';进行。引用其它目录的组件使用import {Foo} from '../component';进行。\n命名规范 文件名：使用大驼峰命名法（PascalCase），如 MyComponent.jsx；\n组件命名：组件名称和文件名一致，如 MyComponent.jsx 里的组件名应该是 MyComponent；一个目录的根组件使用 index.jsx 命名，以目录名称作为组件名称；\n引用命名：React 组件使用大驼峰命名法（PascalCase）；\n高阶组件使用camelCase命名。高阶组件事实上并非一个组件，而是一个“生成组件类型”的函数，因此遵守JavaScript函数命名的规范，使用camelCase命名。\n使用onXxx形式作为props中用于回调的属性名称。使用统一的命名规则用以区分props中回调和非回调部分的属性，在JSX上可以清晰地看到一个组件向上和向下的逻辑交互。\n使用withXxx或xxxable形式的词作为高阶组件的名称。高阶组件是为组件添加行为和功能的函数，因此使用如上形式的词有助于对其功能进行理解。\n带命名空间的组件 如果一个组件有许多关联子组件，可以以该组件作为命名空间编写、调用子组件。 class Form extends React.Component { // ... } class Row extends React.Component {} class Label extends React.Component {} class Input extends React.Component {} Form.Row = Row; Form.Label = Label; Form.","title":"React 代码规范"},{"content":"0. 作者以及原文介绍 作者是 Dr. Axel Rauschmayer，号称”德国阮一峰“，本文原文来自于他的博客：https://2ality.com/2020-02/understanding-types-typescript.html，不熟悉他的可以关注一下他的博客。\n1. 每个角度都从这三个问题来解释 以下三个问题对于理解类型是如何工作的非常重要，需要从这两个角度中的每一个角度来回答。\nmyVariable 的类型 MyType 意味着什么？ let myVariable: MyType = /*...*/; Sourcetype 可以分配给 TargetType 吗? let source: SourceType = /*...*/; let target: TargetType = source; TypeUnion 是如何从 Type1、 Type2 和 Type3 衍生而来的？ type TypeUnion = Type1 | Type2 | Type3; 2. 角度 1： 类型是一组值 从这个角度来看，类型是一组值：\n如果 myVariable 具有 MyType 类型，这意味着可以分配给 myVariable 的所有值都必须是集合 MyType 的元素。\n如果 Sourcetype 可以分配给 TargetType，那么 Sourcetype 是 TargetType 的子集。 因此，TargetType 也允许 SourceType 所允许的所有值。\n类型 Type1、 Type2和 Type3的联合类型是定义它们的集合在集合论中的并集。\n3. 角度2： 类型兼容关系 从这个角度来看，我们不关心值以及它们在执行代码时如何流动。 相反，我们采取了一种更为静态的观点:\n源代码有个位置，每个位置都有一个静态类型。 在支持 Typescript 的编辑器中，如果我们将鼠标悬停在某个位置的上方，就可以看到该位置的静态类型。 当源位置通过赋值、函数调用等方式连接到目标位置时，源位置的类型必须与目标位置的类型兼容。 Typescript 规范通过所谓的类型关系定义类型的兼容性。 类型关系分配兼容性定义了源类型 S 何时可以分配给目标类型 T: S 和 T 都是一样的类型 S 或者 T 是 any 类型。 等等 让我们考虑以下问题：\n如果 myVariable 的静态类型可以分配给 MyType ，那么 myVariable 就具有类型 MyType 如果 SourceType 和 TargetType 是互相兼容的，那么SourceType可以分配给 TargetType 联合类型的工作方式是通过类型关系成员定义的。 类型系统一个有趣的特点是，同一个变量在不同的位置可以有不同的静态类型:\nconst arr = []; // %inferred-type: any[] arr; arr.push(123); // %inferred-type: number[] arr; arr.push(\u0026#39;abc\u0026#39;); // %inferred-type: (string | number)[] arr; 4. 标准类型系统和结构类型系统 静态类型系统的职责之一是确定两个静态类型是否兼容：\n实际参数的静态类型U（例如，通过函数调用提供） 对应形式参数的静态类型T（指定为函数定义的一部分） 这通常意味着要检查 U 是否是 T 的子类型。这种检查的两种方法(大致)是:\n在标准类型中，如果两个静态类型具有相同的标识(“名称”) ，则它们是相等的。 一种类型是另一种类型的子类型，它们的子类型关系是显式声明的。\n具有标准类型的语言有 c++ 、 Java、 c# 、 Swift 和 Rust\n在结构类型系统中，如果两个静态类型具有相同的结构(如果它们的部分具有相同的名称和相同的类型) ，则它们是相等的。 如果 U 包含 T 的所有部分(可能还包括其他部分) ，并且 U 的每个部分都包含 T 的相应部分的子类型，那么一种类型 U 就是另一种类型 T 的子类型。\n具有结构类型的语言有 ocaml/reasonml、 Haskell 和 TypeScript\n下面的代码在标准类型系统中产生类型错误(第 A 行) ，但在 Typescript 的结构类型系统中是合法的，因为类 A 和类 B 具有相同的结构:\nclass A { name = \u0026#39;A\u0026#39;; } class B { name = \u0026#39;B\u0026#39;; } const someVariable: A = new B(); // (A) Typescript 的接口在结构上也能工作——它们不需要实现来匹配:\ninterface Point { x: number; y: number; } const point: Point = {x: 1, y: 2}; // OK 5. 进一步阅读 Chapter “Type Compatibility” in the TypeScript Handbook Section “TypeRelationships” in the TypeScript Specification 如果翻译得不对的地方希望您可以帮忙指出来。\n","permalink":"/posts/%E8%AF%91%E6%96%87/302/","summary":"0. 作者以及原文介绍 作者是 Dr. Axel Rauschmayer，号称”德国阮一峰“，本文原文来自于他的博客：https://2ality.com/2020-02/understanding-types-typescript.html，不熟悉他的可以关注一下他的博客。\n1. 每个角度都从这三个问题来解释 以下三个问题对于理解类型是如何工作的非常重要，需要从这两个角度中的每一个角度来回答。\nmyVariable 的类型 MyType 意味着什么？ let myVariable: MyType = /*...*/; Sourcetype 可以分配给 TargetType 吗? let source: SourceType = /*...*/; let target: TargetType = source; TypeUnion 是如何从 Type1、 Type2 和 Type3 衍生而来的？ type TypeUnion = Type1 | Type2 | Type3; 2. 角度 1： 类型是一组值 从这个角度来看，类型是一组值：\n如果 myVariable 具有 MyType 类型，这意味着可以分配给 myVariable 的所有值都必须是集合 MyType 的元素。\n如果 Sourcetype 可以分配给 TargetType，那么 Sourcetype 是 TargetType 的子集。 因此，TargetType 也允许 SourceType 所允许的所有值。","title":"从两个角度看 Typescript 中的类型是什么?"},{"content":"一个读者的困惑，我做了简单的解答，希望能对他有所帮助。\n## ##1. 如何把一个知识由浅入深的学习？\n见问题 2\n##2. 那些写技术文章的作者，为什么对某一知识或某一框架理解得那么深入，是如何学习的呢？\n我觉得有以下几点：\n使用的多，踩得坑多，经验丰富。 花时间深入研究过原理。 思考过这个东西的价值以及为什么会出现(这个点很容易被忽略，我的那篇从历史的长河中聊虚拟 DOM 的意义就是这个点)。 思考过这个东西能给自己的业务带来什么帮助，然后紧密的结合到自己的项目中。 如果你觉得这几个点感觉你都懂，那我问你几个问题，比如你在你们公司想引入 React 来做项目。\n问题一：你为什么要用 React？ 问题二：用 React 能带来什么好处？ 问题三：如果用 Vue 或者 JQuery 能行吗？ 问题四：React 适合哪些场景？哪些场景又不适用？ 问题五：你觉得 React 存在的意义是什么？ 问题六：React 有什么缺点？ 问题七：你觉得引入 React 会有什么成本，收益和成本如何进行平衡？ 我想表达的是在学习一个东西，或者说想深入一个知识，不仅仅知道它是什么，怎么用，还要去了解它为什么会产生，能带来什么价值，解决了什么问题。这样在你判断是否引入这门新技术才有充足的理由，否则就是追风，看到这个东西比较火，可能你根本就不需要，然后引入了反而给自己增加负担。\n在你想知道它解决了什么问题的时候，可能就会思考为什么它能解决这个问题，然后再去寻找这个答案的时候就会深入他的原理，加上自己大量的实践，慢慢的就成为这个东西的专家了。\n##3. 什么时候去接触和怎么去学一些规范文档？\n我想你说的规范文档应该是官方文档这种吧，然后下面讨论的都是基于官方文档。\n官方文档我一直是把它当做完善我知识体系的东西来看待的，而不是入门教程。毕竟官方文档是给所有人写的，不管你是没使用过的，还是使用过很长时间的，所以就导致大部分的内容都是比较官方的，所以就导致不一定适合你。所以才有了各种各样的教程，因为每个人的所拥有的知识不一样。\n另外官方文档也不会告诉你哪个知识点重要，哪个知识点常用，它只会告诉你有这个东西，这些东西都是需要在实战中去得知。\n特别是对于 CSS 标准，或者 Javascript 标准这种，不到万不得已是不会去看的，东西又多，又不适合新手阅读，但是在你看到网上有不同答案的时候，就非常适合去看标准，平时就看看书、看看博客、看看视频教程就行。\n4. 如何处理网上的技术文章以及实体书？ 我觉得首先要明白文章和书的区别是什么，然后才能正确的去使用他们。\n我们一般对书的认知是对知识成体系的介绍，书是比较的全，是对整个知识比较全面的介绍，另外由于写书比较的耗时，所以往往书里面的内容都是晚于知识点出来很久的，比较适合那种很久不会变的知识。\n知道了书的特性，那么我们何时需要去读书呢？\n我觉得应该是在你想打造或者说完善你自己的知识体系的时候就一定要去读书，特别是像那种《xxx权威指南》这种，就特别的适合用来完善知识体系的。\n但是一本书不可能把方方面面讲完，都是会有侧重点的，就拿学习 JavaScript 来说，想学好《JavaScript高级程序设计》又称红宝书、《JavaScript权威指南》又称犀牛书是不应该绕过的，那么这两本书又有什么区别呢，这两本书都很厚，理论上讲得都很全。\n这两本书都会把 JavaScript 最重要的东西肯定都是会介绍的，但是红宝书侧重于程序设计，相对来说比较注重实战一点，所以对于原型、继承这种在程序设计方面较多的知识点会用大量的篇幅，然后举很多的例子，这样更利于我们的程序设计。\n而对于犀牛书的话他的侧重点在于权威，那么他的侧重点就在于全，要比所有的 JavaScript 的书都介绍的更全，相对来说比较偏理论。\n因为每本书都会有自己的特点，就是侧重点不同，所以在看实体书的时候就要看自己需求，如果想提高自己的程序设计能力，就看红宝书，如果想查漏补缺，看看自己是否对 JavaScript 全面了解，就看犀牛书。\n其他的书也一样，对于技术书我一般的习惯都是带着目的去看，而不是像一些消费型的书随便翻。\n再说说技术文章，技术文章他的特点就是可以做到很新，但是质量参差不齐，而且很容易传播错误的知识。\n因为文字的复制能力太强了，然后对版权又没有很高的要求，所以很多技术文章都是东抄一点，西改一点，所以导致有可能一个错误的观点，然后很多人在写文章的时候都去引用了，当你看到不一样的时候就会懵逼了，到底哪个是对的呢？\n最后总结一下，对于想深入和全面的掌握一项技术的时候，一定要去看书，而对于新东西，或者很小的知识点看技术博客是非常好的渠道，具体怎么去处理，真的得看自己是想把这个知识学到什么程度，想学深就一定得看书。\n5. 真对你的状况的回答。 我觉得上面回答的东西已经给你答案了，在第三条。\n另外我想补充你说的 有时候真的一篇接着一篇就学不完我想说两点：\n每个人都不可能什么都会，我觉得应该多思考目前对于自己重要的是什么，然后再针对性的学习，而不是看到什么新东西就去学。 对于一个知识点应该有那种通过自己的逻辑把这个知识点解释通的习惯，而不仅仅是看别人是怎么介绍这个东西的，别人写的东西是在给你查漏补缺的。我自己很有体会的就是关于函数式编程和 React 原理相关的，我觉得我自己有一套理论，花了很多时间去研究出来的，这样我再看别人的文章我心里就很有数，虽然用不同的方式去解释，想表达的东西是一样的，所以一旦你自己对某个点再花了大量时间去研究，有深刻的认识的时候，你会发现别人写的东西你早就知道了。比如你自己把原型的东西搞得很明白了，能给小白都能讲懂，以后大部分的原型相关的文章就可以不看了。 ","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/299/","summary":"一个读者的困惑，我做了简单的解答，希望能对他有所帮助。\n## ##1. 如何把一个知识由浅入深的学习？\n见问题 2\n##2. 那些写技术文章的作者，为什么对某一知识或某一框架理解得那么深入，是如何学习的呢？\n我觉得有以下几点：\n使用的多，踩得坑多，经验丰富。 花时间深入研究过原理。 思考过这个东西的价值以及为什么会出现(这个点很容易被忽略，我的那篇从历史的长河中聊虚拟 DOM 的意义就是这个点)。 思考过这个东西能给自己的业务带来什么帮助，然后紧密的结合到自己的项目中。 如果你觉得这几个点感觉你都懂，那我问你几个问题，比如你在你们公司想引入 React 来做项目。\n问题一：你为什么要用 React？ 问题二：用 React 能带来什么好处？ 问题三：如果用 Vue 或者 JQuery 能行吗？ 问题四：React 适合哪些场景？哪些场景又不适用？ 问题五：你觉得 React 存在的意义是什么？ 问题六：React 有什么缺点？ 问题七：你觉得引入 React 会有什么成本，收益和成本如何进行平衡？ 我想表达的是在学习一个东西，或者说想深入一个知识，不仅仅知道它是什么，怎么用，还要去了解它为什么会产生，能带来什么价值，解决了什么问题。这样在你判断是否引入这门新技术才有充足的理由，否则就是追风，看到这个东西比较火，可能你根本就不需要，然后引入了反而给自己增加负担。\n在你想知道它解决了什么问题的时候，可能就会思考为什么它能解决这个问题，然后再去寻找这个答案的时候就会深入他的原理，加上自己大量的实践，慢慢的就成为这个东西的专家了。\n##3. 什么时候去接触和怎么去学一些规范文档？\n我想你说的规范文档应该是官方文档这种吧，然后下面讨论的都是基于官方文档。\n官方文档我一直是把它当做完善我知识体系的东西来看待的，而不是入门教程。毕竟官方文档是给所有人写的，不管你是没使用过的，还是使用过很长时间的，所以就导致大部分的内容都是比较官方的，所以就导致不一定适合你。所以才有了各种各样的教程，因为每个人的所拥有的知识不一样。\n另外官方文档也不会告诉你哪个知识点重要，哪个知识点常用，它只会告诉你有这个东西，这些东西都是需要在实战中去得知。\n特别是对于 CSS 标准，或者 Javascript 标准这种，不到万不得已是不会去看的，东西又多，又不适合新手阅读，但是在你看到网上有不同答案的时候，就非常适合去看标准，平时就看看书、看看博客、看看视频教程就行。\n4. 如何处理网上的技术文章以及实体书？ 我觉得首先要明白文章和书的区别是什么，然后才能正确的去使用他们。\n我们一般对书的认知是对知识成体系的介绍，书是比较的全，是对整个知识比较全面的介绍，另外由于写书比较的耗时，所以往往书里面的内容都是晚于知识点出来很久的，比较适合那种很久不会变的知识。\n知道了书的特性，那么我们何时需要去读书呢？\n我觉得应该是在你想打造或者说完善你自己的知识体系的时候就一定要去读书，特别是像那种《xxx权威指南》这种，就特别的适合用来完善知识体系的。\n但是一本书不可能把方方面面讲完，都是会有侧重点的，就拿学习 JavaScript 来说，想学好《JavaScript高级程序设计》又称红宝书、《JavaScript权威指南》又称犀牛书是不应该绕过的，那么这两本书又有什么区别呢，这两本书都很厚，理论上讲得都很全。\n这两本书都会把 JavaScript 最重要的东西肯定都是会介绍的，但是红宝书侧重于程序设计，相对来说比较注重实战一点，所以对于原型、继承这种在程序设计方面较多的知识点会用大量的篇幅，然后举很多的例子，这样更利于我们的程序设计。\n而对于犀牛书的话他的侧重点在于权威，那么他的侧重点就在于全，要比所有的 JavaScript 的书都介绍的更全，相对来说比较偏理论。\n因为每本书都会有自己的特点，就是侧重点不同，所以在看实体书的时候就要看自己需求，如果想提高自己的程序设计能力，就看红宝书，如果想查漏补缺，看看自己是否对 JavaScript 全面了解，就看犀牛书。\n其他的书也一样，对于技术书我一般的习惯都是带着目的去看，而不是像一些消费型的书随便翻。\n再说说技术文章，技术文章他的特点就是可以做到很新，但是质量参差不齐，而且很容易传播错误的知识。","title":"读者问题|关于如何学习的讨论"},{"content":" 本文是译文，原文地址是：https://medium.com/@sdolidze/the-iceberg-of-react-hooks-af0b588f43fb\nReact Hooks 与类组件不同，它提供了用于优化和组合应用程序的简单方式，并且使用了最少的样板文件。\n如果没有深入的知识，由于微妙的 bug 和抽象层漏洞，可能会出现性能问题，代码复杂性也会增加。\n我已经创建了12个案例研究来演示常见的问题以及解决它们的方法。 我还编写了 React Hooks Radar 和 React Hooks Checklist，来推荐和快速参考。\n案例研究： 实现 Interval 目标是实现计数器，从 0 开始，每 500 毫秒增加一次。 应提供三个控制按钮: 启动、停止和清除。\nLevel 0：Hello World export default function Level00() { console.log(\u0026#39;renderLevel00\u0026#39;); const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; count =\u0026gt; {count} \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count - 1)}\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 这是一个简单的、正确实现的计数器，用户单击时计数器的增加或减少。\nLevel 1：setInterval export default function Level01() { console.log(\u0026#39;renderLevel01\u0026#39;); const [count, setCount] = useState(0); setInterval(() =\u0026gt; { setCount(count + 1); }, 500); return \u0026lt;div\u0026gt;count =\u0026gt; {count}\u0026lt;/div\u0026gt;; } 此代码的目的是每 500 毫秒增加计数器。 这段代码存在巨大的内存泄漏并且实现不正确。 它很容易让浏览器标签崩溃。 由于 Level01 函数在每次渲染发生时被调用，所以每次触发渲染时这个组件都会创建新的 interval。\n突变、订阅、计时器、日志记录和其他副作用不允许出现在函数组件的主体中(称为 React 的 render 阶段)。 这样做会导致用户界面中的错误和不一致。\nHooks API Reference: useEffect\nLevel 2：useEffect export default function Level02() { console.log(\u0026#39;renderLevel02\u0026#39;); const [count, setCount] = useState(0); useEffect(() =\u0026gt; { setInterval(() =\u0026gt; { setCount(count + 1); }, 500); }); return \u0026lt;div\u0026gt;Level 2: count =\u0026gt; {count}\u0026lt;/div\u0026gt;; } 大多数副作用放在 useEffect 内部。 但是此代码还有巨大的资源泄漏，并且实现不正确。 useEffect 的默认行为是在每次渲染后运行，所以每次计数更改都会创建新的 Interval。\nHooks API Reference: useEffect, Timing of Effects.\nLevel 3: 只运行一次 export default function Level03() { console.log(\u0026#39;renderLevel03\u0026#39;); const [count, setCount] = useState(0); useEffect(() =\u0026gt; { setInterval(() =\u0026gt; { setCount(count + 1); }, 300); }, []); return \u0026lt;div\u0026gt;count =\u0026gt; {count}\u0026lt;/div\u0026gt;; } 将**[]**作为 useEffect 的第二个参数，将在 mount 之后只调用一次 function。，即使只调用一次 setInterval，这段代码的实现也是不正确的。\n虽然 count 会从 0 增加到 1，但是不会再增加，只会保持成 1。 因为箭头函数只被创建一次，所以箭头函数里面的 count 会一直为 0.\n这段代码也存在微妙的资源泄漏。 即使在组件卸载之后，仍将调用 setCount。\nHooks API Reference: useEffect, Conditionally firing an effect.\nLevel 4：清理 useEffect(() =\u0026gt; { const interval = setInterval(() =\u0026gt; { setCount(count + 1); }, 300); return () =\u0026gt; clearInterval(interval); }, []); 为了防止资源泄漏，Hooks 的生命周期结束时，必须清理所有内容。 在这种情况下，组件卸载后将调用返回的函数。\n这段代码没有资源泄漏，但是实现不正确，就像之前的代码一样。\nHooks API Reference: Cleaning up an effect.\nLevel 5：使用 count 作为依赖项 useEffect(() =\u0026gt; { const interval = setInterval(() =\u0026gt; { setCount(count + 1); }, 500); return () =\u0026gt; clearInterval(interval); }, [count]); 给 useEffect 提供依赖数组会改变它的生命周期。 在这个例子中，useEffect 在 mount 之后会被调用一次，并且每次 count 都会改变。 清理函数将在每次 count 更改时被调用以释放前面的资源。\n这段代码工作正常，没有任何错误，但是还是有点不好，每 500 毫秒创建和释放 setInterval， 每个 setInterval 总是调用一次。\nHooks API Reference: useEffect, Conditionally firing an effect.\nLevel 6：setTimeout useEffect(() =\u0026gt; { const timeout = setTimeout(() =\u0026gt; { setCount(count + 1); }, 500); return () =\u0026gt; clearTimeout(timeout); }, [count]); 这段代码和上面的代码可以正常工作。 因为 useEffect 是在每次 count 更改时调用的，所以使用 setTimeout 与调用 setInterval 具有相同的效果。\n这个例子效率很低，每次渲染发生时都会创建新的 setTimeout，React 有一个更好的方式来解决问题。\nLevel 7：useState 的函数更新 useEffect(() =\u0026gt; { const interval = setInterval(() =\u0026gt; { setCount(c =\u0026gt; c + 1); }, 500); return () =\u0026gt; clearInterval(interval); }, []); 在前面的例子中，我们对每次 count 更改运行 useEffect，这是必要的，因为我们需要始终保持最新的当前值。\nuseState 提供 API 来更新以前的状态，而不用捕获当前值。 要做到这一点，我们需要做的就是向 setState 提供 lambda(匿名函数)。\n这段代码工作正常，效率更高。 在组件的生命周期中，我们使用单个 setInterval， clearInterval 只会在卸载组件之后调用一次。\nHooks API Reference: useState, Functional updates.\nLevel 8：局部变量 export default function Level08() { console.log(\u0026#39;renderLevel08\u0026#39;); const [count, setCount] = useState(0); let interval = null; const start = () =\u0026gt; { interval = setInterval(() =\u0026gt; { setCount(c =\u0026gt; c + 1); }, 500); }; const stop = () =\u0026gt; { clearInterval(interval); }; return ( \u0026lt;div\u0026gt; count =\u0026gt; {count} \u0026lt;button onClick={start}\u0026gt;start\u0026lt;/button\u0026gt; \u0026lt;button onClick={stop}\u0026gt;stop\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 我们增加了 start 和 stop 按钮。 此代码实现不正确，因为 stop 按钮不工作。 因为在每次渲染期间都会创建新的引用(指 interval 的引用)，因此 stop 函数里面 clearInterval 里面的 interval 是 null。\nHooks API Reference: Is there something like instance variables?\nLevel 9：useRef export default function Level09() { console.log(\u0026#39;renderLevel09\u0026#39;); const [count, setCount] = useState(0); const intervalRef = useRef(null); const start = () =\u0026gt; { intervalRef.current = setInterval(() =\u0026gt; { setCount(c =\u0026gt; c + 1); }, 500); }; const stop = () =\u0026gt; { clearInterval(intervalRef.current); }; return ( \u0026lt;div\u0026gt; count =\u0026gt; {count} \u0026lt;button onClick={start}\u0026gt;start\u0026lt;/button\u0026gt; \u0026lt;button onClick={stop}\u0026gt;stop\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 如果需要变量，useRef 是首选的 Hook。 与局部变量不同，React 确保在每次渲染期间返回相同的引用。\n这个代码看起来是正确的，但是有一个微妙的错误。 如果 start 被多次调用，那么 setInterval 将被多次调用，从而触发资源泄漏。\nHooks API Reference: useRef\nLevel 10: useCallback export default function Level10() { console.log(\u0026#39;renderLevel10\u0026#39;); const [count, setCount] = useState(0); const intervalRef = useRef(null); const start = () =\u0026gt; { if (intervalRef.current !== null) { return; } intervalRef.current = setInterval(() =\u0026gt; { setCount(c =\u0026gt; c + 1); }, 500); }; const stop = () =\u0026gt; { if (intervalRef.current === null) { return; } clearInterval(intervalRef.current); intervalRef.current = null; }; return ( \u0026lt;div\u0026gt; count =\u0026gt; {count} \u0026lt;button onClick={start}\u0026gt;start\u0026lt;/button\u0026gt; \u0026lt;button onClick={stop}\u0026gt;stop\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 为了避免资源泄漏，如果 interval 已经启动，我们只需忽略调用。 尽管调用 clearInterval (null) 不会触发任何错误，但是只释放一次资源仍然是一个很好的实践。\n此代码没有资源泄漏，实现正确，但可能存在性能问题。\nmemoization 是 React 中主要的性能优化工具。 React.memo 进行浅比较，如果引用相同，则跳过 render 阶段。\n如果 start 函数 和 stop 函数被传递给一个 memoized 组件，整个优化就会失败，因为在每次渲染之后都会返回新的引用。\nReact Hooks: Memoization\nLevel 11: useCallback const intervalRef = useRef(null); const start = useCallback(() =\u0026gt; { if (intervalRef.current !== null) { return; } intervalRef.current = setInterval(() =\u0026gt; { setCount(c =\u0026gt; c + 1); }, 500); }, []); const stop = useCallback(() =\u0026gt; { if (intervalRef.current === null) { return; } clearInterval(intervalRef.current); intervalRef.current = null; }, []); return ( \u0026lt;div\u0026gt; count =\u0026gt; {count} \u0026lt;button onClick={start}\u0026gt;start\u0026lt;/button\u0026gt; \u0026lt;button onClick={stop}\u0026gt;stop\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 为了使 React.memo 能够正常工作，我们需要做的就是使用 useCallback 来记忆(memoize)函数。 这样，每次渲染后都会提供相同的函数引用。\n此代码没有资源泄漏，实现正确，没有性能问题，但代码相当复杂，即使对于简单的计数器也是如此。\nHooks API Reference: useCallback\nLevel 12: 自定义 Hook function useCounter(initialValue, ms) { const [count, setCount] = useState(initialValue); const intervalRef = useRef(null); const start = useCallback(() =\u0026gt; { if (intervalRef.current !== null) { return; } intervalRef.current = setInterval(() =\u0026gt; { setCount(c =\u0026gt; c + 1); }, ms); }, []); const stop = useCallback(() =\u0026gt; { if (intervalRef.current === null) { return; } clearInterval(intervalRef.current); intervalRef.current = null; }, []); const reset = useCallback(() =\u0026gt; { setCount(0); }, []); return { count, start, stop, reset }; } 为了简化代码，我们需要将所有复杂性封装在 useCounter 自定义钩子中，并暴露 api: { count，start，stop，reset }。\nexport default function Level12() { console.log(\u0026#39;renderLevel12\u0026#39;); const { count, start, stop, reset } = useCounter(0, 500); return ( \u0026lt;div\u0026gt; count =\u0026gt; {count} \u0026lt;button onClick={start}\u0026gt;start\u0026lt;/button\u0026gt; \u0026lt;button onClick={stop}\u0026gt;stop\u0026lt;/button\u0026gt; \u0026lt;button onClick={reset}\u0026gt;reset\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } Hooks API Reference: Using a Custom Hook\nReact Hooks Radar Green 绿色 hooks 是现代 React 应用程序的主要构件。 它们几乎在任何地方都可以安全地使用，而不需要太多的思考\nuseReducer useState useContext Yellow 黄色 hooks 通过使用记忆(memoize)提供了有用的性能优化。 管理生命周期和输入应该谨慎地进行。\nuseCallback useMemo Red 红色 hooks 与易变的世界相互作用，使用副作用。 它们是最强大的，应该极其谨慎地使用。 自定义 hooks 被推荐用于所有重要用途的情况。\nuseRef useEffect useLayoutEffect 用好 React Hooks 的清单 服从Rules of Hooks 钩子的规则. 不要在主渲染函数中做任何副作用 取消订阅 / 弃置 / 销毁所有已使用的资源 Prefer 更喜欢useReducer or functional updates for 或功能更新useStateto prevent reading and writing same value in a hook. 防止在钩子上读写相同的数值 不要在渲染函数中使用可变变量，而应该使用useRef 如果你保存在useRef 的值的生命周期小于组件本身，在处理资源时不要忘记取消设置值 谨慎使用无限递归导致资源衰竭 在需要的时候使用 Memoize 函数和对象来提高性能 正确捕获输入依赖项(undefined=\u0026gt; 每一次渲染,[a, b] =\u0026gt; 当a or 或b改变的时候渲染, 改变,[] =\u0026gt; 只改变一次) 对于复杂的用例可以通过自定义 Hooks 来实现。 ","permalink":"/posts/%E8%AF%91%E6%96%87/296/","summary":"本文是译文，原文地址是：https://medium.com/@sdolidze/the-iceberg-of-react-hooks-af0b588f43fb\nReact Hooks 与类组件不同，它提供了用于优化和组合应用程序的简单方式，并且使用了最少的样板文件。\n如果没有深入的知识，由于微妙的 bug 和抽象层漏洞，可能会出现性能问题，代码复杂性也会增加。\n我已经创建了12个案例研究来演示常见的问题以及解决它们的方法。 我还编写了 React Hooks Radar 和 React Hooks Checklist，来推荐和快速参考。\n案例研究： 实现 Interval 目标是实现计数器，从 0 开始，每 500 毫秒增加一次。 应提供三个控制按钮: 启动、停止和清除。\nLevel 0：Hello World export default function Level00() { console.log(\u0026#39;renderLevel00\u0026#39;); const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; count =\u0026gt; {count} \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count - 1)}\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 这是一个简单的、正确实现的计数器，用户单击时计数器的增加或减少。\nLevel 1：setInterval export default function Level01() { console.","title":"你可能不知道的 React Hooks"},{"content":"又一年过去了，2018 年写年终总结的场景还历历在目，写这篇文章之前还专门去看了下 2018 年的年度总结，主要是看自己在 2018 学的东西自己还能记得啥。\n印象最深刻的应该是还是函数式编程相关的东西，因为确实在我深入的去接触它过后，我的很多编程思维都被它所影响。虽然在项目中不会去用很多函数式的方式去写，但是函数式的那些特点深深的指导着我如何去设计一个更容易维护的函数，其中一些思维可以见我去年的写 函数式编程，真香。\n做个预测：三年之内，函数式编程要火一波，原因是 serverless 的兴起。\n回顾了过去，我对今年的整体总结是：输入很多、输出不够。\n输入 自我感觉自己是一个焦虑的人，焦虑也许来源与社交(周围优秀的人太多，见了太多比自己年轻或者同龄人)、也许来源于自己见识更多(处于达克效应里面「知道自己不知道」的境界)。\n图片来源于网络\n如果按照这张图来的话，我现在处于自信崩溃区，不知道自己是否处于绝望之谷，但是希望明年能进入开悟之坡。\n从这张图里可以看到，自信程度高也不一定约好，很可能是处于愚昧山峰。\n自我感觉自己还算坚强，没有被焦虑或者自信崩溃打败，相信自己通过努力，提升自己的专业知识和能力，总会逃离绝望之谷，所以我今年比以前都更努力的去学习，得到结果是我感觉自己今年在见识上提升了非常的多，见识越多，意味着格局会慢慢变大，格局越大，就越能成功(这只是我自己的人生逻辑)。\n虽然在精神上的收获了很多，但是从今年各方面的产出来看，不管是职业还是影响力都没有实质性的进展，但是我没有着急，平时安慰我自己的话就是：还没到爆发的时候，现在一直积累就行。\n读书 读书是我今年最满意的一项输入，读了 20 多本书，虽然这个成绩不算好，但是对于我来说是一个非常大的进步，因为我从小就特别讨厌读文字，小说也不例外。现在一年能读 20 多本，差不多半个月读一本，进步非常的大了。\n最开始想读书也是自己接触的很多大佬，或者在网上看到一些大佬的文章等，了解到读书非常的重要，所以就开始买书来读，刚开始读得很慢，而且很枯燥，一本书可能要花一个月才能读完，大概读了两个月后，自己养成了读书的习惯了，每天花 30 ~ 60 分钟的时间读书，周末就花多一点，一周就能读一本书。\n那个时候成就感就来了，对读书产生了兴趣，然后读书 对于我来说就不算什么难事儿了，反正有大段的空闲时间就会用来读书。\n在书的媒介方面我还是比较传统，喜欢纸质书翻书的感觉，所以我读的大部分书都是纸质书，基本每个月都会买 3、4 本书，主要是每个月基本上当当都会搞活动，打 5 折或者满 100 - 50，另外还有满 200 - 30 的券，然后由于我会每个月自费给公众号里的读者送书，正好就一起会买六七本书，差不多 200 块。\n下面是我今年读完的书，没读完的没有列出来，明年再继续读，大部分都是纸质书。我目前读书还没有进行主题阅读，基本上都是泛读，涉及的不仅仅是技术书，也有心理学、品牌、历史、理财、个人成长各个方面。\n电子书\n《实用性阅读指南》三星 《麦肯锡精英高效阅读法》三星 《半小时漫画中国史》1-4 册 三星 《小狗钱钱》五星 《如何有效阅读一本书》三星 纸质书\n《现代前端技术解析》四星 《你不知道的 JavaScript(上)》五星 《高效前端：Web 高效编程与优化实践》四星 《重构(第二版)》五星 《React 状态管理与同构实战》四星 《见识》四星 《被讨厌的勇气》五星 《刻意练习》四星 《高效能人士的七个习惯》五星 《超级符号原理》三星 《学会写作》三星 《少有人走的路 4：在焦虑的年代获得精神的成长》四星 《原则》五星 《语言学的邀请》五星 《文明之光(第一册)》五星 打五星的都是我自己读完之后感觉收获很多的，每个人可能感受不同，三星就是我觉得可读可不读的书。\n知识付费 得到\n我在年度学习报告的一些信息：一共花了 12541 分钟，参与了 800 讲课程，听了 29 本书，阅读了 6 本电子书。算下来平均每天至少花半小时的时间在学习得到里面的课程。学得最多的课程就是吴军老师的《硅谷来信》、《香帅的北大金融课》、张潇雨的《个人投资课》、陆蓉的《行为金融学》，还有一些 10 来节一门的小课。\n樊登读书\n樊登读书是我偶然接触到的，看到一些关于樊登讲书的短视频，觉得他讲书非常的有魅力，就去开了樊登读书的会员，听他讲书。\n听樊登讲书会觉得这个人特别的有魅力，有温度，也许是因为他讲书是有视频的，所以非常的生动，他的表情以及讲书的语气都非常的到位，仿佛就在身边给你讲一样。\n在听书的体验上对比得到和知乎，樊登讲书给我的体验是最好的，后面也打算写一篇文章来具体对比一下。\n知乎\n知乎在知识付费上给我的感觉是比较的业余，里面涉及的东西很广，形式也多，电子书、专栏、live、杂志。我用的比较多的还是专栏，今年我在时间管理方面的知识基本上都是来自于知乎专栏，主要原因是其他的平台没有。\n所以我目前是把知乎作为一个备胎来考虑的，其他平台找不到再才会去知乎上找，另外知乎的会员也很便宜，我再搞活动的时候续费的，一年也才 99，基本上找不到更便宜的知识付费平台了。\n最后再吐槽一下知乎的听书，对比其他竞品真的有待改进，知乎里的听书让人想睡觉，没有什么情感。\n极客时间\n极客时间现在基本上算是学技术的最大的知识付费平台了，我也买了不少课，将近 20 门，看完了差不多一半，其他的确实有些不是特别符合我的胃口，就没看完。\n看了这么多，我觉得今年在极客时间比较推荐的专栏是《浏览器工作原理与实践》、《数据结构与算法之美》。\n其它 其他比如还有在慕课网呀以及其他平台我就不总结了，花的时间比较少。\n我估算了下，我每天下班回来花在学习上的时间平均一个半小时以上，我相信大家都听过人与人之间的差距大部分都在下班后的几个小时，虽然我并不完全同意这句话，但是我相信把时间花在自己觉得对的事情，总会有收获的，干就完了，把其他的留给时间。\n输出 说道输出，我相比认识的一些写文章的大佬来说，写得有点少，比如奇奇，他今年写了 67 篇原创文，太强了，而且绝大部分都是高质量的文章，具体可以看他的 code 秘密花园 2019 年终总结 ，一位字节跳动的大佬，公众号就是「code 密码花园」，有兴趣的可以关注一下他。\n我看壹伴生成的年报里面有 34 篇文章，但是有部分可能不是纯技术文，我自己今年在公众号大概仅仅输出了 20 篇左右，由于今年打算是想把 React 好好研究下，所以还是输出的文章 React 部分的比较多。\nReact 函数式组件性能优化指南 新手学习 React 迷惑的点 React 16 的 Diff 策略 React Fiber 架构 从 React 历史的长河里聊虚拟 DOM 及其价值 也因为这些 React 的文章，还是结实了不少的 React 爱好者。\n另外还输出了几篇非技术文，反响也还不错：\n为什么现在面试总是造火箭？ 群里提问的艺术 高级程序员与初级程序员的差别在哪里 还有关于图片知识的文章，这篇每个前端工程师都应该了解的图片知识 也反响不错，在思否上获得了 188 票，这是我在思否上获得点赞最多的一篇文章了，虽然相对于奇奇(ConardLi)、浪浪(浪里行舟)这种思否年度排行榜前五的人来说就是小儿科。对于我来说的意义就在于以后我的文章有机会上推荐了，这篇文章以前我在思否上的文章基本是无人问津。然后当时也是被各大公众号转载，我自己的公众号里也达到了 2000+ 的阅读量。\n另外的一些原创就暂时不推荐了，自己感觉质量没有这些高，我觉得这篇从 React 历史的长河里聊虚拟 DOM 及其价值是一篇被低估了的文章，这篇文章在理解虚拟 DOM 以及现代框架的意义上总结的很好，但是无奈可能文笔不行，看的人很少，远远低于我的期望。\n除了公众号，我在自己的个人网站桃园 http://www.taoweng.site/里还记录了一些周刊呀、以及其他的小工具和一些坑。由于很多是短文，所以感觉质量不是特别的高，就没有发公众号，有兴趣的也可以去我博客逛一逛。\n对于我的博客我很开心的是今年我终于用了我自己写的主题，前两年都是用的别人的主题，用了一段时间，总觉得不太满意，然后就会花时间去另外找主题，甚至还花钱买过，但是设计理念毕竟是别人的，有些不太符合自己，今年就下定决心自己写了一个主题，我的博客是用 Typecho 搭的，主题在我的 github：https://github.com/crazylxr/Typecho-Theme-Notion，看完如果觉得不错的记得给我点 star。\n投资理财 关于投资理财的话，我并不算专业，但是由于自己今年抓住了一波红利，所以在回报率上还不错。\n我目前的投资 80% 的钱是在指数基金里面，20% 的钱在股票里。今年基金的回报率在 17% 左右，股票的回报率在 12% 左右。\n在前文也可以看到我学习投资理财的知识主要是在得到上学习的，现在的水平只是了解一些投资工具的基本概念。虽然这部分知识还比较薄弱，但不准备纳入我明年花大力气学习的点，因为对于我这种不是靠投资吃饭的人来说，目前积攒本金才是最重要的。\n不过今年是准备写一些关于投资理财的科普文，比如如何理解股票、如何理解基金、对我们普通人来说最好的指数基金又是怎么一会儿相关的。\n技术上 Typescript 虽然去年我就在总结里面提到过我已经开始接触 Typescript，但是那个时候只是在自己的小项目里面用过，没有在公司的大点的项目用，有些东西理解也不到位，今年通过在公司项目的实践，对 Typescript 有了更深刻的理解，不说精通，也可以说自己算是掌握了 Typescript，熟悉类型编程，我也给公司的组件平台写组件的声明文件。\n并且在总结里预测他一定会火，果然在 2019 年很多大项目都开始用 Typescript 来写，基本上成为大项目的标配，但是目前还没有成为各个公司招聘的必备技能，只是一个加分项。我还是非常建议去学习的，特别是公司内部 Typescript 的生态系统如果搞的很好，代码写起来很舒服的。\n单元测试 说到测试，作为软件工程中的关键一环，目前很多人都忽视了这个环节，我以前基本上也是忽略的，但是偶然看到了一篇 TDD 的文章，然后意识到测试的重要性，也去慕课网上买了前端要学的测试课 从 Jest 入门到 TDD/BDD 双实战这门课来看，不过这里面讲得比较的浅，而且对 BDD 的解释我感觉是错的。\n然后我又去参加了一个熊节(重构这本书的翻译者)的「 TDD 和 重构的练功房」，然后加入了交流群，这里面都是一些 TDD 爱好者，经过一阵子的研究，让我对 TDD 有了认识，当然对单元测试也熟悉了很多，虽然现在还是没办法完全通过 TDD 的方式开发项目，但是里面的思维已经影响了我。\n深入 React React 我已经使用了三年了，虽然 API 很熟悉了，了解了基本原理，但是没有深入的去看过源码，已经整体的架构，所以今年需求突破，也去慕课网上买了React 源码深度解析 来看，不过课程着实枯燥，只看视频是根本看不懂的，给我带来的收获是让我学会了如何去看这种大型项目的源码。\n小节 今年花在技术上的时间没有去年那么多，学的东西也不够多，特别是看了奇奇的总结，深知自己跟他技术上的差距，也许今年是把去年学的东西用来实践了，也许是把时间花在了一些通识教育上，明年重点规划就是在技术上的突破。\n另外还有一点体会就是，当你真正的去专研过一个技术之后，当别人跟你聊到这个话题，你会非常的自信，很有底气，面试啥的根本不怕问到，对于我来说我就比较在行 React、函数式编程相关的，这方面我花过大量时间专研过，大部分问题我都是知道的，但是对于算法和数据、webpack 相关的，我就很虚，很怕在面试的时候被问到。\n虽然前端需要掌握的知识很多，我还是比较倾向于把一些自己常用的知识，或者自己感兴趣的知识，好好专研一下，不要贪多，一个技术点一个技术点的慢慢攻破。\n总结 今年还是没有虚度吧，感觉自己在认知方面提升了一大截，养成了看书的习惯，因为做公众号写文章结实了很多新朋友，也帮助了很多人，这点给自己点个赞吧，然后明年就是在技术上提升多一点。\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/295/","summary":"又一年过去了，2018 年写年终总结的场景还历历在目，写这篇文章之前还专门去看了下 2018 年的年度总结，主要是看自己在 2018 学的东西自己还能记得啥。\n印象最深刻的应该是还是函数式编程相关的东西，因为确实在我深入的去接触它过后，我的很多编程思维都被它所影响。虽然在项目中不会去用很多函数式的方式去写，但是函数式的那些特点深深的指导着我如何去设计一个更容易维护的函数，其中一些思维可以见我去年的写 函数式编程，真香。\n做个预测：三年之内，函数式编程要火一波，原因是 serverless 的兴起。\n回顾了过去，我对今年的整体总结是：输入很多、输出不够。\n输入 自我感觉自己是一个焦虑的人，焦虑也许来源与社交(周围优秀的人太多，见了太多比自己年轻或者同龄人)、也许来源于自己见识更多(处于达克效应里面「知道自己不知道」的境界)。\n图片来源于网络\n如果按照这张图来的话，我现在处于自信崩溃区，不知道自己是否处于绝望之谷，但是希望明年能进入开悟之坡。\n从这张图里可以看到，自信程度高也不一定约好，很可能是处于愚昧山峰。\n自我感觉自己还算坚强，没有被焦虑或者自信崩溃打败，相信自己通过努力，提升自己的专业知识和能力，总会逃离绝望之谷，所以我今年比以前都更努力的去学习，得到结果是我感觉自己今年在见识上提升了非常的多，见识越多，意味着格局会慢慢变大，格局越大，就越能成功(这只是我自己的人生逻辑)。\n虽然在精神上的收获了很多，但是从今年各方面的产出来看，不管是职业还是影响力都没有实质性的进展，但是我没有着急，平时安慰我自己的话就是：还没到爆发的时候，现在一直积累就行。\n读书 读书是我今年最满意的一项输入，读了 20 多本书，虽然这个成绩不算好，但是对于我来说是一个非常大的进步，因为我从小就特别讨厌读文字，小说也不例外。现在一年能读 20 多本，差不多半个月读一本，进步非常的大了。\n最开始想读书也是自己接触的很多大佬，或者在网上看到一些大佬的文章等，了解到读书非常的重要，所以就开始买书来读，刚开始读得很慢，而且很枯燥，一本书可能要花一个月才能读完，大概读了两个月后，自己养成了读书的习惯了，每天花 30 ~ 60 分钟的时间读书，周末就花多一点，一周就能读一本书。\n那个时候成就感就来了，对读书产生了兴趣，然后读书 对于我来说就不算什么难事儿了，反正有大段的空闲时间就会用来读书。\n在书的媒介方面我还是比较传统，喜欢纸质书翻书的感觉，所以我读的大部分书都是纸质书，基本每个月都会买 3、4 本书，主要是每个月基本上当当都会搞活动，打 5 折或者满 100 - 50，另外还有满 200 - 30 的券，然后由于我会每个月自费给公众号里的读者送书，正好就一起会买六七本书，差不多 200 块。\n下面是我今年读完的书，没读完的没有列出来，明年再继续读，大部分都是纸质书。我目前读书还没有进行主题阅读，基本上都是泛读，涉及的不仅仅是技术书，也有心理学、品牌、历史、理财、个人成长各个方面。\n电子书\n《实用性阅读指南》三星 《麦肯锡精英高效阅读法》三星 《半小时漫画中国史》1-4 册 三星 《小狗钱钱》五星 《如何有效阅读一本书》三星 纸质书\n《现代前端技术解析》四星 《你不知道的 JavaScript(上)》五星 《高效前端：Web 高效编程与优化实践》四星 《重构(第二版)》五星 《React 状态管理与同构实战》四星 《见识》四星 《被讨厌的勇气》五星 《刻意练习》四星 《高效能人士的七个习惯》五星 《超级符号原理》三星 《学会写作》三星 《少有人走的路 4：在焦虑的年代获得精神的成长》四星 《原则》五星 《语言学的邀请》五星 《文明之光(第一册)》五星 打五星的都是我自己读完之后感觉收获很多的，每个人可能感受不同，三星就是我觉得可读可不读的书。","title":"2019 个人深度总结"},{"content":"背景 最近遇到一个下载的需求，由于 url 参数太长(常用的下载方法 a 标签或者 location.href 的方法都是 get 请求，get 请求参数长度有限制)，无法下载，考虑了好几种方案，最终还是觉得通过 ajax 的 POST 方法进行下载，比较容易实现，下面记录实现过程以及遇到的问题。\n但是由于 AJAX 并不会唤起浏览器的下载窗口，AJAX设计的初衷就是用来实现异步刷新的，用以改善原始的 form 表单提交刷新页面的问题，那么如何来解决呢？\nPOST 方法下载实现原理 通过 fetch 请求获取文件，然后利用 Blob 对象来接收处理，在接收到后端返回的文件后，把其转化一下，放入a标签的href中，并触发下载行为。\n实现的代码如下：\nfetch(url, { method: \u0026#39;POST\u0026#39;, body: JSON.stringify(params), header: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39; } }).then(function(response) { return response.blob(); }).then(function(blob) { const link = document.createElement(\u0026#39;a\u0026#39;) link.style.display = \u0026#39;none\u0026#39; link.href = URL.createObjectURL(blob) document.body.appendChild(link) link.click() // 释放的 URL 对象以及移除 a 标签 URL.revokeObjectURL(link.href) document.body.removeChild(link) }); 这里需要注意的是要记得要调用 response 的 blob 方法，这样才会返回一个 blob，如果你没用过 blob 的话，可能你以前只知道 json 和 text，其实 response 的 body 还可以转化为 arrayBuffer 和 formData。\n具体 Response 可以见 MDN\n如何拿到文件名 可以下载文件了只是第一步，但是你会发现还有一个问题，下载下来的文件名是你看不懂的名字，类似这样： 我这边的方案是把文件名放在 response 的 headers 里，放在 content-disposition 字段里，有个 fileName 字段，用来存放文件名。\n我感觉在下载文件的时候 content-disposition 字段对于他们后端来说感觉是都会加的，因为最开始我用 get 下载的时候就已经有这个字段了，如果你们后端没有设置这个 header ，可以设置一下，当然也可以设置到其他字段里。\n一个小插曲\n当我把 fetch 后的 res 打印出来看 Response 的时候，发现 headers 里是空对象，如下：\n然后我再通过 res.headers 直接去拿 headers，发现还是一个 Headers 的空对象。\n我还以为 headers 里面没有东西，但是当我直接通过 res.headers.get('content-disposition') 去拿的时候，竟然拿到了，数据像这样：\nattachment;fileName=%E7%9B%B4%E6%92%AD%E6%97%B6%E9%95%BF%E4%B8%BB%E6%92%AD%E6%98%8E%E7%BB%86.xls 然后你就可以通过多种方式将文件名给提取出来，我这里采用的是通过 split方法来提取的。\nres.headers.get(\u0026#39;content-disposition\u0026#39;).split(\u0026#39;;\u0026#39;)[1].split(\u0026#39;=\u0026#39;)[1] 最终的实现 准备工作都做好了，然后就写出了这样的代码：\nfetch(url, { method: \u0026#39;POST\u0026#39;, body: JSON.stringify(params), headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39; } }).then(function(response) { const filename = res.headers.get(\u0026#39;content-disposition\u0026#39;).split(\u0026#39;;\u0026#39;)[1].split(\u0026#39;=\u0026#39;)[1] return { filename, blob: response.blob() } }).then(function(obj) { const link = document.createElement(\u0026#39;a\u0026#39;) link.style.display = \u0026#39;none\u0026#39; // a 标签的 download 属性就是下载下来的文件名 link.download = obj.filename link.href = URL.createObjectURL(obj.blob) document.body.appendChild(link) link.click() // 释放的 URL 对象以及移除 a 标签 URL.revokeObjectURL(link.href) document.body.removeChild(link) }); 本以为就可以了，但是下载下来打开 excel 发现内容是 Promise，然后才发现原来 response.blob() 返回的是一个 promise。\n所以改进的实现方案如下：\nfetch(url, { method: \u0026#39;POST\u0026#39;, body: JSON.stringify(params), headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39; } }).then(function(response) { const filename = res.headers.get(\u0026#39;content-disposition\u0026#39;).split(\u0026#39;;\u0026#39;)[1].split(\u0026#39;=\u0026#39;)[1] response.blob().then(blob =\u0026gt; { const link = document.createElement(\u0026#39;a\u0026#39;) link.style.display = \u0026#39;none\u0026#39; // a 标签的 download 属性就是下载下来的文件名 link.download = filename link.href = URL.createObjectURL(blob) document.body.appendChild(link) link.click() // 释放的 URL 对象以及移除 a 标签 URL.revokeObjectURL(link.href) document.body.removeChild(link) }) }) 不过这种 then 里面又套了 then ，看着有点不好看，所以用 async/await 重新写了一版：\nasync function postDownload(url, params) { const request = { body: JSON.stringify(params), method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39; } } const response = await fetch(url, request) const filename = response.headers.get(\u0026#39;content-disposition\u0026#39;).split(\u0026#39;;\u0026#39;)[1].split(\u0026#39;=\u0026#39;)[1] const blob = await response.blob() const link = document.createElement(\u0026#39;a\u0026#39;) link.download = decodeURIComponent(filename) link.style.display = \u0026#39;none\u0026#39; link.href = URL.createObjectURL(blob) document.body.appendChild(link) link.click() URL.revokeObjectURL(link.href) document.body.removeChild(link)j } 这个函数里没有写任何的错误处理，那也不是这篇文章要讲的，不过自己在实现的时候应该加上 try/catch，不然如果有问题，不报错还是很难受的。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/284/","summary":"背景 最近遇到一个下载的需求，由于 url 参数太长(常用的下载方法 a 标签或者 location.href 的方法都是 get 请求，get 请求参数长度有限制)，无法下载，考虑了好几种方案，最终还是觉得通过 ajax 的 POST 方法进行下载，比较容易实现，下面记录实现过程以及遇到的问题。\n但是由于 AJAX 并不会唤起浏览器的下载窗口，AJAX设计的初衷就是用来实现异步刷新的，用以改善原始的 form 表单提交刷新页面的问题，那么如何来解决呢？\nPOST 方法下载实现原理 通过 fetch 请求获取文件，然后利用 Blob 对象来接收处理，在接收到后端返回的文件后，把其转化一下，放入a标签的href中，并触发下载行为。\n实现的代码如下：\nfetch(url, { method: \u0026#39;POST\u0026#39;, body: JSON.stringify(params), header: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39; } }).then(function(response) { return response.blob(); }).then(function(blob) { const link = document.createElement(\u0026#39;a\u0026#39;) link.style.display = \u0026#39;none\u0026#39; link.href = URL.createObjectURL(blob) document.body.appendChild(link) link.click() // 释放的 URL 对象以及移除 a 标签 URL.revokeObjectURL(link.href) document.body.removeChild(link) }); 这里需要注意的是要记得要调用 response 的 blob 方法，这样才会返回一个 blob，如果你没用过 blob 的话，可能你以前只知道 json 和 text，其实 response 的 body 还可以转化为 arrayBuffer 和 formData。","title":"通过fetch发送 post 请求下载文件"},{"content":"前言 目的 本文只介绍函数式组件特有的性能优化方式，类组件和函数式组件都有的不介绍，比如 key 的使用。另外本文不详细的介绍 API 的使用，后面也许会写，其实想用好 hooks 还是蛮难的。\n面向读者 有过 React 函数式组件的实践，并且对 hooks 有过实践，对 useState、useCallback、useMemo API 至少看过文档，如果你有过对类组件的性能优化经历，那么这篇文章会让你有种熟悉的感觉。\nReact 性能优化思路 我觉得React 性能优化的理念的主要方向就是这两个：\n减少重新 render 的次数。因为在 React 里最重(花时间最长)的一块就是 reconction(简单的可以理解为 diff)，如果不 render，就不会 reconction。\n减少计算的量。主要是减少重复计算，对于函数式组件来说，每次 render 都会重新从头开始执行函数调用。\n在使用类组件的时候，使用的 React 优化 API 主要是：shouldComponentUpdate 和 PureComponent，这两个 API 所提供的解决思路都是为了减少重新 render 的次数，主要是减少父组件更新而子组件也更新的情况，虽然也可以在 state 更新的时候阻止当前组件渲染，如果要这么做的话，证明你这个属性不适合作为 state，而应该作为静态属性或者放在 class 外面作为一个简单的变量 。\n但是在函数式组件里面没有声明周期也没有类，那如何来做性能优化呢？\nReact.memo 首先要介绍的就是 React.memo，这个 API 可以说是对标类组件里面的 PureComponent，这是可以减少重新 render 的次数的。\n可能产生性能问题的例子 举个例子，首先我们看两段代码：\n在根目录有一个 index.js，代码如下，实现的东西大概就是：上面一个 title，中间一个 button(点击 button 修改 title)，下面一个木偶组件，传递一个 name 进去。\n// index.js import React, { useState } from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom\u0026#34;; import Child from \u0026#39;./child\u0026#39; function App() { const [title, setTitle] = useState(\u0026#34;这是一个 title\u0026#34;) return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{ title }\u0026lt;/h1\u0026gt; \u0026lt;button onClick={() =\u0026gt; setTitle(\u0026#34;title 已经改变\u0026#34;)}\u0026gt;改名字\u0026lt;/button\u0026gt; \u0026lt;Child name=\u0026#34;桃桃\u0026#34;\u0026gt;\u0026lt;/Child\u0026gt; \u0026lt;/div\u0026gt; ); } const rootElement = document.getElementById(\u0026#34;root\u0026#34;); ReactDOM.render(\u0026lt;App /\u0026gt;, rootElement); 在同级目录有一个 child.js\n// child.js import React from \u0026#34;react\u0026#34;; function Child(props) { console.log(props.name) return \u0026lt;h1\u0026gt;{props.name}\u0026lt;/h1\u0026gt; } export default Child 当首次渲染的时候的效果如下：\n并且控制台会打印\u0026quot;桃桃”，证明 Child 组件渲染了。\n接下来点击改名字这个 button，页面会变成：\ntitle 已经改变了，而且控制台也打印出\u0026quot;桃桃\u0026quot;，可以看到虽然我们改的是父组件的状态，父组件重新渲染了，并且子组件也重新渲染了。你可能会想，传递给 Child 组件的 props 没有变，要是 Child 组件不重新渲染就好了，为什么会这么想呢？\n我们假设 Child 组件是一个非常大的组件，渲染一次会消耗很多的性能，那么我们就应该尽量减少这个组件的渲染，否则就容易产生性能问题，所以子组件如果在 props 没有变化的情况下，就算父组件重新渲染了，子组件也不应该渲染。\n那么我们怎么才能做到在 props 没有变化的时候，子组件不渲染呢？\n答案就是用 React.memo 在给定相同 props 的情况下渲染相同的结果，并且通过记忆组件渲染结果的方式来提高组件的性能表现。\nReact.memo 的基础用法 把声明的组件通过React.memo包一层就好了，React.memo其实是一个高阶函数，传递一个组件进去，返回一个可以记忆的组件。\nfunction Component(props) { /* 使用 props 渲染 */ } const MyComponent = React.memo(Component); 那么上面例子的 Child 组件就可以改成这样：\nimport React from \u0026#34;react\u0026#34;; function Child(props) { console.log(props.name) return \u0026lt;h1\u0026gt;{props.name}\u0026lt;/h1\u0026gt; } export default React.memo(Child) 通过 React.memo 包裹的组件在 props 不变的情况下，这个被包裹的组件是不会重新渲染的，也就是说上面那个例子，在我点击改名字之后，仅仅是 title 会变，但是 Child 组件不会重新渲染（表现出来的效果就是 Child 里面的 log 不会在控制台打印出来），会直接复用最近一次渲染的结果。\n这个效果基本跟类组件里面的 PureComponent效果极其类似，只是前者用于函数组件，后者用于类组件。\nReact.memo 高级用法 默认情况下其只会对 props 的复杂对象做浅层对比(浅层对比就是只会对比前后两次 props 对象引用是否相同，不会对比对象里面的内容是否相同)，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。\nfunction MyComponent(props) { /* 使用 props 渲染 */ } function areEqual(prevProps, nextProps) { /* 如果把 nextProps 传入 render 方法的返回结果与 将 prevProps 传入 render 方法的返回结果一致则返回 true， 否则返回 false */ } export default React.memo(MyComponent, areEqual); 此部分来自于 React 官网。\n如果你有在类组件里面使用过 shouldComponentUpdate() 这个方法，你会对 React.memo 的第二个参数非常的熟悉，不过值得注意的是，如果 props 相等，areEqual 会返回 true；如果 props 不相等，则返回 false。这与 shouldComponentUpdate 方法的返回值相反。\nuseCallback 现在根据上面的例子，再改一下需求，在上面的需求上增加一个副标题，并且有一个修改副标题的 button，然后把修改标题的 button 放到 Child 组件里。\n把修改标题的 button 放到 Child 组件的目的是，将修改 title 的事件通过 props 传递给 Child 组件，然后观察这个事件可能会引起性能问题。\n首先看代码：\n父组件 index.js\n// index.js import React, { useState } from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom\u0026#34;; import Child from \u0026#34;./child\u0026#34;; function App() { const [title, setTitle] = useState(\u0026#34;这是一个 title\u0026#34;); const [subtitle, setSubtitle] = useState(\u0026#34;我是一个副标题\u0026#34;); const callback = () =\u0026gt; { setTitle(\u0026#34;标题改变了\u0026#34;); }; return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{title}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{subtitle}\u0026lt;/h2\u0026gt; \u0026lt;button onClick={() =\u0026gt; setSubtitle(\u0026#34;副标题改变了\u0026#34;)}\u0026gt;改副标题\u0026lt;/button\u0026gt; \u0026lt;Child onClick={callback} name=\u0026#34;桃桃\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } const rootElement = document.getElementById(\u0026#34;root\u0026#34;); ReactDOM.render(\u0026lt;App /\u0026gt;, rootElement); 子组件 child.js\nimport React from \u0026#34;react\u0026#34;; function Child(props) { console.log(props); return ( \u0026lt;\u0026gt; \u0026lt;button onClick={props.onClick}\u0026gt;改标题\u0026lt;/button\u0026gt; \u0026lt;h1\u0026gt;{props.name}\u0026lt;/h1\u0026gt; \u0026lt;/\u0026gt; ); } export default React.memo(Child); 首次渲染的效果\n这段代码在首次渲染的时候会显示上图的样子，并且控制台会打印出桃桃。\n然后当我点击改副标题这个 button 之后，副标题会变为「副标题改变了」，并且控制台会再次打印出桃桃，这就证明了子组件又重新渲染了，但是子组件没有任何变化，那么这次 Child 组件的重新渲染就是多余的，那么如何避免掉这个多余的渲染呢？\n找原因 我们在解决问题的之前，首先要知道这个问题是什么原因导致的？\n咱们来分析，一个组件重新重新渲染，一般三种情况：\n要么是组件自己的状态改变\n要么是父组件重新渲染，导致子组件重新渲染，但是父组件的 props 没有改版\n要么是父组件重新渲染，导致子组件重新渲染，但是父组件传递的 props 改变\n接下来用排除法查出是什么原因导致的：\n第一种很明显就排除了，当点击改副标题 的时候并没有去改变 Child 组件的状态；\n第二种情况好好想一下，是不是就是在介绍 React.memo 的时候情况，父组件重新渲染了，父组件传递给子组件的 props 没有改变，但是子组件重新渲染了，我们这个时候用 React.memo 来解决了这个问题，所以这种情况也排除。\n那么就是第三种情况了，当父组件重新渲染的时候，传递给子组件的 props 发生了改变，再看传递给 Child 组件的就两个属性，一个是 name，一个是 onClick ，name 是传递的常量，不会变，变的就是 onClick 了，为什么传递给 onClick 的 callback 函数会发生改变呢？在文章的开头就已经说过了，在函数式组件里每次重新渲染，函数组件都会重头开始重新执行，那么这两次创建的 callback 函数肯定发生了改变，所以导致了子组件重新渲染。\n如何解决 找到问题的原因了，那么解决办法就是在函数没有改变的时候，重新渲染的时候保持两个函数的引用一致，这个时候就要用到 useCallback 这个 API 了。\nuseCallback 使用方法 const callback = () =\u0026gt; { doSomething(a, b); } const memoizedCallback = useCallback(callback, [a, b]) 把函数以及依赖项作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，这个 memoizedCallback 只有在依赖项有变化的时候才会更新。\n那么可以将 index.js 修改为这样：\n// index.js import React, { useState, useCallback } from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom\u0026#34;; import Child from \u0026#34;./child\u0026#34;; function App() { const [title, setTitle] = useState(\u0026#34;这是一个 title\u0026#34;); const [subtitle, setSubtitle] = useState(\u0026#34;我是一个副标题\u0026#34;); const callback = () =\u0026gt; { setTitle(\u0026#34;标题改变了\u0026#34;); }; // 通过 useCallback 进行记忆 callback，并将记忆的 callback 传递给 Child const memoizedCallback = useCallback(callback, []) return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{title}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{subtitle}\u0026lt;/h2\u0026gt; \u0026lt;button onClick={() =\u0026gt; setSubtitle(\u0026#34;副标题改变了\u0026#34;)}\u0026gt;改副标题\u0026lt;/button\u0026gt; \u0026lt;Child onClick={memoizedCallback} name=\u0026#34;桃桃\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } const rootElement = document.getElementById(\u0026#34;root\u0026#34;); ReactDOM.render(\u0026lt;App /\u0026gt;, rootElement); 这样我们就可以看到只会在首次渲染的时候打印出桃桃，当点击改副标题和改标题的时候是不会打印桃桃的。\n如果我们的 callback 传递了参数，当参数变化的时候需要让它重新添加一个缓存，可以将参数放在 useCallback 第二个参数的数组中，作为依赖的形式，使用方式跟 useEffect 类似。\nuseMemo 在文章的开头就已经介绍了，React 的性能优化方向主要是两个：一个是减少重新 render 的次数(或者说减少不必要的渲染)，另一个是减少计算的量。\n前面介绍的 React.memo 和 useCallback 都是为了减少重新 render 的次数。对于如何减少计算的量，就是 useMemo 来做的，接下来我们看例子。\nfunction App() { const [num, setNum] = useState(0); // 一个非常耗时的一个计算函数 // result 最后返回的值是 49995000 function expensiveFn() { let result = 0; for (let i = 0; i \u0026lt; 10000; i++) { result += i; } console.log(result) // 49995000 return result; } const base = expensiveFn(); return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;count：{num}\u0026lt;/h1\u0026gt; \u0026lt;button onClick={() =\u0026gt; setNum(num + base)}\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 首次渲染的效果如下：\n这个例子功能很简单，就是点击 +1 按钮，然后会将现在的值(num) 与 计算函数 (expensiveFn) 调用后的值相加，然后将和设置给 num 并显示出来，在控制台会输出 49995000。\n可能产生性能问题 就算是一个看起来很简单的组件，也有可能产生性能问题，通过这个最简单的例子来看看还有什么值得优化的地方。\n首先我们把 expensiveFn 函数当做一个计算量很大的函数(比如你可以把 i 换成 10000000)，然后当我们每次点击 +1 按钮的时候，都会重新渲染组件，而且都会调用 expensiveFn 函数并输出 49995000。由于每次调用 expensiveFn 所返回的值都一样，所以我们可以想办法将计算出来的值缓存起来，每次调用函数直接返回缓存的值，这样就可以做一些性能优化。\nuseMemo 做计算结果缓存 针对上面产生的问题，就可以用 useMemo 来缓存 expensiveFn 函数执行后的值。\n首先介绍一下 useMemo 的基本的使用方法，详细的使用方法可见官网：\nfunction computeExpensiveValue() { // 计算量很大的代码 return xxx } const memoizedValue = useMemo(computeExpensiveValue, [a, b]); useMemo 的第一个参数就是一个函数，这个函数返回的值会被缓存起来，同时这个值会作为 useMemo 的返回值，第二个参数是一个数组依赖，如果数组里面的值有变化，那么就会重新去执行第一个参数里面的函数，并将函数返回的值缓存起来并作为 useMemo 的返回值 。\n了解了 useMemo 的使用方法，然后就可以对上面的例子进行优化，优化代码如下：\nfunction App() { const [num, setNum] = useState(0); function expensiveFn() { let result = 0; for (let i = 0; i \u0026lt; 10000; i++) { result += i; } console.log(result) return result; } const base = useMemo(expensiveFn, []); return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;count：{num}\u0026lt;/h1\u0026gt; \u0026lt;button onClick={() =\u0026gt; setNum(num + base)}\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 执行上面的代码，然后现在可以观察无论我们点击 +1多少次，只会输出一次 49995000，这就代表 expensiveFn 只执行了一次，达到了我们想要的效果。\n小结 useMemo 的使用场景主要是用来缓存计算量比较大的函数结果，可以避免不必要的重复计算，有过 vue 的使用经历同学可能会觉得跟 Vue 里面的计算属性有异曲同工的作用。\n不过另外提醒两点\n一、如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值；\n二、计算量如果很小的计算函数，也可以选择不使用 useMemo，因为这点优化并不会作为性能瓶颈的要点，反而可能使用错误还会引起一些性能问题。\n总结 对于性能瓶颈可能对于小项目遇到的比较少，毕竟计算量小、业务逻辑也不复杂，但是对于大项目，很可能是会遇到性能瓶颈的，但是对于性能优化有很多方面：网络、关键路径渲染、打包、图片、缓存等等方面，具体应该去优化哪方面还得自己去排查，本文只介绍了性能优化中的冰山一角：运行过程中 React 的优化。\nReact 的优化方向：减少 render 的次数；减少重复计算。 如何去找到 React 中导致性能问题的方法，见 useCallback 部分。 合理的拆分组件其实也是可以做性能优化的，你这么想，如果你整个页面只有一个大的组件，那么当 props 或者 state 变更之后，需要 reconction 的是整个组件，其实你只是变了一个文字，如果你进行了合理的组件拆分，你就可以控制更小粒度的更新。 合理拆分组件还有很多其他好处，比如好维护，而且这是学习组件化思想的第一步，合理的拆分组件又是一门艺术了，如果拆分得不合理，就有可能导致状态混乱，多敲代码多思考。\n推荐文章 我这里只介绍了函数式组件的优化方式，更多的 React 优化技巧可以阅读下面的文章：\n21 个 React 性能优化技巧 浅谈React性能优化的方向 后记 我是桃翁，一个爱思考的前端er，想了解关于更多的前端相关的，请关注我的公号：「前端桃园」，如果想加入交流群关注公众号后回复「微信」拉你进群\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/280/","summary":"前言 目的 本文只介绍函数式组件特有的性能优化方式，类组件和函数式组件都有的不介绍，比如 key 的使用。另外本文不详细的介绍 API 的使用，后面也许会写，其实想用好 hooks 还是蛮难的。\n面向读者 有过 React 函数式组件的实践，并且对 hooks 有过实践，对 useState、useCallback、useMemo API 至少看过文档，如果你有过对类组件的性能优化经历，那么这篇文章会让你有种熟悉的感觉。\nReact 性能优化思路 我觉得React 性能优化的理念的主要方向就是这两个：\n减少重新 render 的次数。因为在 React 里最重(花时间最长)的一块就是 reconction(简单的可以理解为 diff)，如果不 render，就不会 reconction。\n减少计算的量。主要是减少重复计算，对于函数式组件来说，每次 render 都会重新从头开始执行函数调用。\n在使用类组件的时候，使用的 React 优化 API 主要是：shouldComponentUpdate 和 PureComponent，这两个 API 所提供的解决思路都是为了减少重新 render 的次数，主要是减少父组件更新而子组件也更新的情况，虽然也可以在 state 更新的时候阻止当前组件渲染，如果要这么做的话，证明你这个属性不适合作为 state，而应该作为静态属性或者放在 class 外面作为一个简单的变量 。\n但是在函数式组件里面没有声明周期也没有类，那如何来做性能优化呢？\nReact.memo 首先要介绍的就是 React.memo，这个 API 可以说是对标类组件里面的 PureComponent，这是可以减少重新 render 的次数的。\n可能产生性能问题的例子 举个例子，首先我们看两段代码：\n在根目录有一个 index.js，代码如下，实现的东西大概就是：上面一个 title，中间一个 button(点击 button 修改 title)，下面一个木偶组件，传递一个 name 进去。","title":"如何对 React 函数式组件进行优化"},{"content":"在 v 站上看一个自己非常喜欢的博客主题：阿星Plus，但是由于是用 .Net 写的，自己完全不熟悉 .Net，所以就准备自己按照他的博客风格写一份 typecho的主题。\n我也没接触过 PHP，在安装环境这一步就把我难住了，历经磨难，最终选择了 XAMPP 来搭建 PHP 环境，在这里记下搭建的过程和遇到的坑。\n我刚开始去搜索 「XAMPP 搭建 typecho」，然而由于 typecho 资料太少，根本搜不到，所以选择了搜索「XAMPP 搭建 wordpress」，然后才一步一步的安装好了 XAMPP。\n什么是 XAMPP XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。\n安装 XAMPP 首先要知道 XAMPP 有两中安装方式：\n第一种：OS X的XAMPP是OS X的本地安装程序。它将Apache，PHP和其他XAMPP组件直接安装在OS X系统的 /Applications/XAMPP 文件夹中。 第二种：XAMPP-VM是OS X的虚拟机，它包括Apache，PHP和其他XAMPP组件，并在OS X系统上的基于Linux的虚拟机中运行它们。 这两种方式我都试过，相信我，采用第一种安装方式。\n值得提醒的是在 XMAPP 首页下载的是 OS X 的虚拟机的，下载的时候文件名称会有 vm ，要下载安装程序的，要去 Download 里面下载，文件名称会有 installer 的字样。\n使用 XAMPP 这里我写的会比较简单，自己随便看看就知道怎么用了。\n安装好了进入界面，直接点 Start All就行，如果上图中花框的灯是像我图中的绿色就代表启动成功，失败了就会是红色。\n安装 typecho 将官网下载的 typecho 安装包下载下来。 将安装包移动到 htdocs 文件夹下并解压，htdocs 文件夹路径如图，在应用程序 -\u0026gt; XAMPP-\u0026gt;htdocs 访问 localhost/build 即可进入安装页面进行 typecho 的安装。 遇到的问题 1. XAMPP mysql 无法启动的问题 我这里遇到问题是由于端口和我本地的 mysql 端口(3306)冲突了，解决的方法就是修改端口号：\n选中 mysql，然后再点击 configure，然后再将弹窗里面的 port 将 3306 改成其他的。\n2. 安装 typecho 报：对不起,无法连接数据库,请先检查数据库配置再继续进行安装。 问题肯定就是数据库的问题，需要在数据库里建立一个名为 typecho 的数据库，步骤如下：\n打开 phpmyadmin，地址是：http://localhost/phpmyadmin。 新建数据库 名为 typecho 的数据库。 在安装界面数据库的密码不填，因为默认 phpmyadmin 的数据库是没有密码。 经过上面三个步骤应该就可以安装成功了！\n做完笔记我就要开始写我的主题了！\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/272/","summary":"在 v 站上看一个自己非常喜欢的博客主题：阿星Plus，但是由于是用 .Net 写的，自己完全不熟悉 .Net，所以就准备自己按照他的博客风格写一份 typecho的主题。\n我也没接触过 PHP，在安装环境这一步就把我难住了，历经磨难，最终选择了 XAMPP 来搭建 PHP 环境，在这里记下搭建的过程和遇到的坑。\n我刚开始去搜索 「XAMPP 搭建 typecho」，然而由于 typecho 资料太少，根本搜不到，所以选择了搜索「XAMPP 搭建 wordpress」，然后才一步一步的安装好了 XAMPP。\n什么是 XAMPP XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。\n安装 XAMPP 首先要知道 XAMPP 有两中安装方式：\n第一种：OS X的XAMPP是OS X的本地安装程序。它将Apache，PHP和其他XAMPP组件直接安装在OS X系统的 /Applications/XAMPP 文件夹中。 第二种：XAMPP-VM是OS X的虚拟机，它包括Apache，PHP和其他XAMPP组件，并在OS X系统上的基于Linux的虚拟机中运行它们。 这两种方式我都试过，相信我，采用第一种安装方式。\n值得提醒的是在 XMAPP 首页下载的是 OS X 的虚拟机的，下载的时候文件名称会有 vm ，要下载安装程序的，要去 Download 里面下载，文件名称会有 installer 的字样。\n使用 XAMPP 这里我写的会比较简单，自己随便看看就知道怎么用了。\n安装好了进入界面，直接点 Start All就行，如果上图中花框的灯是像我图中的绿色就代表启动成功，失败了就会是红色。\n安装 typecho 将官网下载的 typecho 安装包下载下来。 将安装包移动到 htdocs 文件夹下并解压，htdocs 文件夹路径如图，在应用程序 -\u0026gt; XAMPP-\u0026gt;htdocs 访问 localhost/build 即可进入安装页面进行 typecho 的安装。 遇到的问题 1.","title":"在mac上安装XAMPP并搭建 typecho 博客"},{"content":"阅读文章之前你可以花半分钟想想你觉得你自己最虚度的时光是时候？\n夸自己 可能在很多人的眼里，我以及算是一个努力、上进的人了，那是因为他们只看到了我努力的时候，没有看到我虚度的时候。\n一般在工作日我还是非常的恪守自己的原则，在不上班的时候都会提升自己，比如看书、听课、阅读、写作等方式。跟一般的人比起来更努力的点就是早上我会先学习一个小时，我一般 7 点半就会起床，然后看书或者听课一小时后，也就是 8 点半的时候才会去洗漱，下班回来也很少除了和女朋友每天至少视频半小时外，其余时间用得都很充分(用的方向对不对先不谈)。\n虚度 接下来就说到重点了，虚度的时光。\n我觉得我最虚度的时光就是周末，本来会有充足的时间来学习，但是当打开电脑突然不知道应该干什么(这个时候非常的难受，经常在这个时候想做人的意义是什么)，然后就去看书，看了一会儿还是会觉得无聊，然后就说打会儿游戏吧，我一般有个习惯就是一直会打到输才会停止，往往经常又是连赢好几把，导致有可能一打就是一上午或者一下午过去了，然后就去做饭吃。\n一旦到晚上七八点的时候，那个时候突然又觉得学习的奋劲儿又来了，然后会认真看书，看课程写文章等自己觉得对的事儿。然后就开始感叹自己白天的时间又浪费了，晚上再来补，那我们重庆人的话来说就是：「早不忙，夜慌张」。\n为什么 很好奇的是为什么工作了才会出现这种情况，而在高中大学没有出现。\n在高中的时候，我们大家的目标非常明确，就是考大学，每天要做的事情就是看书，做题就行，目的很明确，要做的事情非常的清晰，所以不会有这种不知道该干啥的情况。\n到大学的时候我长期呆在实验室，每天 11 点才到寝室，然后觉得自己应该放松了，就玩玩手机，聊聊天是应该的，这在我的大脑里是应该做的，到了周末的时候，我也觉得应该放松，所以在放假之前已经给自己订好了周末要做的事情，会出去玩，或者打游戏等。\n我觉得我就是没做好《高效能人士的七个习惯》里的要事第一。\n有兴趣的话我也可以写写这本书的读后感，这本书是今年我读的书里收益最大的书。\n相信要事第一还是不难理解，就是把最重要的事情先做。所以首先我应该找出对我来说最重要的事情，然后我没找出来，或者说我没去认真思考对于我来说最重要的事情是什么，导致我有空闲的时候不知道应该干什么，因为想干的事情太多，导致觉得都不重要，你想想你会不会有过这样的感受。\n我再说一种情况，我觉得大部分人也有过这种经历，在工作日的时候想做的事情很多，然后把原因归结为上班太忙，所以在工作日不做，准备打算到周末去做，然而到周末了，往往又由于想做的事情太多，导致最后不做了。\n然后我回想我工作以前为什么没有这种状态，感觉每天都知道自己应该干啥，就算是打游戏也知道自己该打游戏了。\n如何解决 这些都是没有做到要事第一的第一步，找出最重要的事情。\n那么如何找到最重要的事情呢，我觉得一个很好的方法就是「做减法」。做加法谁都会做，想到什么事情就忘自己的待办事项或者大脑里面加就行了，但是这样就会导致要做的事情越来越多，最后太多了，然后都不做了。\n如果做减法我觉得可以用《搞定》书中的 GTD 方法来帮助我们完成，相信很多人对 GTD 的印象只是存在于写 Todo List，然后把做完的事情标记为完成。其实这只是其中的一个小步骤，GTD 最核心的思想是想通过工具把事情从我们的大脑里面清空，让我们的大脑能专注做一件事情，而不是在做某件事情的时候，又想到其他事情没做，这样就会分心，效率就会大大的降低。\nGTD 会有五个核心步骤：收集、处理、组织、检查、做。其中收集的作用就是把你的想法从大脑清空，通过工具帮你把想法记下来，处理过程就是我们做减法的过程，将一些不重要的东西给丢掉。\n如果有兴趣，GTD 后面我专门写一篇文章来介绍，非常有效的一种习惯。\n丢掉之后还有一些你需要的做的事情，然后再把这些需要做的事情再去认真思考什么事情是最重要的，然后再去做。\n总结 文章写了为什么会有虚度的感觉，然后为什么会产生虚度的感觉，然后结合 GTD 给出了解决方案，希望能给你带来启发。\n希望你在留言区里留出你什么时候会最感觉自己虚度了，然后又是怎么去解决的呢？\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/270/","summary":"阅读文章之前你可以花半分钟想想你觉得你自己最虚度的时光是时候？\n夸自己 可能在很多人的眼里，我以及算是一个努力、上进的人了，那是因为他们只看到了我努力的时候，没有看到我虚度的时候。\n一般在工作日我还是非常的恪守自己的原则，在不上班的时候都会提升自己，比如看书、听课、阅读、写作等方式。跟一般的人比起来更努力的点就是早上我会先学习一个小时，我一般 7 点半就会起床，然后看书或者听课一小时后，也就是 8 点半的时候才会去洗漱，下班回来也很少除了和女朋友每天至少视频半小时外，其余时间用得都很充分(用的方向对不对先不谈)。\n虚度 接下来就说到重点了，虚度的时光。\n我觉得我最虚度的时光就是周末，本来会有充足的时间来学习，但是当打开电脑突然不知道应该干什么(这个时候非常的难受，经常在这个时候想做人的意义是什么)，然后就去看书，看了一会儿还是会觉得无聊，然后就说打会儿游戏吧，我一般有个习惯就是一直会打到输才会停止，往往经常又是连赢好几把，导致有可能一打就是一上午或者一下午过去了，然后就去做饭吃。\n一旦到晚上七八点的时候，那个时候突然又觉得学习的奋劲儿又来了，然后会认真看书，看课程写文章等自己觉得对的事儿。然后就开始感叹自己白天的时间又浪费了，晚上再来补，那我们重庆人的话来说就是：「早不忙，夜慌张」。\n为什么 很好奇的是为什么工作了才会出现这种情况，而在高中大学没有出现。\n在高中的时候，我们大家的目标非常明确，就是考大学，每天要做的事情就是看书，做题就行，目的很明确，要做的事情非常的清晰，所以不会有这种不知道该干啥的情况。\n到大学的时候我长期呆在实验室，每天 11 点才到寝室，然后觉得自己应该放松了，就玩玩手机，聊聊天是应该的，这在我的大脑里是应该做的，到了周末的时候，我也觉得应该放松，所以在放假之前已经给自己订好了周末要做的事情，会出去玩，或者打游戏等。\n我觉得我就是没做好《高效能人士的七个习惯》里的要事第一。\n有兴趣的话我也可以写写这本书的读后感，这本书是今年我读的书里收益最大的书。\n相信要事第一还是不难理解，就是把最重要的事情先做。所以首先我应该找出对我来说最重要的事情，然后我没找出来，或者说我没去认真思考对于我来说最重要的事情是什么，导致我有空闲的时候不知道应该干什么，因为想干的事情太多，导致觉得都不重要，你想想你会不会有过这样的感受。\n我再说一种情况，我觉得大部分人也有过这种经历，在工作日的时候想做的事情很多，然后把原因归结为上班太忙，所以在工作日不做，准备打算到周末去做，然而到周末了，往往又由于想做的事情太多，导致最后不做了。\n然后我回想我工作以前为什么没有这种状态，感觉每天都知道自己应该干啥，就算是打游戏也知道自己该打游戏了。\n如何解决 这些都是没有做到要事第一的第一步，找出最重要的事情。\n那么如何找到最重要的事情呢，我觉得一个很好的方法就是「做减法」。做加法谁都会做，想到什么事情就忘自己的待办事项或者大脑里面加就行了，但是这样就会导致要做的事情越来越多，最后太多了，然后都不做了。\n如果做减法我觉得可以用《搞定》书中的 GTD 方法来帮助我们完成，相信很多人对 GTD 的印象只是存在于写 Todo List，然后把做完的事情标记为完成。其实这只是其中的一个小步骤，GTD 最核心的思想是想通过工具把事情从我们的大脑里面清空，让我们的大脑能专注做一件事情，而不是在做某件事情的时候，又想到其他事情没做，这样就会分心，效率就会大大的降低。\nGTD 会有五个核心步骤：收集、处理、组织、检查、做。其中收集的作用就是把你的想法从大脑清空，通过工具帮你把想法记下来，处理过程就是我们做减法的过程，将一些不重要的东西给丢掉。\n如果有兴趣，GTD 后面我专门写一篇文章来介绍，非常有效的一种习惯。\n丢掉之后还有一些你需要的做的事情，然后再把这些需要做的事情再去认真思考什么事情是最重要的，然后再去做。\n总结 文章写了为什么会有虚度的感觉，然后为什么会产生虚度的感觉，然后结合 GTD 给出了解决方案，希望能给你带来启发。\n希望你在留言区里留出你什么时候会最感觉自己虚度了，然后又是怎么去解决的呢？","title":"如果解决虚度时光，首先做到要事第一"},{"content":"遇到问题 今天遇到一个 useEffect 的问题，遇到一个问题：在 useEffect 里面发异步请求，然后第二个参数的依赖也是异步请求之后得到的结果，然后就导致最终结果会请求两次 useEffect 里的函数。\nconst [metaKey, setMetaKey] = useState\u0026lt;string[]\u0026gt;([]) // useEffect1 useEffect(() =\u0026gt; { getServiceCoreIndexParam().then((res: IResult) =\u0026gt; { setMetaKey(res.data.defaultValue) return res.data }) }, []) // useEffect2 useEffect(() =\u0026gt; { getAdvisorIndexTable({ visitdate: props.visitdate, advisorSupervisor: props.advisorSupervisor, comparevisitdate: props.comparevisitdate, metaKeys: metaKey || [] }).then((res: IResult) =\u0026gt; { res.success \u0026amp;\u0026amp; setTable(res.data) }) }, [props.visitdate, props.advisorSupervisor, metaKey, props.comparevisitdate]) 分析一下这段代码，首先在组件 mount 的时候，useEffect2 会调用一次 getAdvisorIndexTable，当 useEffect1 执行完毕之后 setMetaKey 后，由于 metaKey 发生改变，导致 getAdvisorIndexTable 还会调用一次，这很明显是我们不想看到的结果，因为这只是一个默认请求，然而发了两次请求。\n其实最开始我以为 useEffect 如果有了第二个参数，在 mount 的时候并不会去调用回调，而仅仅是在依赖变化后才调用回调，后来发现我的依赖没有变，也调用了，所以我就写了个 demo 试了下，发现 useEffect 在 mount 的时候就会默认调用一次回调。\n解决办法 那么遇到这种情况应该怎么才能让 useEffect 在只有依赖变化的时候才去执行呢？或者说如何让我这个代码只请求一次呢？\n方法一\n通过增加一个 mount 的一个 state，默认为 false，当 mount 过后就把这个 state 设置为 true，然后在 useEffect 内部去判断 mount 的逻辑和依赖更新的逻辑。\n上面的代码就可以改成这样：\nconst [metaKey, setMetaKey] = useState\u0026lt;string[]\u0026gt;([]) const [status, setStatus] = useState(false) // 是否 mount 过的状态 useEffect(() =\u0026gt; { getServiceCoreIndexParam().then((res: IResult) =\u0026gt; { setStatus(true) setMetaKey(res.data.defaultValue) return res.data }) }, []) useEffect(() =\u0026gt; { if(status) { getAdvisorIndexTable({ visitdate: props.visitdate, advisorSupervisor: props.advisorSupervisor, comparevisitdate: props.comparevisitdate, metaKeys: metaKey || [] }).then((res: IResult) =\u0026gt; { res.success \u0026amp;\u0026amp; setTable(res.data) }) } }, [props.visitdate, props.advisorSupervisor, metaKey, props.comparevisitdate]) 新增了一个 status 状态，用来标识是否 mount 过，在第一个 useEffect 里当异步方法请求完了之后回来再把 status 设置为 true，那么当第一次渲染的时候第二个 useEffect 里 status 是 false，里面的逻辑不会执行，当第一个 useEffect 异步请求回调回来的时候 setMetaKey 会更新组件，那么这个时候第二个 useEffect 里也会去再次调用 effect，而且这个时候 status 是 true 了，这样就达到了我们想要的效果。\n方法二\n可以写一个 mount 的时候不执行的 hooks。\nfunction useUpdateEffect(cb: () =\u0026gt; void, depend: any[]) { const [status, setStatus] = useState(false) useEffect(() =\u0026gt; { if(status) { cb() } else { setStatus(true) } }, depend) } const [metaKey, setMetaKey] = useState\u0026lt;string[]\u0026gt;([]) useEffect(() =\u0026gt; { getServiceCoreIndexParam().then((res: IResult) =\u0026gt; { setMetaKey(res.data.defaultValue) return res.data }) }, []) useUpdateEffect(() =\u0026gt; { getAdvisorIndexTable({ visitdate: props.visitdate, advisorSupervisor: props.advisorSupervisor, comparevisitdate: props.comparevisitdate, metaKeys: metaKey || [] }).then((res: IResult) =\u0026gt; { res.success \u0026amp;\u0026amp; setTable(res.data) }) }, [props.visitdate, props.advisorSupervisor, metaKey, props.comparevisitdate]) useUpdateEffect 就是相当于第一次调用 useEffect 的回调的时候不执行，第二次的时候才执行，基本上达到要求。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/271/","summary":"遇到问题 今天遇到一个 useEffect 的问题，遇到一个问题：在 useEffect 里面发异步请求，然后第二个参数的依赖也是异步请求之后得到的结果，然后就导致最终结果会请求两次 useEffect 里的函数。\nconst [metaKey, setMetaKey] = useState\u0026lt;string[]\u0026gt;([]) // useEffect1 useEffect(() =\u0026gt; { getServiceCoreIndexParam().then((res: IResult) =\u0026gt; { setMetaKey(res.data.defaultValue) return res.data }) }, []) // useEffect2 useEffect(() =\u0026gt; { getAdvisorIndexTable({ visitdate: props.visitdate, advisorSupervisor: props.advisorSupervisor, comparevisitdate: props.comparevisitdate, metaKeys: metaKey || [] }).then((res: IResult) =\u0026gt; { res.success \u0026amp;\u0026amp; setTable(res.data) }) }, [props.visitdate, props.advisorSupervisor, metaKey, props.comparevisitdate]) 分析一下这段代码，首先在组件 mount 的时候，useEffect2 会调用一次 getAdvisorIndexTable，当 useEffect1 执行完毕之后 setMetaKey 后，由于 metaKey 发生改变，导致 getAdvisorIndexTable 还会调用一次，这很明显是我们不想看到的结果，因为这只是一个默认请求，然而发了两次请求。","title":"如何让 useEffect 只在依赖变化的时候执行"},{"content":"最近看到这样一段文字，然后掘金的运营还发了一个沸点，看了心理觉得真不是滋味呀。\n图片具体内容如下：\n如果你在阅读文章的过程中，觉得有不同意的，请憋住，把文章看完再说。\n现在的作者写个文章太难了呀。\n写个文章还要被喷写得不好，写得不够有深度要被说没有干货；\n写得有深度的又有人说看不懂，这怪作者吗？\n咋不怪读者要求太多，自己看不适合自己的水平的文章，自己知道的东西就觉得人人都知道，却不知道在中国随便一个你觉得理所当然的小知识点，或者说常识，都会有至少 1 亿人不知道。\n很多人在评论里说现在很多面试文章，或者 list 文章没啥质量，然后获赞很多，然后自己辛辛苦苦的写的干货没人点赞，在这个社会不是很正常么，想想马云工作的强度和在工地里工作的工人相比，工人不努力吗，难道不是辛辛苦苦吗？但是赚钱的差距就是这么大，这个社会就是这么现实，归根到底工人所做的工作价值太少了，为什么有些干货价值少，请继续阅读。\n##面试题和 list 文章 VS “所谓的干货”\n说说为什么面试题和 list 文章，面试题和 list 解决了什么问题？\n为什么会有这么多人习惯给这些文章点赞，我觉得最主要的一个原因是缓解了读者的焦虑，第二个原因是仅仅是为了收藏。\n缓解了读者的焦虑\n对于面试，肯定是永恒的话题，总想着换个好公司，涨工资，但是自己又太菜，想着有没有什么捷径，想了想，刷面经吧，刷了就等于会了，会了就等于能进大公司了。这种心理就跟买课一样，买了就觉得会了，然后生怕错过什么技术，买了一大堆，结果每个课程就只看了前面的开篇就没下文了，你能说这些卖课的不对吗？是你自己不看，能怪别人么？\n然后说道别人发面试题，就想分享给大家，毕竟面试题往往都是对于前端开发来说比较重要的东西，是可以给你不仅是面经方面的东西，而且对于刚入坑前端的来说，不知道应该学啥，什么东西重要，什么东西应该先学什么的一个方向。\n收藏\nlist 愿意点赞的往往是想收藏，然后可能是设计的原因，不管是哪个平台都一样，把点赞这个功能做得特别的容易，而收藏就要繁琐或者说不那么让用户想去点。\n然后给大家一个建议，收藏这功能真的比点赞好用，可以对文章进行分类，自己可以梳理你的知识体系，然后建好分类，然后再分类收藏文章，这比起你点赞了，然后后面想去看的时候发现太乱了，又不好找，就给你不看文章找了个借口，导致点赞了一大堆，最终有收获的并不多。\n我觉得在收藏这方便来说，个人觉得思否做得比掘金好(思否小姐姐是不是要给我广告费了)。\n所谓的干货\n干货这个词我的理解就是有价值，如果这篇文章对你有价值，那么就是干货，没有价值，你可能就会觉得是水文。\n注意，我这里说的是对你有价值，才算是干货。因为一篇简单的文章，对于新手来说有价值，那么他觉得这篇文章就是干货，对于一个老手来说，几年前都会的东西，那么他可能就会觉得是水文。\n所以，上面说到什么「浅谈」、「说说」都是没有干货的理论，根本是个人主观臆断，这些文章对于刚入门的同学来说，可能是带来了非常大的帮助。\n注意，绝大部分人是知识的搬运工，传播者，而不是创造者，官网文档上有的东西，如果能用一种一部分人觉得通俗易懂的方式写出来也是有价值的，官方文章是普适的，但并不一定是最好的教程，而一些作者就是知识的传播者，可以理解为老师，把一些枯燥，正统的知识，通过一种针对特定人群的方式传达出来，然后学生能理解，那么就是一个好老师，好作者。这就跟你学牛顿三大定律不是去看他发布的论文一样。\n总结\n所以我觉得现在这样的面试题和 list 文章，并没有什么问题，有问题的是读者对于『点赞』可能理解得不够深刻以及没有正确的认识面试和 list 文章的价值。然后就是没有绝对的干货，一篇文章对于不同水平的人所得到的的价值是不一样的，当然我也更喜欢稀缺资源的文章，这样能给整个社区带来更大的价值。\n声明下，我基本上是不写面试题和 list 文章的，所以我并不是为了自己写了这种文章而强词夺理。\n给掘金说的 再给掘金提一点建议把，想让作者给你们带来更好的内容，这确实是双赢的局面。\n你们对于用户的非常的关心，这是应该的， 但是，是不是应该给作者一些关心呢？\n比如，对于评论的控制功能，对于投诉的功能，我看到有些作者写个文章被喷得很惨，心里真的很为她们难过，但是作为作者，一个删除评论的功能都没有，或者说不允许评论。\n一些负面的评论真的会给作者带来很大影响，其实作为作者非常的希望大家友善的提出自己的建议，当有人说一些恶意伤人的话，有时候会影响到他上班工作的心情，甚至退出掘金平台，我已经看到过好几个优秀的作者，由于受不了掘金用户的评论，然后退出了掘金。\n或者说除了赞，有一个踩的功能也挺好的，这样读者知道这篇文章写得不够好，然后自己会去改进，而不是一些「键盘侠」进行语言暴力。\n作者和读者是一个双向的关系，维持双方的利益才是正确之道，不是作者把文章写的好就能改善整个社区的，反思的不仅仅是作者，用户也应该反省一下。\n我见过最好的社区就是 Emacs 的社区，社区文章质量很高，社区里面基本上不会出现「娱乐化」，也没看到过「键盘侠」，也许是 Emcas 太难学了，导致过滤了很多不符合 Emcas 社区理念的人吧，所以 Emcas 社区不管是作者，还是仅仅是个社区的读者，都有非常高的素质，以至于社区环境很好。再次强调，不是作者写得好，社区就能搞得好的，好的作者也可能被读者被迫离开社区。\n由于我做公众号，也在掘金写文章，所以和很多的作者进行交流过，非常多的作者会以给读者带来了帮助而激发自己写更好、更多的文章，我觉得用户给到作者的不是意见而应该是建议。这样双方处于和谐、和平的状态，才更有利于社区的发展。\n我的看法 说说这位掘金用户说的东西，我相信你的初心是让社区变得更好，您说的也没有毛病，我也很赞同。\n不过您是站在道德的制高点去要求作者，要有深度，要有独立思考能力，要有干货等等要求，但是您又没有给作者钱，他并没有义务按照每个人的要求来写文章。\n这不就是白嫖要求还多的表现么。难道您说的这些要求，难道写文章的作者不知道吗，别人也许只想写下来做个笔记，好心随便分享给大家看一下。\n这就跟朋友请你到他家吃饭，亲手做菜给你吃，然后你嫌弃这个咸了，那个淡了，这个不好吃，那个卖相太丑了，白吃白喝还要色香味俱全。\n在掘金这个平台上，除了小册，没人有责任和义务把文章写得要满足所有的读者。如果小册写得不好，那确实应该要求作者改改，毕竟你花了钱，你就是『爸爸』，你就是顾客，顾客是上帝。\n所以，我觉得现在社区不仅要控制文章的质量，还要控制社员的质量，比如像之前创建小号来喷京东小姐姐刘小夕，以及小生方勤的，这种文章就不应该出现在首页，这样会给作者带来了巨大的创伤。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/255/","summary":"最近看到这样一段文字，然后掘金的运营还发了一个沸点，看了心理觉得真不是滋味呀。\n图片具体内容如下：\n如果你在阅读文章的过程中，觉得有不同意的，请憋住，把文章看完再说。\n现在的作者写个文章太难了呀。\n写个文章还要被喷写得不好，写得不够有深度要被说没有干货；\n写得有深度的又有人说看不懂，这怪作者吗？\n咋不怪读者要求太多，自己看不适合自己的水平的文章，自己知道的东西就觉得人人都知道，却不知道在中国随便一个你觉得理所当然的小知识点，或者说常识，都会有至少 1 亿人不知道。\n很多人在评论里说现在很多面试文章，或者 list 文章没啥质量，然后获赞很多，然后自己辛辛苦苦的写的干货没人点赞，在这个社会不是很正常么，想想马云工作的强度和在工地里工作的工人相比，工人不努力吗，难道不是辛辛苦苦吗？但是赚钱的差距就是这么大，这个社会就是这么现实，归根到底工人所做的工作价值太少了，为什么有些干货价值少，请继续阅读。\n##面试题和 list 文章 VS “所谓的干货”\n说说为什么面试题和 list 文章，面试题和 list 解决了什么问题？\n为什么会有这么多人习惯给这些文章点赞，我觉得最主要的一个原因是缓解了读者的焦虑，第二个原因是仅仅是为了收藏。\n缓解了读者的焦虑\n对于面试，肯定是永恒的话题，总想着换个好公司，涨工资，但是自己又太菜，想着有没有什么捷径，想了想，刷面经吧，刷了就等于会了，会了就等于能进大公司了。这种心理就跟买课一样，买了就觉得会了，然后生怕错过什么技术，买了一大堆，结果每个课程就只看了前面的开篇就没下文了，你能说这些卖课的不对吗？是你自己不看，能怪别人么？\n然后说道别人发面试题，就想分享给大家，毕竟面试题往往都是对于前端开发来说比较重要的东西，是可以给你不仅是面经方面的东西，而且对于刚入坑前端的来说，不知道应该学啥，什么东西重要，什么东西应该先学什么的一个方向。\n收藏\nlist 愿意点赞的往往是想收藏，然后可能是设计的原因，不管是哪个平台都一样，把点赞这个功能做得特别的容易，而收藏就要繁琐或者说不那么让用户想去点。\n然后给大家一个建议，收藏这功能真的比点赞好用，可以对文章进行分类，自己可以梳理你的知识体系，然后建好分类，然后再分类收藏文章，这比起你点赞了，然后后面想去看的时候发现太乱了，又不好找，就给你不看文章找了个借口，导致点赞了一大堆，最终有收获的并不多。\n我觉得在收藏这方便来说，个人觉得思否做得比掘金好(思否小姐姐是不是要给我广告费了)。\n所谓的干货\n干货这个词我的理解就是有价值，如果这篇文章对你有价值，那么就是干货，没有价值，你可能就会觉得是水文。\n注意，我这里说的是对你有价值，才算是干货。因为一篇简单的文章，对于新手来说有价值，那么他觉得这篇文章就是干货，对于一个老手来说，几年前都会的东西，那么他可能就会觉得是水文。\n所以，上面说到什么「浅谈」、「说说」都是没有干货的理论，根本是个人主观臆断，这些文章对于刚入门的同学来说，可能是带来了非常大的帮助。\n注意，绝大部分人是知识的搬运工，传播者，而不是创造者，官网文档上有的东西，如果能用一种一部分人觉得通俗易懂的方式写出来也是有价值的，官方文章是普适的，但并不一定是最好的教程，而一些作者就是知识的传播者，可以理解为老师，把一些枯燥，正统的知识，通过一种针对特定人群的方式传达出来，然后学生能理解，那么就是一个好老师，好作者。这就跟你学牛顿三大定律不是去看他发布的论文一样。\n总结\n所以我觉得现在这样的面试题和 list 文章，并没有什么问题，有问题的是读者对于『点赞』可能理解得不够深刻以及没有正确的认识面试和 list 文章的价值。然后就是没有绝对的干货，一篇文章对于不同水平的人所得到的的价值是不一样的，当然我也更喜欢稀缺资源的文章，这样能给整个社区带来更大的价值。\n声明下，我基本上是不写面试题和 list 文章的，所以我并不是为了自己写了这种文章而强词夺理。\n给掘金说的 再给掘金提一点建议把，想让作者给你们带来更好的内容，这确实是双赢的局面。\n你们对于用户的非常的关心，这是应该的， 但是，是不是应该给作者一些关心呢？\n比如，对于评论的控制功能，对于投诉的功能，我看到有些作者写个文章被喷得很惨，心里真的很为她们难过，但是作为作者，一个删除评论的功能都没有，或者说不允许评论。\n一些负面的评论真的会给作者带来很大影响，其实作为作者非常的希望大家友善的提出自己的建议，当有人说一些恶意伤人的话，有时候会影响到他上班工作的心情，甚至退出掘金平台，我已经看到过好几个优秀的作者，由于受不了掘金用户的评论，然后退出了掘金。\n或者说除了赞，有一个踩的功能也挺好的，这样读者知道这篇文章写得不够好，然后自己会去改进，而不是一些「键盘侠」进行语言暴力。\n作者和读者是一个双向的关系，维持双方的利益才是正确之道，不是作者把文章写的好就能改善整个社区的，反思的不仅仅是作者，用户也应该反省一下。\n我见过最好的社区就是 Emacs 的社区，社区文章质量很高，社区里面基本上不会出现「娱乐化」，也没看到过「键盘侠」，也许是 Emcas 太难学了，导致过滤了很多不符合 Emcas 社区理念的人吧，所以 Emcas 社区不管是作者，还是仅仅是个社区的读者，都有非常高的素质，以至于社区环境很好。再次强调，不是作者写得好，社区就能搞得好的，好的作者也可能被读者被迫离开社区。\n由于我做公众号，也在掘金写文章，所以和很多的作者进行交流过，非常多的作者会以给读者带来了帮助而激发自己写更好、更多的文章，我觉得用户给到作者的不是意见而应该是建议。这样双方处于和谐、和平的状态，才更有利于社区的发展。\n我的看法 说说这位掘金用户说的东西，我相信你的初心是让社区变得更好，您说的也没有毛病，我也很赞同。\n不过您是站在道德的制高点去要求作者，要有深度，要有独立思考能力，要有干货等等要求，但是您又没有给作者钱，他并没有义务按照每个人的要求来写文章。\n这不就是白嫖要求还多的表现么。难道您说的这些要求，难道写文章的作者不知道吗，别人也许只想写下来做个笔记，好心随便分享给大家看一下。\n这就跟朋友请你到他家吃饭，亲手做菜给你吃，然后你嫌弃这个咸了，那个淡了，这个不好吃，那个卖相太丑了，白吃白喝还要色香味俱全。\n在掘金这个平台上，除了小册，没人有责任和义务把文章写得要满足所有的读者。如果小册写得不好，那确实应该要求作者改改，毕竟你花了钱，你就是『爸爸』，你就是顾客，顾客是上帝。\n所以，我觉得现在社区不仅要控制文章的质量，还要控制社员的质量，比如像之前创建小号来喷京东小姐姐刘小夕，以及小生方勤的，这种文章就不应该出现在首页，这样会给作者带来了巨大的创伤。","title":"看到这段话，真的觉得现在的读者要求比较高"},{"content":"网上各种言论说 React 上手比 Vue 难，可能难就难不能深刻理解 JSX，或者对 ES6 的一些特性理解得不够深刻，导致觉得有些点难以理解，然后说 React 比较难上手，还反人类啥的，所以我打算写两篇文章来讲新手学习 React 的时候容易迷惑的点写出来，如果你还以其他的对于学习 React 很迷惑的点，可以在留言区里给我留言。\n为什么要引入 React 在写 React 的时候，你可能会写类似这样的代码：\nimport React from \u0026#39;react\u0026#39; function A() { // ...other code return \u0026lt;h1\u0026gt;前端桃园\u0026lt;/h1\u0026gt; } 你肯定疑惑过，下面的代码都没有用到 React，为什么要引入 React 呢？\n如果你把 import React from ‘react’ 删掉，还会报下面这样的错误：\n那么究竟是哪里用到了这个 React，导致我们引入 React 会报错呢，不懂这个原因，那么就是 JSX 没有搞得太明白。\n你可以讲上面的代码(忽略导入语句)放到在线 babel 里进行转化一下，发现 babel 会把上面的代码转化成:\nfunction A() { // ...other code return React.createElement(\u0026#34;h1\u0026#34;, null, \u0026#34;前端桃园\u0026#34;); } 因为从本质上讲，JSX 只是为 React.createElement(component, props, ...children) 函数提供的语法糖。\n为什么要用 className 而不用 class React 一开始的理念是想与浏览器的 DOM API 保持一直而不是 HTML，因为 JSX 是 JS 的扩展，而不是用来代替 HTML 的，这样会和元素的创建更为接近。在元素上设置 class 需要使用 className 这个 API：\nconst element = document.createElement(\u0026#34;div\u0026#34;) element.className = \u0026#34;hello\u0026#34; 浏览器问题，ES5 之前，在对象中不能使用保留字。以下代码在 IE8 中将会抛出错误：\nconst element = { attributes: { class: \u0026#34;hello\u0026#34; } } 解构问题，当你在解构属性的时候，如果分配一个 class 变量会出问题：\nconst { class } = { class: \u0026#39;foo\u0026#39; } // Uncaught SyntaxError: Unexpected token } const { className } = { className: \u0026#39;foo\u0026#39; } const { class: className } = { class: \u0026#39;foo\u0026#39; } 其他讨论可见：有趣的话题，为什么jsx用className而不是class\n为什么属性要用小驼峰 因为 JSX 语法上更接近 JavaScript 而不是 HTML，所以 React DOM 使用 camelCase（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定。\n来自 JSX 简介\n为什么 constructor 里要调用 super 和传递 props 这是官网的一段代码，具体见：状态(State) 和 生命周期\nclass Clock extends React.Component { constructor(props) { super(props); this.state = {date: new Date()}; } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } 而且有这么一段话，不仅让我们调用 super 还要把 props 传递进去，但是没有告诉我们为什么要这么做。 不知道你有没有疑惑过为什么要调用 super 和传递 props，接下来我们来解开谜题吧。\n为什么要调用 super\n其实这不是 React 的限制，这是 JavaScript 的限制，在构造函数里如果要调用 this，那么提前就要调用 super，在 React 里，我们常常会在构造函数里初始化 state，this.state = xxx ，所以需要调用 super。\n为什么要传递 props\n你可能以为必须给 super 传入 props，否则 React.Component 就没法初始化 this.props：\nclass Component { constructor(props) { this.props = props; // ... } } 不过，如果你不小心漏传了 props，直接调用了 super()，你仍然可以在 render 和其他方法中访问 this.props（不信的话可以试试嘛）。\n为啥这样也行？因为React 会在构造函数被调用之后，会把 props 赋值给刚刚创建的实例对象：\nconst instance = new YourComponent(props); instance.props = props; props 不传也能用，是有原因的。\n但这意味着你在使用 React 时，可以用 super() 代替 super(props) 了么？\n那还是不行的，不然官网也不会建议你调用 props 了，虽然 React 会在构造函数运行之后，为 this.props 赋值，但在 super() 调用之后与构造函数结束之前， this.props 仍然是没法用的。\n// Inside React class Component { constructor(props) { this.props = props; // ... } } // Inside your code class Button extends React.Component { constructor(props) { super(); // 忘了传入 props console.log(props); // {} console.log(this.props); // undefined } // ... } 要是构造函数中调用了某个访问 props 的方法，那这个 bug 就更难定位了。因此我强烈建议始终使用super(props)，即使这不是必须的：\nclass Button extends React.Component { constructor(props) { super(props); // We passed props console.log(props); // {} console.log(this.props); // {} } // ... } 上面的代码确保 this.props 始终是有值的。\n如果你想避免以上的问题，你可以通过class 属性提案 来简化代码：\nclass Clock extends React.Component { state = {date: new Date()}; render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } 更详细的内容可见Dan 的博客\n为什么组件用大写开头 前面以及说过了，JSX 是 React.createElement(component, props, …children) 提供的语法糖，component 的类型是：string/ReactClass type，我们具体看一下在什么情况下会用到 string 类型，什么情况下用到 ReactClass type 类型\nstring 类型react会觉得他是一个原生dom节点 ReactClass type 类型 自定义组件 例如（string）：在 jsx 中我们写一个\n\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 转换为js的时候就变成了\nReact.createElement(\u0026#34;div\u0026#34;, null) 例如（ReactClass type）：在jsx中我们写一个\nfunction MyDiv() { return (\u0026lt;div\u0026gt;\u0026lt;div\u0026gt;) } \u0026lt;MyDiv\u0026gt;\u0026lt;/MyDiv\u0026gt; 转换为js的时候就变成了\nfunction MyDiv() { return React.createElement(\u0026#34;div\u0026#34;, null); } React.createElement(MyDiv, null); 上边的例子中如果将MyDiv中的首字母小写，如下\nfunction myDiv() { return (\u0026lt;div\u0026gt;\u0026lt;div\u0026gt;) } \u0026lt;myDiv\u0026gt;\u0026lt;/myDiv\u0026gt; 转换为 js 的时候就变成了\nfunction MyDiv() { return React.createElement(\u0026#34;div\u0026#34;, null); } React.createElement(\u0026#34;myDiv\u0026#34;, null); 由于找不到 myDiv 这个 dom，所以就会报错。\n为什么调用方法要 bind this **前提知识：**深刻的理解 JavaScript 中的 this\n相信刚写 React 的时候，很多朋友可能会写类似这样的代码：\nclass Foo extends React.Component { handleClick () { this.setState({ xxx: aaa }) } render() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; ) } } 发现会报 this 是 undefined 的错，然后可能对事件处理比较疑惑，然后去看官网的事件处理有下面一段话：\n你必须谨慎对待 JSX 回调函数中的 this，在 JavaScript 中，class 的方法默认不会绑定this。如果你忘记绑定 this.handleClick 并把它传入了 onClick，当你调用这个函数的时候 this 的值为 undefined。\n这并不是 React 特有的行为；这其实与 JavaScript 函数工作原理有关。通常情况下，如果你没有在方法后面添加 ()，例如 onClick={this.handleClick}，你应该为这个方法绑定 this。\n然后你看了官网的例子和建议之后，知道需要为事件处理函数绑定 this就能解决，想下面这样：\nclass Foo extends React.Component { handleClick () { this.setState({ xxx: aaa }) } render() { return ( \u0026lt;button onClick={this.handleClick.bind(this)}\u0026gt; Click me \u0026lt;/button\u0026gt; ) } } 但是可能你没有去思考过为什么需要 bind this？如果你不能理解的话，还是 js 的基础没有打好。\nReact 是如何处理事件的？\n咱们先来了解一下 React 是如何处理事件的。\nReact 的事件是合成事件， 内部原理非常复杂，我这里只把关键性，可以用来解答这个问题的原理部分进行介绍即可(后面应该会写一篇 react 的事件原理，敬请期待)。\n上篇文章已经说过，jsx 实际上是 React.createElement(component, props, …children) 函数提供的语法糖，那么这段 jsx 代码：\n\u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; 会被转化为：\nReact.createElement(\u0026#34;button\u0026#34;, { onClick: this.handleClick }, \u0026#34;Click me\u0026#34;) 了解了上面的，然后简单的理解 react 如何处理事件的，React 在组件加载(mount)和更新(update)时，将事件通过 addEventListener 统一注册到 document 上，然后会有一个事件池存储了所有的事件，当事件触发的时候，通过 dispatchEvent 进行事件分发。\n所以你可以简单的理解为，最终 this.handleClick 会作为一个回调函数调用。\n理解了这个，然后再来看看回调函数为什么就会丢失 this。\nthis 简单回顾\n在函数内部，this的值取决于函数被调用的方式。\n如果你不能理解上面那句话，那么你可能需要停下来阅读文章，去查一下相关资料，否则你可能看不懂下面的，如果你懒的话，就看为你准备好的 MDN 吧。\n通过上面对事件处理的介绍，来模拟一下在类组件的 render 函数中， 有点类似于做了这样的操作:\nclass Foo { sayThis () { console.log(this); // 这里的 `this` 指向谁？ } exec (cb) { cb(); } render () { this.exec(this.sayThis); } } var foo = new Foo(); foo.render(); // 输出结果是什么？ 你会发现最终结果输出的是 undefined，如果你不理解为什么输出的是 undefined，那么还是上面说的，需要去深刻的理解 this 的原理。如果你能理解输出的是 undefined，那么我觉得你就可以理解为什么需要 bind this 了。\n那么你可能会问：**为什么React没有自动的把 bind 集成到 render 方法中呢?**在 exec 调用回调的时候绑定进去，像这样：\nclass Foo { sayThis () { console.log(this); // 这里的 `this` 指向谁？ } exec (cb) { cb().bind(this); } render () { this.exec(this.sayThis); } } var foo = new Foo(); foo.render(); // 输出结果是什么？ 因为 render 多次调用每次都要 bind 会影响性能，所以官方建议你自己在 constructor 中手动 bind 达到性能优化。\n四种事件处理对比 对于事件处理的写法也有好几种，咱们来进行对比一下：\n1. 直接 bind this 型\n就是像文章开始的那样，直接在事件那里 bind this\nclass Foo extends React.Component { handleClick () { this.setState({ xxx: aaa }) } render() { return ( \u0026lt;button onClick={this.handleClick.bind(this)}\u0026gt; Click me \u0026lt;/button\u0026gt; ) } } 优点：写起来顺手，一口气就能把这个逻辑写完，不用移动光标到其他地方。\n缺点：性能不太好，这种方式跟 react 内部帮你 bind 一样的，每次 render 都会进行 bind，而且如果有两个元素的事件处理函数式同一个，也还是要进行 bind，这样会多写点代码，而且进行两次 bind，性能不是太好。(其实这点性能往往不会是性能瓶颈的地方，如果你觉得顺手，这样写完全没问题)\n2. constuctor 手动 bind 型\nclass Foo extends React.Component { constuctor(props) { super(props) this.handleClick = this.handleClick.bind(this) } handleClick () { this.setState({ xxx: aaa }) } render() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; ) } } **优点：**相比于第一种性能更好，因为构造函数只执行一次，那么只会 bind 一次，而且如果有多个元素都需要调用这个函数，也不需要重复 bind，基本上解决了第一种的两个缺点。\n**缺点：**没有明显缺点，硬要说的话就是太丑了，然后不顺手(我觉得丑，你觉得不丑就这么写就行了)。\n3. 箭头函数型\nclass Foo extends React.Component { handleClick () { this.setState({ xxx: aaa }) } render() { return ( \u0026lt;button onClick={(e) =\u0026gt; this.handleClick(e)}\u0026gt; Click me \u0026lt;/button\u0026gt; ) } } **优点：**顺手，好看。\n**缺点：**每次 render 都会重复创建函数，性能会差一点。\n4. public class fields 型\n这种 class fields 还处于实验阶段，据我所知目前还没有被纳入标准，具体可见这里。\nclass Foo extends React.Component { handleClick = () =\u0026gt; { this.setState({ xxx: aaa }) } render() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; ) } } **优点：**好看，性能好。\n**缺点：**没有明显缺点，如果硬要说可能就是要多装一个 babel 插件来支持这种语法。\n总结 我平时用的就这四种写法，我这边从代码的美观性、性能以及是否顺手方便对各种写法做了简单的对比。其实每种方法在项目里用都是没什么问题的，性能方面基本上可以忽略，对于美观性和顺手比较主观，所以总体来说就是看大家的偏好咯，如果硬要推荐的话，我还是比较推荐第四种写法，美观而且不影响性能。\n为什么要 setState，而不是直接 this.state.xx = oo 这个问题是我们公司后端写 React 的时候提出的问题，为啥不能直接修改 state，要 setState 一下。我在想，从 vue 转到 React 可能也会有这种疑问，因为 vue 修改状态都是直接改的。\n如果我们了解 setState 的原理的话，可能就能解答这个问题了，setState 做的事情不仅仅只是修改了 this.state 的值，另外最重要的是它会触发 React 的更新机制，会进行 diff ，然后将 patch 部分更新到真实 dom 里。\n如果你直接 this.state.xx == oo 的话，state 的值确实会改，但是改了不会触发 UI 的更新，那就不是数据驱动了。\n那为什么 Vue 直接修改 data 可以触发 UI 的更新呢？因为 Vue 在创建 UI 的时候会把这些 data 给收集起来，并且在这些 data 的访问器属性 setter 进行了重写，在这个重写的方法里会去触发 UI 的更新。如果你想更多的了解 vue 的原理，可以去购买染陌大佬的剖析 Vue.js 内部运行机制。\n不明白访问器属性的可以看这篇文章：深入理解JS里的对象\nsetState 是同步还是异步相关问题 1. setState 是同步还是异步？\n我的回答是执行过程代码同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，所以表现出来有时是同步，有时是“异步”。\n2. 何时是同步，何时是异步呢？\n只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout/setInterval等原生 API 中都是同步的。简单的可以理解为被 React 控制的函数里面就会表现出“异步”，反之表现为同步。\n3. 那为什么会出现异步的情况呢？\n为了做性能优化，将 state 的更新延缓到最后批量合并再去渲染对于应用的性能优化是有极大好处的，如果每次的状态改变都去重新渲染真实 dom，那么它将带来巨大的性能消耗。\n4. 那如何在表现出异步的函数里可以准确拿到更新后的 state 呢？\n通过第二个参数 setState(partialState, callback) 中的 callback 拿到更新后的结果。\n或者可以通过给 setState 传递函数来表现出同步的情况：\nthis.setState((state) =\u0026gt; { return { val: newVal } }) 5. 那表现出异步的原理是怎么样的呢？\n直接讲源码肯定篇幅不够，可以看这篇文章：你真的理解setState吗？。\n我这里还是用最简单的语言让你理解：在 React 的 setState 函数实现中，会根据 isBatchingUpdates(默认是 false) 变量判断是否直接更新 this.state 还是放到队列中稍后更新。然后有一个 batchedUpdate 函数，可以修改 isBatchingUpdates 为 true，当 React 调用事件处理函数之前，或者生命周期函数之前就会调用 batchedUpdate 函数，这样的话，setState 就不会同步更新 this.state，而是放到更新队列里面后续更新。\n这样你就可以理解为什么原生事件和 setTimeout/setinterval 里面调用 this.state 会同步更新了吧，因为通过这些函数调用的 React 没办法去调用 batchedUpdate 函数将 isBatchingUpdates 设置为 true，那么这个时候 setState 的时候默认就是 false，那么就会同步更新。\n最后\nsetState 是 React 非常重要的一个方法，值得大家好好去研究一下他的原理。\n后记 上一篇发出之后，有很多小伙伴留言说想看关于 hooks 相关的问题，毕竟 hooks 出来没多久，有很多疑问很正常，下一篇估计就专门写 hooks 相关的吧。\n参考文章 React 中为什么要 bind this 《React 状态管理与同构实践》 ","permalink":"/posts/%E6%8A%80%E6%9C%AF/257/","summary":"网上各种言论说 React 上手比 Vue 难，可能难就难不能深刻理解 JSX，或者对 ES6 的一些特性理解得不够深刻，导致觉得有些点难以理解，然后说 React 比较难上手，还反人类啥的，所以我打算写两篇文章来讲新手学习 React 的时候容易迷惑的点写出来，如果你还以其他的对于学习 React 很迷惑的点，可以在留言区里给我留言。\n为什么要引入 React 在写 React 的时候，你可能会写类似这样的代码：\nimport React from \u0026#39;react\u0026#39; function A() { // ...other code return \u0026lt;h1\u0026gt;前端桃园\u0026lt;/h1\u0026gt; } 你肯定疑惑过，下面的代码都没有用到 React，为什么要引入 React 呢？\n如果你把 import React from ‘react’ 删掉，还会报下面这样的错误：\n那么究竟是哪里用到了这个 React，导致我们引入 React 会报错呢，不懂这个原因，那么就是 JSX 没有搞得太明白。\n你可以讲上面的代码(忽略导入语句)放到在线 babel 里进行转化一下，发现 babel 会把上面的代码转化成:\nfunction A() { // ...other code return React.createElement(\u0026#34;h1\u0026#34;, null, \u0026#34;前端桃园\u0026#34;); } 因为从本质上讲，JSX 只是为 React.createElement(component, props, ...children) 函数提供的语法糖。","title":"新手学习 React 迷惑的点"},{"content":"之前在公众号里有个读者给我留言：\n请教个问题，公司高职级和初中级，都是写业务代码，那么高职级的价值在哪里呢？\n由于公众号回复留言的限制，当时我就简单的回复了如下的几个点：\n初级多在写代码，高级多在设计代码； 初级多在解决一个问题，高级多在解决一类问题； 初级多在考虑技术问题，高级还要参与业务上的需求； 初级工程师只管接需求，导致自己忙不过来，高级工程师会砍需求， 用自己得经验告诉产品这个需求不需要，告诉设计师这个交互没必要； 初级工程师可能做完一个项目就完了，高级工程师可能会封装几个组件，整理一个脚手架出来。 还有很多很多，初级工程师和高级工程师差距不仅仅是代码质量上，而且其他能力上，解决问题的能力，抽象问题的能力！\n今天有时间，想详细的跟大家谈谈我所遇到的、见到的厉害的程序员，同样是写业务代码，为什么会比初级程序员拿的工资高？\n初级多在写代码，高级多在设计代码 一般人可能拿到需求，就开始写代码了，写着写着由于页面功能越来越多，感觉代码越来越复杂，自己都会觉得难以维护了。\n我拿我自己举个例子，之前有一次我写完一个页面之后，然后给另外一个同事(可以理解为高级程序员)让他帮我 Review 代码，看到我的代码之后就觉得这个写得不对呀，怎么会这么去设计呢？\n然后他给我理了下整个页面应该如何去设计，一个页面分为哪些块，有哪些事件，每个事件应该 dispatch 哪些 action，然后整个模块有哪些数据放在 store 里，哪些模块放在 state 里，当时反正听他理完之后，感觉自己写的代码真的很垃圾，然后花了两天时间把上周写的代码重写了一边。\n注意，这里是重写，不是重构，重构是对软件内部结构的一种调转，目的是不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。那么如果保证不改变软件可观察行为呢？就需要写测试用例，保证测试用例能跑通的情况下进行重新构造代码才是重构的第一步，没有测试用例的重构就是耍流氓。\n那么如何提高设计代码的能力呢？\n我觉得有一个方法对于提高设计代码的能力非常有帮助，那就是采用 TDD(测试驱动开发)。\nTDD 的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。 \u0026ndash;来源百度百科\n为什么 TDD 会提高设计代码的能力呢？可以看到 TDD 的原理是要在写代码之前就要写测试用例，在写测试用例的时候你必然得去思考你的每个函数，每个模块，每个组件应该如何去设计才能使得易于测试，往往易于测试的代码都比较好维护。\n这就可以达到在写代码之前先去设计代码，然后才写代码，也就是先思考，后行动。\n我只是说 TDD 可以提高设计代码的能力，并没有说我就特别提倡 TDD，说 TDD 很麻烦，难以实施的人就不要跟我讨论了。\n初级多在考虑技术问题，高级还要思考业务上的需求 我们要知道，技术是为业务服务的，没有业务谈技术的好坏都是瞎扯淡！\n常常可以看到很多实习生，或者刚来的应届生会吐槽以前的老代码用的框架老，用的技术旧，然后就去改成新的，自己觉得牛逼的，然后没有多个环境测试，发上线就挂了，这种例子很多很多，别说我们公司，就连我们组都出现过好几次这样的情况了。\n这种就是只考虑技术问题的，而没有去考虑为什么以前前人要这么写，前人没有用这些东西，难道仅仅是因为那个时候没有新东西，或者说认为前人比你差。\n很可能就是他们考虑到了业务上的需求，比如要兼容 IE、或者比如考虑到了有很多用户用 iOS，Safari 不支持 webp ，或者比如考虑到很多用户是低端机，性能不好，不能用一些新特性等等问题。\n对于老板来说，他根本不管你用什么新技术，新特性，也许你用了新特性确实让代码更简洁了，但是，但是，但是，发到线上挂了，那么你写的东西就是垃圾，连最基础的稳定性都保证不了，更别说流畅性，高并发。\n初级工程师只管接需求，高级工程师会砍需求 经常看到很多初级工程师就是，不管产品、运营甚至后端提出一些需求，他也很友好，只要是需求，他都接，然后整天忙忙碌碌，还经常加班，但是实际上，很多需求做了没有什么价值，也许还有些是重复工作，还把自己搞得很辛苦，这种情况真的很多很多。\n然后还有一种情况是有一个产品需求来了，然后 balabala 一顿需求讨论之后，产品给出一个期限，初级工程师满打满算，可能能完成，然后就说能行，结果要么对自己能力估算错误，要么很多突发情况，然后不能按时上线。\n而高级工程师基本上不会出现不能按时上线的情况，我思考了几点原因：\n会给自己留 buffer，来避免突发情况导致时间的耽搁。 在需求分析的时候会思考每个需求是否有必要，如果有些需求觉得没必要，会和产品讨论，拿出充分的理由将需求砍掉。如果都有必要，然后时间又不太够，会去和产品谈是否能使交互简单一下，一期先出个什么样子，下一期再做完整一点。 对需求的评估以及自己能力的评估更准确。 这里我想要表达，不是所有的需求都是有必要的，不要每个需求都去接。\n那么如果来判断一个需求是否应该接呢？\n我觉得主要是去思考他背后的价值，为什么要做这个东西，做了能达到什么样的效果，如果产品说不出来价值，或者说产生的价值与你花费的时间不匹配，那么这个需求就是有待商讨的。\n初级多在解决一个问题，高级多在解决一类问题 很多初级工程师可能昨晚一个项目就完了，还觉得很 OK 呀，然后也把在项目中的问题一个一个的解决了，按时按量的完成了任务。\n对，这就是初级工程师的标准，能完成一个项目。\n那么对于高级工程师除了完成项目还会做什么呢？\n也许会封装几个公用组件发到 npm 上大家都可以用。\n也许会整理一个脚手架出来大家用，比如以前公司没有用 TS，那么用 TS 写完项目之后，踩了很多坑，你就可以整理出一个脚手架，然后把踩得坑记录下来，方便后面想用 TS 的人用。\n也许发现前端工程师还原 UI 搞是一件枯燥无味，而且没有技术含量的事儿，我司有个大佬就写了一个 UI2Code 的工具，可以将 Sketch 文件转化为 html 代码。\n也许高级工程师发现一上线一个功能，小程序和 H5 都要写一套一模一样的，然后我司大佬就写了一个可以将 vue 代码转换为小程序的框架，一套 vue 代码，h5 和小程序都能用。\n这些都是我身边的例子，可以看到高级工程师经常解决的不是一个问题，而是解决一类通用的问题，然后给出解决方案，并且得以实施，从来不会认为吧项目做完了就完了，没有一点产出，也许你做这个项目是对自己太大的帮助，成长的。\n初级程序员经常犯的错误集锦 然后我在知乎上看到了一个初级程序员经常犯的错误集锦，我觉得非常大家都可以看看，自己有没有这些毛病。\n1 命名不规范\n2 日志不规范\n3 拒绝写接口和假数据\n4 不写单元测试\n5 盲目集成\n6 逻辑不清\n7 不做方案\n8 不关注性能\n9 害怕重构\n10 做出来就好，不考虑优雅的方案\n11 不考虑未来需求的变化\n12 遇到问题的时候不会试错\n13 不会写伪代码\n14 不做数据量的预估\n15 提交代码不规范\n16 不喜欢打Tag\n17 不遵守发布流程\n18 不知道Bug修复的优先级\n19 总喜欢手动修改线上代码\n20 不做数据备份\n21 不做自测\n22 不尽力模仿真实数据，测试数据很随意\n23 不抽取公共代码\n24 不认真听需求讲解\n25 不看验收标准\n26 不主动推进项目进度\n27 遇到难题不主动反馈\n作者：暗灭链接：https://www.zhihu.com/question/33578621/answer/451931102\n总结 初级程序员主要是体现在目光短浅，缺乏思考，做完东西没有成果，不积极主动。\n而高级程序员不仅仅是代码写得好，写得快，确实思考得更长远，做的东西更有用。\n我列举我身边所遇到的高级程序员所做的事，我觉得更有说服力，不是空谈大道理，都是我从身边的大佬们身上学到的，希望能给刚入职场，或者感觉自己是个初级程序员的程序员们一些警惕。\n当然，上面所说的高级工程师所拥有的优点和初级工程师的缺点，都不是所有高级工程师都会有所有的这些优点，也不是所有的初级工程师都具有这些缺点，这是没办法进行定量的。\n你们身边还遇到什么高级工程师的特点，或者初级工程师的缺点，欢迎在评论区里面留言。\n最后欢迎大家关注我的公众号「前端桃园」\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/258/","summary":"之前在公众号里有个读者给我留言：\n请教个问题，公司高职级和初中级，都是写业务代码，那么高职级的价值在哪里呢？\n由于公众号回复留言的限制，当时我就简单的回复了如下的几个点：\n初级多在写代码，高级多在设计代码； 初级多在解决一个问题，高级多在解决一类问题； 初级多在考虑技术问题，高级还要参与业务上的需求； 初级工程师只管接需求，导致自己忙不过来，高级工程师会砍需求， 用自己得经验告诉产品这个需求不需要，告诉设计师这个交互没必要； 初级工程师可能做完一个项目就完了，高级工程师可能会封装几个组件，整理一个脚手架出来。 还有很多很多，初级工程师和高级工程师差距不仅仅是代码质量上，而且其他能力上，解决问题的能力，抽象问题的能力！\n今天有时间，想详细的跟大家谈谈我所遇到的、见到的厉害的程序员，同样是写业务代码，为什么会比初级程序员拿的工资高？\n初级多在写代码，高级多在设计代码 一般人可能拿到需求，就开始写代码了，写着写着由于页面功能越来越多，感觉代码越来越复杂，自己都会觉得难以维护了。\n我拿我自己举个例子，之前有一次我写完一个页面之后，然后给另外一个同事(可以理解为高级程序员)让他帮我 Review 代码，看到我的代码之后就觉得这个写得不对呀，怎么会这么去设计呢？\n然后他给我理了下整个页面应该如何去设计，一个页面分为哪些块，有哪些事件，每个事件应该 dispatch 哪些 action，然后整个模块有哪些数据放在 store 里，哪些模块放在 state 里，当时反正听他理完之后，感觉自己写的代码真的很垃圾，然后花了两天时间把上周写的代码重写了一边。\n注意，这里是重写，不是重构，重构是对软件内部结构的一种调转，目的是不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。那么如果保证不改变软件可观察行为呢？就需要写测试用例，保证测试用例能跑通的情况下进行重新构造代码才是重构的第一步，没有测试用例的重构就是耍流氓。\n那么如何提高设计代码的能力呢？\n我觉得有一个方法对于提高设计代码的能力非常有帮助，那就是采用 TDD(测试驱动开发)。\nTDD 的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。 \u0026ndash;来源百度百科\n为什么 TDD 会提高设计代码的能力呢？可以看到 TDD 的原理是要在写代码之前就要写测试用例，在写测试用例的时候你必然得去思考你的每个函数，每个模块，每个组件应该如何去设计才能使得易于测试，往往易于测试的代码都比较好维护。\n这就可以达到在写代码之前先去设计代码，然后才写代码，也就是先思考，后行动。\n我只是说 TDD 可以提高设计代码的能力，并没有说我就特别提倡 TDD，说 TDD 很麻烦，难以实施的人就不要跟我讨论了。\n初级多在考虑技术问题，高级还要思考业务上的需求 我们要知道，技术是为业务服务的，没有业务谈技术的好坏都是瞎扯淡！\n常常可以看到很多实习生，或者刚来的应届生会吐槽以前的老代码用的框架老，用的技术旧，然后就去改成新的，自己觉得牛逼的，然后没有多个环境测试，发上线就挂了，这种例子很多很多，别说我们公司，就连我们组都出现过好几次这样的情况了。\n这种就是只考虑技术问题的，而没有去考虑为什么以前前人要这么写，前人没有用这些东西，难道仅仅是因为那个时候没有新东西，或者说认为前人比你差。\n很可能就是他们考虑到了业务上的需求，比如要兼容 IE、或者比如考虑到了有很多用户用 iOS，Safari 不支持 webp ，或者比如考虑到很多用户是低端机，性能不好，不能用一些新特性等等问题。\n对于老板来说，他根本不管你用什么新技术，新特性，也许你用了新特性确实让代码更简洁了，但是，但是，但是，发到线上挂了，那么你写的东西就是垃圾，连最基础的稳定性都保证不了，更别说流畅性，高并发。\n初级工程师只管接需求，高级工程师会砍需求 经常看到很多初级工程师就是，不管产品、运营甚至后端提出一些需求，他也很友好，只要是需求，他都接，然后整天忙忙碌碌，还经常加班，但是实际上，很多需求做了没有什么价值，也许还有些是重复工作，还把自己搞得很辛苦，这种情况真的很多很多。\n然后还有一种情况是有一个产品需求来了，然后 balabala 一顿需求讨论之后，产品给出一个期限，初级工程师满打满算，可能能完成，然后就说能行，结果要么对自己能力估算错误，要么很多突发情况，然后不能按时上线。\n而高级工程师基本上不会出现不能按时上线的情况，我思考了几点原因：\n会给自己留 buffer，来避免突发情况导致时间的耽搁。 在需求分析的时候会思考每个需求是否有必要，如果有些需求觉得没必要，会和产品讨论，拿出充分的理由将需求砍掉。如果都有必要，然后时间又不太够，会去和产品谈是否能使交互简单一下，一期先出个什么样子，下一期再做完整一点。 对需求的评估以及自己能力的评估更准确。 这里我想要表达，不是所有的需求都是有必要的，不要每个需求都去接。\n那么如果来判断一个需求是否应该接呢？\n我觉得主要是去思考他背后的价值，为什么要做这个东西，做了能达到什么样的效果，如果产品说不出来价值，或者说产生的价值与你花费的时间不匹配，那么这个需求就是有待商讨的。\n初级多在解决一个问题，高级多在解决一类问题 很多初级工程师可能昨晚一个项目就完了，还觉得很 OK 呀，然后也把在项目中的问题一个一个的解决了，按时按量的完成了任务。","title":"高级程序员与初级程序员差别在哪里？"},{"content":" 文章首发于个人博客\n这是我 Deep In React 系列的第二篇文章，如果还没有读过的强烈建议你先读第一篇：详谈 React Fiber 架构(1)。\n前言 我相信在看这篇文章的读者一般都已经了解过 React 16 以前的 Diff 算法了，这个算法也算是 React 跨时代或者说最有影响力的一点了，使 React 在保持了可维护性的基础上性能大大的提高，但 Diff 过程不仅不是免费的，而且对性能影响很大，有时候更新页面的时候往往 Diff 所花的时间 js 运行时间比 Rendering 和 Painting 花费更多的时间，所以我一直传达的观念是 React 或者说框架的意义是为了提高代码的可维护性，而不是为了提高性能的，现在所做的提升性能的操作，只是在可维护性的基础上对性能的优化。具体可以参考我公众号以前发的这两篇文章：\n别再说虚拟 DOM 快了，要被打脸的\n深入理解虚拟 DOM，它真的不快\n如果你对标题不满意，请把文章看完，至少也得把文章最后的结论好好看下\n在上一篇将 React Fiber 架构中，已经说到过，React 现在将整体的数据结构从树改为了链表结构。所以相应的 Diff 算法也得改变，以为以前的 Diff 算法就是基于树的。\n老的 Diff 算法提出了三个策略来保证整体界面构建的性能，具体是：\nWeb UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。 对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。 基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化。\n具体老的算法可以见这篇文章：React 源码剖析系列 － 不可思议的 react diff\n说实话，老的 Diff 算法还是挺复杂的，你仅仅看上面这篇文章估计一时半会都不能理解，更别说看源码了。对于 React 16 的 Diff 算法(我觉得都不能把它称作算法，最多叫个 Diff 策略)其实还是蛮简单的，React 16 是整个调度流程感觉比较难，我在前面将 Fiber 的文章已经简单的梳理过了，后面也会慢慢的逐个攻破。\n接下来就开始正式的讲解 React 16 的 Diff 策略吧！\nDiff 简介 做 Diff 的目的就是为了复用节点。\n链表的每一个节点是 Fiber，而不是在 16 之前的虚拟DOM 节点。\n我这里说的虚拟 DOM 节点是指 React.createElement 方法所产生的节点。虚拟 DOM tree 只维护了组件状态以及组件与 DOM 树的关系，Fiber Node 承载的东西比 虚拟 DOM 节点多很多。\nDiff 就是新旧节点的对比，在上一篇中也说道了，这里面的 Diff 主要是构建 currentInWorkProgress 的过程，同时得到 Effect List，给下一个阶段 commit 做准备。\nReact16 的 diff 策略采用从链表头部开始比较的算法，是层次遍历，算法是建立在一个节点的插入、删除、移动等操作都是在节点树的同一层级中进行的。\n对于 Diff， 新老节点的对比，我们以新节点为标准，然后来构建整个 currentInWorkProgress，对于新的 children 会有四种情况。\nTextNode(包含字符串和数字) 单个 React Element(通过该节点是否有 $$typeof 区分) 数组 可迭代的 children，跟数组的处理方式差不多 那么我们就来一步一步的看这四种类型是如何进行 diff 的。\n前置知识介绍 这篇文章主要是从 React 的源码的逻辑出发介绍的，所以介绍之前了解下只怎么进入到这个 diff 函数的，react 的 diff 算法是从 reconcileChildren 开始的\nexport function reconcileChildren( current: Fiber | null, workInProgress: Fiber, nextChildren: any, renderExpirationTime: ExpirationTime, ) { if (current === null) { workInProgress.child = mountChildFibers( workInProgress, null, nextChildren, renderExpirationTime, ); } else { workInProgress.child = reconcileChildFibers( workInProgress, current.child, nextChildren, renderExpirationTime, ); } } reconcileChildren 只是一个入口函数，如果首次渲染，current 空 null，就通过 mountChildFibers 创建子节点的 Fiber 实例。如果不是首次渲染，就调用 reconcileChildFibers去做 diff，然后得出 effect list。\n接下来再看看 mountChildFibers 和 reconcileChildFibers 有什么区别：\nexport const reconcileChildFibers = ChildReconciler(true); export const mountChildFibers = ChildReconciler(false); 他们都是通过 ChildReconciler 函数来的，只是传递的参数不同而已。这个参数叫shouldTrackSideEffects，他的作用是判断是否要增加一些effectTag，主要是用来优化初次渲染的，因为初次渲染没有更新操作。\nfunction reconcileChildFibers( returnFiber: Fiber, currentFirstChild: Fiber | null, newChild: any, expirationTime: ExpirationTime, ): Fiber | null { // 主要的 Diff 逻辑 } reconcileChildFibers 就是 Diff 部分的主体代码，这个函数超级长，是一个包装函数，下面所有的 diff 代码都在这里面，详细的源码注释可以见这里。\n参数介绍\nreturnFiber 是即将 Diff 的这层的父节点。 currentFirstChild是当前层的第一个 Fiber 节点。 newChild 是即将更新的 vdom 节点(可能是 TextNode、可能是 ReactElement，可能是数组)，不是 Fiber 节点 expirationTime 是过期时间，这个参数是跟调度有关系的，本系列还没讲解，当然跟 Diff 也没有关系。 再次提醒，reconcileChildFibers 是 reconcile(diff) 的一层。\n前置知识介绍完毕，就开始详细介绍每一种节点是如何进行 Diff 的。\nDiff TextNode 首先看 TextNode，因为它是最简单的，担心直接看到难的，然后就打击你的信心。\n看下面两个小 demo：\n// demo1：当前 ui 对应的节点的 jsx return ( \u0026lt;div\u0026gt; // ... \u0026lt;div\u0026gt; \u0026lt;xxx\u0026gt;\u0026lt;/xxx\u0026gt; \u0026lt;xxx\u0026gt;\u0026lt;/xxx\u0026gt; \u0026lt;/div\u0026gt; //... \u0026lt;/div\u0026gt; ) // demo2：更新成功后的节点对应的 jsx return ( \u0026lt;div\u0026gt; // ... \u0026lt;div\u0026gt; 前端桃园 \u0026lt;/div\u0026gt; //... \u0026lt;/div\u0026gt; ) 对应的单链表结构图：\n对于 diff TextNode 会有两种情况。\ncurrentFirstNode 是 TextNode currentFirstNode 不是 TextNode currentFirstNode 是当前该层的第一个节点，reconcileChildFibers 传进来的参数。\n**为什么要分两种情况呢？**原因就是为了复用节点\n第一种情况。xxx 是一个 TextNode，那么就代表这这个节点可以复用，有复用的节点，对性能优化很有帮助。既然新的 child 只有一个 TextNode，那么复用节点之后，就把剩下的 aaa 节点就可以删掉了，那么 div 的 child 就可以添加到 workInProgress 中去了。\n源码如下：\nif (currentFirstChild !== null \u0026amp;\u0026amp; currentFirstChild.tag === HostText) { // We already have an existing node so let\u0026#39;s just update it and delete // the rest. deleteRemainingChildren(returnFiber, currentFirstChild.sibling); const existing = useFiber(currentFirstChild, textContent, expirationTime); existing.return = returnFiber; return existing; } 在源码里 useFiber 就是复用节点的方法，deleteRemainingChildren 就是删除剩余节点的方法，这里是从 currentFirstChild.sibling 开始删除的。\n**第二种情况。**xxx 不是一个 TextNode，那么就代表这个节点不能复用，所以就从 currentFirstChild开始删掉剩余的节点，对应到上面的图中就是删除掉 xxx 节点和 aaa 节点。\n对于源码如下：\ndeleteRemainingChildren(returnFiber, currentFirstChild); const created = createFiberFromText( textContent, returnFiber.mode, expirationTime, ); created.return = returnFiber; 其中 createFiberFromText 就是根据 textContent 来创建节点的方法。\n注意：删除节点不会真的从链表里面把节点删除，只是打一个 delete 的 tag，当 commit 的时候才会真正的去删除。\nDiff React Element 有了上面 TextNode 的 Diff 经验，那么来理解 React Element 的 Diff 就比较简单了，因为他们的思路是一致的：先找有没有可以复用的节点，如果没有就另外创建一个。\n那么就有一个问题，如何判断这个节点是否可以复用呢？\n有两个点：1. key 相同。 2. 节点的类型相同。\n如果以上两点相同，就代表这个节点只是变化了内容，不需要创建新的节点，可以复用的。\n对应的源码如下：\nif (child.key === key) { if ( child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type ) { // 为什么要删除老的节点的兄弟节点？ // 因为当前节点是只有一个节点，而老的如果是有兄弟节点是要删除的，是多于的。删掉了之后就可以复用老的节点了 deleteRemainingChildren(returnFiber, child.sibling); // 复用当前节点 const existing = useFiber( child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime, ); existing.ref = coerceRef(returnFiber, child, element); existing.return = returnFiber; return existing; } 相信这些代码都很好理解了，除了判断条件跟前面 TextNode 的判断条件不一样，其余的基本都一样，只是 React Element 多了一个跟新 ref 的过程。\n同样，如果节点的类型不相同，就将节点从当前节点开始把剩余的都删除。\ndeleteRemainingChildren(returnFiber, child); 到这里，可能你们就会觉得接下来应该就是讲解当没有可以复用的节点的时候是如果创建节点的。\n不过可惜你们猜错了。因为 Facebook 的工程师很厉害，另外还做了一个工作来优化，来找到复用的节点。\n我们现在来看这种情况：\n这种情况就是有可能更新的时候删除了一个节点，但是另外的节点还留着。\n那么在对比 xxx 节点和 AAA 节点的时候，它们的节点类型是不一样，按照我们上面的逻辑，还是应该把 xxx 和 AAA 节点删除，然后创建一个 AAA 节点。\n但是你看，明明 xxx 的 slibling 有一个 AAA 节点可以复用，但是被删了，多浪费呀。所以还有另外有一个策略来找 xxx 的所有兄弟节点中有没有可以复用的节点。\n这种策略就是从 div 下面的所有子节点去找有没有可以复用的节点，而不是像 TextNode 一样，只是找第一个 child 是否可以复用，如果当前节点的 key 不同，就代表肯定不是同一个节点，所以把当前节点删除，然后再去找当前节点的兄弟节点，直到找到 key 相同，并且节点的类型相同，否则就删除所有的子节点。\n你有木有这样的问题：为什么 TextNode 不采用这样的循环策略来找可以复用的节点呢？这个问题留给你思考，欢迎在评论区留下你的答案。\n对应的源码逻辑如下：\n// 找到 key 相同的节点，就会复用当前节点 while (child !== null) { if (child.key === key) { if ( child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type ) { // 复用节点逻辑，省略该部分代码，和上面复用节点的代码相同 // code ... return existing; } else { deleteRemainingChildren(returnFiber, child); break; } } else { // 如果没有可以复用的节点，就把这个节点删除 deleteChild(returnFiber, child); } child = child.sibling; } 在上面这段代码我们需要注意的是，当 key 相同，React 会认为是同一个节点，所以当 key 相同，节点类型不同的时候，React 会认为你已经把这个节点重新覆盖了，所以就不会再去找剩余的节点是否可以复用。只有在 key 不同的时候，才会去找兄弟节点是否可以复用。\n接下来才是我们前面说的，如果没有找到可以复用的节点，然后就重新创建节点，源码如下：\n// 前面的循环已经把该删除的已经删除了，接下来就开始创建新的节点了 if (element.type === REACT_FRAGMENT_TYPE) { const created = createFiberFromFragment( element.props.children, returnFiber.mode, expirationTime, element.key, ); created.return = returnFiber; return created; } else { const created = createFiberFromElement( element, returnFiber.mode, expirationTime, ); created.ref = coerceRef(returnFiber, currentFirstChild, element); created.return = returnFiber; return created; } 对于 Fragment 节点和一般的 Element 节点创建的方式不同，因为 Fragment 本来就是一个无意义的节点，他真正需要创建 Fiber 的是它的 children，而不是它自己，所以 createFiberFromFragment 传递的不是 element ，而是 element.props.children。\nDiff Array Diff Array 算是 Diff 中最难的一部分了，比较的复杂，因为做了很多的优化，不过请你放心，认真看完我的讲解，最难的也会很容易理解，废话不多说，开始吧！\n因为 Fiber 树是单链表结构，没有子节点数组这样的数据结构，也就没有可以供两端同时比较的尾部游标。所以React的这个算法是一个简化的两端比较法，只从头部开始比较。\n前面已经说了，Diff 的目的就是为了复用，对于 Array 就不能像之前的节点那样，仅仅对比一下元素的 key 或者 元素类型就行，因为数组里面是好多个元素。你可以在头脑里思考两分钟如何进行复用节点，再看 React 是怎么做的，然后对比一下孰优孰劣。\n1. 相同位置(index)进行比较 相同位置进行对比，这个是比较容易想到的一种方式，还是举个例子加深一下印象。\n这已经是一个非常简单的例子了，div 的 child 是一个数组，有 AAA、BBB 然后还有其他的兄弟节点，在做 diff 的时候就可以从新旧的数组中按照索引一一对比，如果可以复用，就把这个节点从老的链表里面删除，不能复用的话再进行其他的复用策略。\n那如果判断节点是否可以复用呢？有了前面的 ReactElement 和 TextNode 复用的经验，这个也类似，因为是一一对比嘛，相当于是一个节点一个节点的对比。\n不过对于 newChild 可能会有很多种类型，简单的看下源码是如何进行判断的。\nconst key = oldFiber !== null ? oldFiber.key : null; 前面的经验可得，判断是否可以复用，常常会根据 key 是否相同来决定，所以首先获取了老节点的 key 是否存在。如果不存在老节点很可能是 TextNode 或者是 Fragment。\n接下来再看 newChild 为不同类型的时候是如何进行处理的。\n当 newChild 是 TextNode 的时候\nif (typeof newChild === \u0026#39;string\u0026#39; || typeof newChild === \u0026#39;number\u0026#39;) { // 对于新的节点如果是 string 或者 number，那么都是没有 key 的， // 所有如果老的节点有 key 的话，就不能复用，直接返回 null。 // 老的节点 key 为 null 的话，代表老的节点是文本节点，就可以复用 if (key !== null) { return null; } return updateTextNode( returnFiber, oldFiber, \u0026#39;\u0026#39; + newChild, expirationTime, ); } 如果 key 不为 null，那么就代表老节点不是 TextNode，而新节点又是 TextNode，所以返回 null，不能复用，反之则可以复用，调用 updateTextNode 方法。\n注意，updateTextNode 里面包含了首次渲染的时候的逻辑，首次渲染的时候回插入一个 TextNode，而不是复用。\n当 newChild 是 Object 的时候\nnewChild 是 Object 的时候基本上走的就是 ReactElement 的逻辑了，判断 key 和 元素的类型是否相等来判断是否可以复用。\nif (typeof newChild === \u0026#39;object\u0026#39; \u0026amp;\u0026amp; newChild !== null) { // 有 $$typeof 代表就是 ReactElement switch (newChild.$$typeof) { case REACT_ELEMENT_TYPE: { // ReactElement 的逻辑 } case REACT_PORTAL_TYPE: { // 调用 updatePortal } } if (isArray(newChild) || getIteratorFn(newChild)) { if (key !== null) { return null; } return updateFragment( returnFiber, oldFiber, newChild, expirationTime, null, ); } } 首先判断是否是对象，用的是 typeof newChild === 'object' \u0026amp;\u0026amp; newChild !== null ，注意要加 !== null，因为 typeof null 也是 object。\n然后通过 $$typeof 判断是 REACT_ELEMENT_TYPE 还是 REACT_PORTAL_TYPE，分别调用不同的复用逻辑，然后由于数组也是 Object ，所以这个 if 里面也有数组的复用逻辑。\n我相信到这里应该对于应该对于如何相同位置的节点如何对比有清晰的认识了。另外还有问题，那就是如何循环一个一个对比呢？\n这里要注意，新的节点的 children 是虚拟 DOM，所以这个 children 是一个数组，而对于之前提到的老的节点树是链表。\n那么循环一个一个对比，就是遍历数组的过程。\nlet newIdx = 0 // 新数组的索引 for (; oldFiber !== null \u0026amp;\u0026amp; newIdx \u0026lt; newChildren.length; newIdx++) { // 遍历老的节点 nextOldFiber = oldFiber.sibling; // 返回复用节点的函数，newFiber 就是复用的节点。 // 如果为空，就代表同位置对比已经不能复用了，循环结束。 const newFiber = updateSlot( returnFiber, oldFiber, newChildren[newIdx], expirationTime, ); if (newFiber === null) { break; } // 其他 code，比如删除复用的节点 } 这并不是源码的全部源码，我只是把思路给贴出来了。\n这是第一次遍历新数组，通过调用 updateSlot 来对比新老元素，前面介绍的如何对比新老节点的代码都是在这个函数里。这个循环会把所以的从前面开始能复用的节点，都复用到。比如上面我们画的图，如果两个链表里面的 **？？？**节点，不相同，那么 newFiber 为 null，这个循环就会跳出。\n跳出来了，就会有两种情况。\n新节点已经遍历完毕 老节点已经遍历完毕 2. 新节点已经遍历完毕 如果新节点已经遍历完毕的话，也就是没有要更新的了，这种情况一般就是从原来的数组里面删除了元素，那么直接把剩下的老节点删除了就行了。还是拿上面的图的例子举例，老的链表里**？？？还有很多节点，而新的链表？？？已经没有节点了，所以老的链表？？？**不管是有多少节点，都不能复用了，所以没用了，直接删除。\nif (newIdx === newChildren.length) { // 新的 children 长度已经够了，所以把剩下的删除掉 deleteRemainingChildren(returnFiber, oldFiber); return resultingFirstChild; } 注意这里是直接 return 了哦，没有继续往下执行了。\n3. 老节点已经遍历完毕 如果老的节点在第一次循环的时候就被复用完了，新的节点还有，很有可能就是新增了节点的情况。那么这个时候只需要根据把剩余新的节点直接创建 Fiber 就行了。\nif (oldFiber === null) { // 如果老的节点已经被复用完了，对剩下的新节点进行操作 for (; newIdx \u0026lt; newChildren.length; newIdx++) { const newFiber = createChild( returnFiber, newChildren[newIdx], expirationTime, ); } return resultingFirstChild; } oldFiber === null 就是用来判断老的 Fiber 节点变量完了的代码，Fiber 链表是一个单向链表，所以为 null 的时候代表已经结束了。所以就直接把剩余的 newChild 通过循环创建 Fiber。\n到这里，目前简单的对数组进行增、删节点的对比还是比较简单，接下来就是移动的情况是如何进行复用的呢？\n4. 移动的情况如何进行节点复用 对于移动的情况，首先要思考，怎么能判断数组是否发生过移动操作呢？\n如果给你两个数组，你是否能判断出来数组是否发生过移动。\n答案是：老的数组和新的数组里面都有这个元素，而且位置不相同。\n从两个数组中找到相同元素(是指可复用的节点)，方法有很多种，来看看 React 是如何高效的找出来的。\n把所有老数组元素按 key 或者是 index 放 Map 里，然后遍历新数组，根据新数组的 key 或者 index 快速找到老数组里面是否有可复用的。\nfunction mapRemainingChildren( returnFiber: Fiber, currentFirstChild: Fiber, ): Map\u0026lt;string | number, Fiber\u0026gt; { const existingChildren: Map\u0026lt;string | number, Fiber\u0026gt; = new Map(); let existingChild = currentFirstChild; // currentFirstChild 是老数组链表的第一个元素 while (existingChild !== null) { // 看到这里可能会疑惑怎么在 Map 里面的key 是 fiber 的key 还是 fiber 的 index 呢？ // 我觉得是根据数据类型，fiber 的key 是字符串，而 index 是数字，这样就能区分了 // 所以这里是用的 map，而不是对象，如果是对象的key 就不能区分 字符串类型和数字类型了。 if (existingChild.key !== null) { existingChildren.set(existingChild.key, existingChild); } else { existingChildren.set(existingChild.index, existingChild); } existingChild = existingChild.sibling; } return existingChildren; } 这个 mapRemainingChildren 就是将老数组存放到 Map 里面。元素有 key 就 Map 的键就存 key，没有 key 就存 index，key 一定是字符串，index 一定是 number，所以取的时候是能区分的，所以这里用的是 Map，而不是对象，如果是对象，属性是字符串，就没办法区别是 key 还是 index 了。\n现在有了这个 Map，剩下的就是循环新数组，找到 Map 里面可以复用的节点，如果找不到就创建，这个逻辑基本上跟 updateSlot 的复用逻辑很像，一个是从老数组链表中获取节点对比，一个是从 Map 里获取节点对比。\n// 如果前面的算法有复用，那么 newIdx 就不从 0 开始 for (; newIdx \u0026lt; newChildren.length; newIdx++) { const newFiber = updateFromMap( existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime, ); // 省略删除 existingChildren 中的元素和添加 Placement 副作用的情况 } 到这里新数组遍历完毕，也就是同一层的 Diff 过程完毕，接下来进行总结一下。\n效果演示 以下效果动态演示来自于文章：React Diff 源码分析，我觉得这个演示非常的形象，有助于理解。\n这里渲染一个可输入的数组。 当第一种情况，新数组遍历完了，老数组剩余直接删除（12345→1234 删除 5）：\n新数组没完，老数组完了（1234→1234567 插入 567）：\n移动的情况，即之前就存在这个元素，后续只是顺序改变（123 → 4321 插入4，移动2 1）：\n最后删除没有涉及的元素。\n总结 对于数组的 diff 策略，相对比较复杂，最后来梳理一下这个策略，其实还是很简单，只是看源码的时候比较难懂。\n我们可以把整个过程分为三个阶段：\n第一遍历新数组，新老数组相同 index 进行对比，通过 updateSlot方法找到可以复用的节点，直到找到不可以复用的节点就退出循环。 第一遍历完之后，删除剩余的老节点，追加剩余的新节点的过程。如果是新节点已遍历完成，就将剩余的老节点批量删除；如果是老节点遍历完成仍有新节点剩余，则将新节点直接插入。 把所有老数组元素按 key 或 index 放 Map 里，然后遍历新数组，插入老数组的元素，这是移动的情况。 后记 刚开始阅读源码的过程是非常的痛苦的，但是当你一遍一遍的把作者想要表达的理解了，为什么要这么写 理解了，会感到作者的设计是如此的精妙绝伦，每一个变量，每一行代码感觉都是精心设计过的，然后感受到自己与大牛的差距，激发自己的动力。\n更多的对于 React 原理相关，源码相关的内容，请关注我的 github：Deep In React 或者 个人博客：桃园\n我是桃翁，一个爱思考的前端er，想了解关于更多的前端相关的，请关注我的公号：「前端桃园」\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/261/","summary":"文章首发于个人博客\n这是我 Deep In React 系列的第二篇文章，如果还没有读过的强烈建议你先读第一篇：详谈 React Fiber 架构(1)。\n前言 我相信在看这篇文章的读者一般都已经了解过 React 16 以前的 Diff 算法了，这个算法也算是 React 跨时代或者说最有影响力的一点了，使 React 在保持了可维护性的基础上性能大大的提高，但 Diff 过程不仅不是免费的，而且对性能影响很大，有时候更新页面的时候往往 Diff 所花的时间 js 运行时间比 Rendering 和 Painting 花费更多的时间，所以我一直传达的观念是 React 或者说框架的意义是为了提高代码的可维护性，而不是为了提高性能的，现在所做的提升性能的操作，只是在可维护性的基础上对性能的优化。具体可以参考我公众号以前发的这两篇文章：\n别再说虚拟 DOM 快了，要被打脸的\n深入理解虚拟 DOM，它真的不快\n如果你对标题不满意，请把文章看完，至少也得把文章最后的结论好好看下\n在上一篇将 React Fiber 架构中，已经说到过，React 现在将整体的数据结构从树改为了链表结构。所以相应的 Diff 算法也得改变，以为以前的 Diff 算法就是基于树的。\n老的 Diff 算法提出了三个策略来保证整体界面构建的性能，具体是：\nWeb UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。 对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。 基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化。\n具体老的算法可以见这篇文章：React 源码剖析系列 － 不可思议的 react diff","title":"Deep In React 之详谈 React 16 Diff 策略(二)"},{"content":"本来我是不喜欢追热点的，不过今天有个群友在群里发了这样一段话。\n结果被我怼了： 后面的我就不截图了，反正我提倡的是，随时我们能做的是好好的提升自己，只有提升自己才是最重要的。\n有些人同意我的看法，有些人不同意我的看法，这都不是我今天说的重点，只是这个导火线引发的我的一些思考。\n不要让别人的文章限制了你的思维 这是我后来跟那个在群里发文章的那个老哥说的话，但是他也没有回我，这都不重要，重要的是我想表达的观点。\n不要让网上的文章限制了你的思维。现在网上很多自媒体都是无脑夸华为牛逼，世界第一，美国傻逼，你转发他的文章代表你就是爱国的。你的这些感受都是作者想看到的，都是作者设计好的，你可以去看现在线上的一些写作课程，理论上都会有一些技巧是如何调动读者的情绪，引发共鸣等。\n我不是说这种技巧不对，反而我觉得他写得很棒，他做到了他想要的结果。这样的小编很棒，我也希望我能写出这样的文章，双十万加(阅读量和点赞超十万)。\n而是作为新时代的读者，我们不仅应该有爱国情怀，更应该有自己的想法，不要局限于作者的思路，应该以更大的视角，更全的视角去看待问题。\n在《少数人走的路》里面就提到一条，思考是需要整体的，一旦你整体的去思考这个问题，就会产生矛盾，有了矛盾，才会使我们更深刻的去思考问题。\n所以我们不要无脑的觉得转个文章，留个言这就是爱国，真正的爱国是什么：知道自己的技术不足，好好的搞技术，知道自己能力差，好好的提升能力。这才是支持国家，为国家做贡献了。\n**穷者独善其身，达者兼济天下。**我们连独善其身都没做到，就有一股兼济天下的冲动。我还是之前在我看 996 那篇文章中提到的，一般人我们能做的就是好好的提升自己，等你有能力了，有钱了，给贫穷山区盖个小学，给慈善基金捐点钱这就是算开始兼济天下了。\n另外一个群友发表了一个观点，我觉得还是有点用吧。\n连马云这种等级的人都觉得自己的事儿忙不过来，何况一般人呢？\n最后，如果想有更大的视角去看待华为，可以看看这些文字，视角不同，也许会改变你现在的想法：\n任正非回应美国封杀：不要煽动民族情绪，不能狭隘认为爱华为就用华为手机 重磅！任正非最新万字访谈，回应关于华为的一切 | 深网 真的，老爷子的这番采访我特别的佩服，建议每个人看个一两遍。\n不要总想着自己能得到什么，而是你能给公司(其他人)带来什么好处 这点我是在任老爷子采访里面这段话突然想到的。\n可以看到，华为之所以这么牛逼，不是靠每天员工们 965 ，上班划划水，喊喊口号就能这么牛逼的，都是加班加出来的，一般人有他们辛苦吗？虽然别人公司顶着那么好看的光环，都是员工们努力、奋斗，用汗水换的。\n很多人就是，又想公司强，又想工资高，又不想加班。当你站在公司外的角度的时候，又希望公司强，能抵制一切风险，工资高。但是作为员工，又不喜欢加班来使公司更强，总希望做受益者而不愿意去做点事情。\n我们在与别人合作的时候也是这样，在去和别人合作的时候，请教别人问题的时候，别人能有什么好处呢？没有好处为什么要帮你呢？他又不是你的父母，无条件帮你解决一切能解决的事儿。\n合作都是一个双赢的事儿，不要总想着占便宜，占便宜的事儿百分之百干不久的。\n很多人在问问题的时候也是有问题的，本来群主有个技术交流群，不在群里问，非得去私聊群主(我已经听到很多群主抱怨过这个问题了)，不知道是因为觉得群里问效率低，怕浪费时间，还是觉得自己问的问题蠢，怕被别人嘲笑。其实这都是不太好的一种做法，不然群主创建交流群来干啥呢？不就是想大家一起交流，别啥事儿都问他么。\n如果你是觉得问问题怕浪费时间，那别人回答问题就不花费时间吗？如果你确实着急，那你二话不说，红包先上，肯定有效。别上去就是：“在吗；有空吗”，这会体现一个人不会用微信聊天。\n我在一个星球里看到这样一段话：\n和别人交流时，先搞清楚一个问题，这是交流还是请教，如果要谈的话题，你已经掌握了 90%的知识，这个叫交流；如果不到 90%，这个叫请教。无论哪种，都会花费别人时间。所以无论是否对你有帮助，都应该首先发红包。 我在之前的文章也说过，发红包不是因为回答的人差你这点红包，而是这是一种礼仪，知道你是麻烦了别人，表示一点心意。\n不要想着总能说服别人 有这么一个故事：孔子的有一个弟子有一天跟一个人争论，争论啥呢？一年是三季还是四季的问题，然后这个弟子说服不了那个人，然后就带着他找孔子，弟子把事情说清楚了之后，孔子最后说的是一年只有三季。后来弟子就很疑惑，一年不是有四季吗，为什么你要跟他说三季？孔子就说，他一年只有三季了，你还跟他争论什么。\n我当时在群里说了这么一段话，然后就有一个小伙伴不同意我的观点。\n后面想了想，我也没跟他争辩，有可能我是错的，也有可能我是对的，我想了下，我没办法说服他，我就没有回复他。\n我没有说这个小伙伴就是孔子故事里面那个三季的人，而是想表达当一个人所掌握的知识跟你差太远的时候，你没办法去说服他，他也没办法说服你，这个时候自己持有自己的观点就好，慢慢的，时间长了，学到的知识多了，见识广了，就能判断对与错了。\n不要轻易相信别人的结论 吴军老师在得到课程《硅谷来信》里说过：科学是用来怀疑的，而不是用来信仰的。科学看重的是方法和过程，而不是结果。另外，科学的结论也未必等于正确的结论。\n你可能会说，不是说不要轻易相信别人的结论，为啥你就觉得吴军老师说的这个话就是对的呢，岂不是和你说的互相矛盾吗？\n我相信吴军老师说的结论，是因为他在课中所分析的逻辑，举的例子令我信服。所以我才相信他的结论。具体逻辑可以看《硅谷来信》的第 36 封信|科学的结论未必是正确的。\n所以，我上面说的结论，也都有可能是错的，就连科学家得出的结论都有可能是错的。那我们应该怎么办呢？\n我们在看有观点的文章的时候，应该注重得出观点的逻辑是否正确，而不是直接去判断观点。观点这种东西人人都能说，我说明天股票会涨，他说会跌。但是，说出一个合理的解释，这就不是每个人都能做到的。作为一个合格的读者，我们应该有自己的思想，自己的判断逻辑，而不是一味的去接收观点。\n然后随便我们扯到学技术吧，我们在学习框架的时候，所有的大牛都会推荐你去学习框架、库的原理，而不仅仅是 api。原理就是上面说道的底层逻辑，而 api 只是最终的一个结果。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/263/","summary":"本来我是不喜欢追热点的，不过今天有个群友在群里发了这样一段话。\n结果被我怼了： 后面的我就不截图了，反正我提倡的是，随时我们能做的是好好的提升自己，只有提升自己才是最重要的。\n有些人同意我的看法，有些人不同意我的看法，这都不是我今天说的重点，只是这个导火线引发的我的一些思考。\n不要让别人的文章限制了你的思维 这是我后来跟那个在群里发文章的那个老哥说的话，但是他也没有回我，这都不重要，重要的是我想表达的观点。\n不要让网上的文章限制了你的思维。现在网上很多自媒体都是无脑夸华为牛逼，世界第一，美国傻逼，你转发他的文章代表你就是爱国的。你的这些感受都是作者想看到的，都是作者设计好的，你可以去看现在线上的一些写作课程，理论上都会有一些技巧是如何调动读者的情绪，引发共鸣等。\n我不是说这种技巧不对，反而我觉得他写得很棒，他做到了他想要的结果。这样的小编很棒，我也希望我能写出这样的文章，双十万加(阅读量和点赞超十万)。\n而是作为新时代的读者，我们不仅应该有爱国情怀，更应该有自己的想法，不要局限于作者的思路，应该以更大的视角，更全的视角去看待问题。\n在《少数人走的路》里面就提到一条，思考是需要整体的，一旦你整体的去思考这个问题，就会产生矛盾，有了矛盾，才会使我们更深刻的去思考问题。\n所以我们不要无脑的觉得转个文章，留个言这就是爱国，真正的爱国是什么：知道自己的技术不足，好好的搞技术，知道自己能力差，好好的提升能力。这才是支持国家，为国家做贡献了。\n**穷者独善其身，达者兼济天下。**我们连独善其身都没做到，就有一股兼济天下的冲动。我还是之前在我看 996 那篇文章中提到的，一般人我们能做的就是好好的提升自己，等你有能力了，有钱了，给贫穷山区盖个小学，给慈善基金捐点钱这就是算开始兼济天下了。\n另外一个群友发表了一个观点，我觉得还是有点用吧。\n连马云这种等级的人都觉得自己的事儿忙不过来，何况一般人呢？\n最后，如果想有更大的视角去看待华为，可以看看这些文字，视角不同，也许会改变你现在的想法：\n任正非回应美国封杀：不要煽动民族情绪，不能狭隘认为爱华为就用华为手机 重磅！任正非最新万字访谈，回应关于华为的一切 | 深网 真的，老爷子的这番采访我特别的佩服，建议每个人看个一两遍。\n不要总想着自己能得到什么，而是你能给公司(其他人)带来什么好处 这点我是在任老爷子采访里面这段话突然想到的。\n可以看到，华为之所以这么牛逼，不是靠每天员工们 965 ，上班划划水，喊喊口号就能这么牛逼的，都是加班加出来的，一般人有他们辛苦吗？虽然别人公司顶着那么好看的光环，都是员工们努力、奋斗，用汗水换的。\n很多人就是，又想公司强，又想工资高，又不想加班。当你站在公司外的角度的时候，又希望公司强，能抵制一切风险，工资高。但是作为员工，又不喜欢加班来使公司更强，总希望做受益者而不愿意去做点事情。\n我们在与别人合作的时候也是这样，在去和别人合作的时候，请教别人问题的时候，别人能有什么好处呢？没有好处为什么要帮你呢？他又不是你的父母，无条件帮你解决一切能解决的事儿。\n合作都是一个双赢的事儿，不要总想着占便宜，占便宜的事儿百分之百干不久的。\n很多人在问问题的时候也是有问题的，本来群主有个技术交流群，不在群里问，非得去私聊群主(我已经听到很多群主抱怨过这个问题了)，不知道是因为觉得群里问效率低，怕浪费时间，还是觉得自己问的问题蠢，怕被别人嘲笑。其实这都是不太好的一种做法，不然群主创建交流群来干啥呢？不就是想大家一起交流，别啥事儿都问他么。\n如果你是觉得问问题怕浪费时间，那别人回答问题就不花费时间吗？如果你确实着急，那你二话不说，红包先上，肯定有效。别上去就是：“在吗；有空吗”，这会体现一个人不会用微信聊天。\n我在一个星球里看到这样一段话：\n和别人交流时，先搞清楚一个问题，这是交流还是请教，如果要谈的话题，你已经掌握了 90%的知识，这个叫交流；如果不到 90%，这个叫请教。无论哪种，都会花费别人时间。所以无论是否对你有帮助，都应该首先发红包。 我在之前的文章也说过，发红包不是因为回答的人差你这点红包，而是这是一种礼仪，知道你是麻烦了别人，表示一点心意。\n不要想着总能说服别人 有这么一个故事：孔子的有一个弟子有一天跟一个人争论，争论啥呢？一年是三季还是四季的问题，然后这个弟子说服不了那个人，然后就带着他找孔子，弟子把事情说清楚了之后，孔子最后说的是一年只有三季。后来弟子就很疑惑，一年不是有四季吗，为什么你要跟他说三季？孔子就说，他一年只有三季了，你还跟他争论什么。\n我当时在群里说了这么一段话，然后就有一个小伙伴不同意我的观点。\n后面想了想，我也没跟他争辩，有可能我是错的，也有可能我是对的，我想了下，我没办法说服他，我就没有回复他。\n我没有说这个小伙伴就是孔子故事里面那个三季的人，而是想表达当一个人所掌握的知识跟你差太远的时候，你没办法去说服他，他也没办法说服你，这个时候自己持有自己的观点就好，慢慢的，时间长了，学到的知识多了，见识广了，就能判断对与错了。\n不要轻易相信别人的结论 吴军老师在得到课程《硅谷来信》里说过：科学是用来怀疑的，而不是用来信仰的。科学看重的是方法和过程，而不是结果。另外，科学的结论也未必等于正确的结论。\n你可能会说，不是说不要轻易相信别人的结论，为啥你就觉得吴军老师说的这个话就是对的呢，岂不是和你说的互相矛盾吗？\n我相信吴军老师说的结论，是因为他在课中所分析的逻辑，举的例子令我信服。所以我才相信他的结论。具体逻辑可以看《硅谷来信》的第 36 封信|科学的结论未必是正确的。\n所以，我上面说的结论，也都有可能是错的，就连科学家得出的结论都有可能是错的。那我们应该怎么办呢？\n我们在看有观点的文章的时候，应该注重得出观点的逻辑是否正确，而不是直接去判断观点。观点这种东西人人都能说，我说明天股票会涨，他说会跌。但是，说出一个合理的解释，这就不是每个人都能做到的。作为一个合格的读者，我们应该有自己的思想，自己的判断逻辑，而不是一味的去接收观点。\n然后随便我们扯到学技术吧，我们在学习框架的时候，所有的大牛都会推荐你去学习框架、库的原理，而不仅仅是 api。原理就是上面说道的底层逻辑，而 api 只是最终的一个结果。","title":"针对华为事件，我思考了四点"},{"content":" 前言 随着web的发展，网站资源的流量也变得越来越大。据统计，60% 的网站流量均来自网站图片，可见对图片合理优化可以大幅影响网站流量，减小带宽消耗和服务器压力。\n有时候你花大力气去配置 webpack 使打包体积减少，不如好好优化几张图片，这篇文章就是让你明白如何选择正确的图片，并且让你明白这么多图片格式，在什么场景下使用什么格式，如果想看答案，那么直接滑到文末看图即可。\n我的更多文章可以看 GitHub博客,\n基本概念 在进入正题之前，先聊聊一些图片相关的基本概念。\n一张照片（位图）不断放大之后，会看到一个个小格子，这些小格子，叫像素。\n一个格子（像素），在计算机中，用二进制来表示，使用的二进制位数越多，像素的色彩就越丰富。\n举个例子，如果一个像素用一位二进制数表示，能有多少种颜色呢？\n两种，一个二进制位，要不放 0（表示黑色），要不放 1（表示白色）\n下图展示了一个像素二进制的位数最多可以展示多少种颜色。\n在对图片有了基本的了解之后，接下来对图片进行分下类，有利于理解各种格式图片的特点。\n根据图的类型分类 点阵图(位图) 矢量图 位图(点阵图) 位图，也叫做点阵图，像素图。构成点阵图的最小单位是像素，位图就是由像素阵列的排列来实现其显示效果的，每个像素有自己的颜色信息，在对位图图像进行编辑操作的时候，可操作的对象是每个像素，我们可以改变图像的色相、饱和度、透明度，从而改变图像的显示效果。\n前面介绍中的那种不断放大会有小格子的图就是属于位图。\n常见的比如：jpg、png、webp等，我们平时遇到的大多数都是位图。\n矢量图 矢量图，也叫做向量图。矢量图并不纪录画面上每一点的信息，而是纪录了元素形状及颜色的算法，当你打开一幅矢量图的时候，软件对图形对应的函数进行运算，将运算结果图形的形状和颜色显示给你看。\n无论显示画面是大还是小，画面上的对象对应的算法是不变的，所以，即使对画面进行倍数相当大的缩放，其显示效果仍然相同(不失真)。\n常见的就是 svg 格式的。\n根据压缩分类 无压缩。 无损压缩。 有损压缩。 无压缩 无压缩的图片格式不对图片数据进行压缩处理，能准确地呈现原图片。BMP 格式就是其中之一。\n有损压缩 指在压缩文件大小的过程中，损失了一部分图片的信息，也即降低了图片的质量，并且这种损失是不可逆的，我们不可能从有一个有损压缩过的图片中恢复出原来的图片。\n常见的有损压缩手段，是按照一定的算法将临近的像素点进行合并。压缩算法不会对图片所有的数据进行编码压缩，而是在压缩的时候，去除了人眼无法识别的图片细节。因此有损压缩可以在同等图片质量的情况下大幅降低图片的尺寸。其中的代表是 jpg。\n无损压缩 在压缩图片的过程中，图片的质量没有任何损耗。我们任何时候都可以从无损压缩过的图片中恢复出原来的信息。\n压缩算法对图片的所有的数据进行编码压缩，能在保证图片的质量的同时降低图片的尺寸。\npng 是其中的代表。\n小结 使用有损压缩处理图像，是去除某些像素数据，无法找回原图。 使用无损处理图像，是对像素数据进行压缩，可以找回原图。 常见的图片格式解析 GIF 关键词：无损压缩、索引色、透明、动画\nGIF(Graphics Interchange Format) 的原义是“图像互换格式”，是一种基于 LZW 算法连续色调的无损的基于索引色的压缩格式。其压缩率一般在 50% 左右，它不属于任何应用程序所以几乎所有相关软件都支持它，公共领域有大量的软件在使用 GIF 图像文件。\nGIF 是一种无损压缩，所以它只是对像素数据进行压缩，其实 LZW 算法只是一个压缩数据的算法，如果你懂哈夫曼算法的话，可能就比较好理解压缩数据是怎么回事儿了。\nGIF 的特性是帧动画。\n相比古老的bmp格式，尺寸较小，而且支持透明(不支持半透明，因为不支持 Alpha 透明通道 )和动画。\n优势 优秀的压缩算法使其在一定程度上保证图像质量的同时将体积变得很小。 可插入多帧，从而实现动画效果。 可设置透明色以产生对象浮现于背景之上的效果。 缺点 由于采用了 8 位压缩，最多只能处理 256 种颜色，故不宜应用于真彩色(文末的附录有解释)图片。\n适合场景 色彩简单的 logo、icon、线框图、文字输出等\nJPG/JPEG 关键词：有损压缩、直接色、适合大图、体积小\nJPEG 格式是最常见的一种图像格式，文件后辍名为“.JPEG”或“.jpg”，JPEG 可以说是人们最熟悉的图档格式，相信在数字相机普及的现在，几乎每台数字相机、照相手机都可以（甚至只能）输出 JPEG 格式的图档。\nJPEG 是一种很典型的使用有损压缩图像格式，也就是说使用者每次进行 JPEG 的存档动作后，图档的一些内容细节都会遭到永久性的破坏，尤其是使用过高的压缩比例，将使最终解压缩后恢复的图像质量明显降低，如果追求高品质图像，不宜采用过高压缩比例。\nJPEG 图片格式的设计目标，是在不影响人类可分辨的图片质量的前提下，尽可能的压缩文件大小。\nBaseline JPEG 和 Progressive JPEG JPEG 有两种保存方式：Baseline JPEG（标准型）、Progressive JPEG（渐进式）。两种格式有相同尺寸以及图像数据，他们的扩展名也是相同的，唯一的区别是二者显示的方式不同。\nBaseline JPEG\nBaseline JPEG 文件存储方式是按从上到下的扫描方式，把每一行顺序的保存在 JPEG 文件中。打开这个文件显示它的内容时，数据将按照存储时的顺序从上到下一行一行的被显示出来，直到所有的数据都被读完，就完成了整张图片的显示。如果文件较大或者网络下载速度较慢，那么就会看到图片被一行行加载的效果，这种格式的JPEG没有什么优点，因此，一般都推荐使用Progressive JPEG。\nProgressive JPEG\n和 Baseline 一遍扫描不同，Progressive JPEG 文件包含多次扫描，这些扫描顺寻的存储在 JPEG 文件中。打开文件过程中，会先显示整个图片的模糊轮廓，随着扫描次数的增加，图片变得越来越清晰。这种格式的主要优点是在网络较慢的情况下，可以看到图片的轮廓知道正在加载的图片大概是什么。在一些网站打开较大图片时，你就会注意到这种技术。\n渐进式图片带来的好处是可以让用户在没有下载完图片就可以看到最终图像的大致轮廓，一定程度上可以提升用户体验（瀑布留的网站建议还是使用标准型的）。\n更多关于 Baseline JPEG 和 Progressive JPEG 请看这篇文章：使用渐进式JPEG来提升用户体验。\n优点 可以支持 24bit 真彩色，普遍应用于需要连续色调的图像如色彩丰富的图片、照片等； 可利用可变的压缩比以控制文件大小； 支持交错（对于渐近式 JPEG 文件）； 缺点 JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。 有损耗压缩会使原始图片数据质量下降。 JPEG 图像不支持透明度处理，透明图片需要召唤 PNG 来呈现。 适合场景 JPG 适用于呈现色彩丰富的图片，在我们日常开发中，JPG 图片经常作为大的背景图、轮播图或 Banner 图出现。\nGIF vs JPEG 由于 GIF 与 JPEG 有着如此不同的特性，因此我们可以很轻易的选择何时该用哪一种格式来输出我们需要的图档：当图片拥有丰富的色彩时，并且没有明显锐利反差的边缘线条时，选择 JPEG 可以得到最好的输出结果，照片就是最好的例子；当图片是拥有明确边缘的线条图、没有使用太多色彩、甚至可能需要透明背景时，GIF 是很好的选择，档案小、画质又精美。\nPNG 关键词：无损压缩、索引色、支持透明、体积大\n便携式网络图形（简称 PNG，英语全称：Portable Network Graphics）。PNG 能够提供长度比 GIF 小30%的无损压缩图像文件。它同时提供 24 位和 32 位真彩色图像支持以及其他诸多技术性支持。由于PNG 优秀的特点，PNG 格式图片可以称为“网页设计专用格式”。PNG 最初的开发目的是为了作为 GIF 的替代方案的，作为做新开发的影像传输文件格式，PNG 同样使用了无损压缩格式，事实上 PNG 的开发就是因为 GIF 所使用的无损压缩格式专利问题而诞生的。\nPNG 有三种形式，下面分别介绍一下他们的区别。\nPNG-8 PNG-8 是 PNG 的索引色版本。PNG-8 是无损的、使用索引色的、点阵图。\nPNG-8 是非常好的 GIF 替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8 具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF 并不支持。 现在，除非需要动画的支持，否则我们没有理由使用 GIF 而不是 PNG-8。\nPNG-24 PNG-24 是 PNG 的直接色版本。PNG-24 是无损的、使用直接色的、点阵图。\n无损的、使用直接色的点阵图，听起来非常像 BMP，是的，从显示效果上来看，PNG-24 跟 BMP 没有不同。PNG-24 的优点在于，它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8 大得多。\n虽然 PNG-24 的一个很大的目标，是替换 JPEG 的使用。但一般而言，PNG-24 的文件大小是 JPEG 的五倍之多，而显示效果则通常只能获得一点点提升。所以，只有在你不在乎图片的文件体积，而想要最好的显示效果时，才应该使用 PNG-24 格式。\n另外，PNG-24 是不支持透明的。\n理论上来说，当你追求最佳的显示效果、并且不在意文件体积大小时，是推荐使用 PNG-24 的。\n实践当中，为了规避体积的问题，我们一般不用PNG去处理较复杂的图像。当我们遇到适合 PNG 的场景时，也会优先选择更为小巧的 PNG-8。\nPNG-32 PNG-32 跟 PNG-24 的区别就是多了一个 Alpha 通道，用来支持半透明，其他的跟 PNG-24 基本一样。\n优点： 支持高级别无损耗压缩； 支持 alpha 通道透明度； 支持 256 色调色板技术以产生小体积文件 最高支持 24 位真彩色图像以及 8 位灰度图像。 支持图像亮度的 Gamma 校准信息。 支持存储附加文本信息，以保留图像名称、作者、著作权、创作时间、注释等信息。 渐近显示和流式读写，适合在网络传输中快速显示预览效果后再展示全貌。 缺点 较旧的浏览器 IE6- 和程序可能不支持 PNG 文件； 与 JPEG 的有损耗压缩相比，PNG 提供的压缩量较少； 与 GIF 格式相比，对多图像文件或动画文件不提供任何支持。 适合场景 呈现小的 Logo、颜色简单且对比强烈的图片或背景等。\n关于 PNG 的小知识点 PNG 分为两种，一种是 Index，一种是 RGB。Index 记录同一种颜色的值和出现的位置（简单地说，比如一个 2px*2px 的超级小图，从左往右从上往下依次的颜色是红，白，白，红，那么记录的方法就是“红-1,4；白-2,3”）；而 RGB 图则把所有像素的色值依次记录下来（即“红，白，白红”）。对于相同的图片，Index 格式的尺寸总是小于 RGB。\n其中 PNG-8 就是 Index，称作为索引色，而 PNG-24 和 PNG-32 是 RGB 形式，也可称作为直接色。\n因为 PNG 是无损压缩，保留了图片需要的所有信息，所以索引色是可以转化为直接色的。\nWebP 关键词：年轻、有损、无损、兼容性\nWebP 是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的、点阵图。\n从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。\n在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%； 在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%； WebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22% 的格外文件大小。 可以看到 WebP 集多种图片文件格式的优点于一身，所以在图片的质量和性能上，WebP 无疑是赢家。\n不过 WebP 有有一个缺点，导致还不能大规模使用，那就是兼容性。\n这是我 2019 年 5 月截的图，可以看到 IE 和 Safari 所有的版本都是不支持的(这是硬伤)， 火狐也是最新的几个版本才开始支持，年轻有年轻的代价。\n此外，WebP 与 JPG 相比较，编码速度慢 10 倍，解码速度慢 1.5 倍，而绝大部分的网络应用中，图片都是静态文件，所以对于用户使用只需要关心解码速度即可。但实际上，WebP 虽然会增加额外的解码时间，但是由于减少了文件体积，缩短了加载的时间，实际上文件的渲染速度反而变快了。\n使用场景 **WebP **集多种图片文件格式的优点于一身，所以基本上适合各种场景，但是由于兼容性不好，所以我们如果大规模的适用 WebP，一定要在 Safari 和 IE 里面施行降级。\n这是淘宝商品图片是我在 Chrome 打开的例子，可以看到图片的后缀是 .jpg_.webp，如果这张图片在 Safari 打开后缀就变为了 .jpg，这是一种降级方案，其他的方案请读者自行研究，不在本文讨论中。\nAPNG APNG（Animated Portable Network Graphics）顾名思义是基于 PNG 格式扩展的一种动画格式，增加了对动画图像的支持，同时加入了 24 位图像和 8 位 Alpha 透明度的支持，这意味着动画将拥有更好的质量，其诞生的目的是为了替代老旧的 GIF 格式，但它目前并没有获得 PNG 组织官方的认可。\nAPNG 第1帧为标准 PNG 图像，剩余的动画和帧速等数据放在 PNG 扩展数据块，因此只支持原版 PNG 的软件会正确显示第 1 帧。\n在兼容性方面绝大部分浏览器都还是支持的，如果以前是因为动画的原因用 GIF 的，现在用 APNG 是一个不错的选择，其他的特性是跟 PNG 样的，因为 APNG 只是一个 PNG 的扩展。\n更多 APNG 相关的可以看 APNG 那些事\nSVG 关键词：无损、矢量图、体积小、不失真、兼容性好\n**可缩放矢量图形 **英文 Scalable Vector Graphics(SVG)，是无损的、矢量图。\nSVG是一种用 XML 定义的语言，用来描述二维矢量及矢量/栅格图形。SVG提供了3种类型的图形对象：矢量图形（vectorgraphicshape例如：由直线和曲线组成的路径）、图象(image)、文本(text)。图形对象还可进行分组、添加样式、变换、组合等操作，特征集包括嵌套变换（nestedtransformations）、剪切路径（clippingpaths）、alpha 蒙板（alphamasks）、滤镜效果（filtereffects）、模板对象（templateobjects）和其它扩展（extensibility）。\nSVG 跟上面这些图片格式最大的不同，是 SVG 是矢量图。这意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当你放大一个 SVG 图片的时候，你看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制企业 Logo、Icon 等。\n优点： SVG 可被非常多的工具读取和修改（比如记事本）。 SVG 与 JPEG 和 GIF 图像比起来，尺寸更小，且可压缩性更强。 SVG 是可伸缩的。 SVG 图像中的文本是可选的，同时也是可搜索的（很适合制作地图）。 SVG 可以与 JavaScript 技术一起运行 SVG图形格式支持多种滤镜和特殊效果，在不改变图像内容的前提下可以实现位图格式中类似文字阴影的效果。 SVG图形格式可以用来动态生成图形。例如，可用 SVG 动态生成具有交互功能的地图，嵌入网页中，并显示给终端用户。 缺点： 渲染成本比较高，对于性能有影响。 SVG 的学习成本比较高，因为它是可编程的。 适用场景 1、高保真度复杂矢量文档已是并将继续是 SVG 的最佳点。它非常详细，适用于查看和打印，可以是独立的，也可以嵌入到网页中 2、在WEB项目中的平面图绘制，如需要绘制线，多边形，图片等。 3、数据可视化。\nSVG 只是 Web 开发常用的一种矢量图，其实矢量图常见还有几种格式：BW 格式、AI 格式、CDR 格式、ICO 格式。\n总结 本文详细的介绍了常见的图片格式：GIF、JPEG、PNG、WebP、APNG、SVG，介绍了他们是什么，有什么用，优点和缺点，以及使用场景。由于图片相关的知识确实太多了，我只是把一些我觉得必要的写出来，下面在网上找到了一个选择图片过程的表格和图，下次不知道选择什么图片格式，直接看图就行。\n其中 APNG 和 WebP 格式出现的较晚，尚未被 Web 标准所采纳，只有在特定平台或浏览器环境可以预知的情况下加以采用。图片格式选择过程如下：\n图片格式 支持透明 动画支持 压缩方式 浏览器支持 相对原图大小 适应场景 baseline-jpeg 不支持 不支持 有损 所有 由画质决定 所有通用场景 progressive-jpeg 不支持 不支持 有损 所有 由画质决定 所有通用场景, 渐进式加载 gif 支持 支持 无损 所有 由帧数和每帧图片大小决定 简单颜色，动画 png 支持 不支持 无损 所有 由png色值位数决定 需要透明时 webp 支持 不支持 有损和无损 所有(除IE和Safari) 由压缩率决定 复杂颜色及形状，浏览器平台可预知 apng 支持 支持 无损 所有(除IE 和Opera) 由每帧图片决定 需要半透明效果的动画 svg 支持 支持 无损 所有(IE8以上) 由内容和特效复杂度决定 简单图形，需要良好的放缩体验，需要动态控制图片特效 附加内容 以下内容大多来自于网络，由于我在写这篇文章的过程中看到了这些，我觉得有必要了解一下，所以我将这些贴出来，跟文章内容关系不大，可以不看。\n位图图像属性 索引颜色/颜色表\n位图常用的一种压缩方法。从位图图片中选择最有代表性的若干种颜色（通常不超过256种）编制成颜色表，然后将图片中原有颜色用颜色表的索引来表示。这样原图片可以被大幅度有损压缩。适合于压缩网页图形等颜色数较少的图形，不适合压缩照片等色彩丰富的图形。\nAlpha通道\n在原有的图片编码方法基础上，增加像素的透明度信息。图形处理中，通常把 RGB 三种颜色信息称为红通道、绿通道和蓝通道，相应的把透明度称为 Alpha 通道。多数使用颜色表的位图格式都支持 Alpha 通道。\n色彩深度\n色彩深度又叫色彩位数，即位图中要用多少个二进制位来表示每个点的颜色，是分辨率的一个重要指标。常用有1位（单色），2位（4色，CGA），4位（16色，VGA），8位（256色），16位（增强色），24位（真彩色）和32位等。色深16位以上的位图还可以根据其中分别表示RGB三原色或CMYK四原色（有的还包括Alpha通道）的位数进一步分类，如16位位图图片还可分为R5G6B5，R5G5B5X1（有1位不携带信息），R5G5B5A1，R4G4B4A4等等。\n8位色，所谓8位色并不是图像只有8种颜色，而是2^8，即256种颜色，8位图指的是用8个bits来表示颜色； 16位色，2^16，从人眼的感觉来说，16位色基本可以满足视觉需要了； 24位色，又称为“真彩色”。大概有1600万之多，这个数字几乎是人类视觉可分辨颜色的极限； 32位色，并非 2^32, 其实也是 2^24 种颜色，不过它增加了2^8 阶颜色的灰度，也就是8位透明度，因此规定它为32位色。 在制作网站页面图片的时候，设计者一般选择 24 位图像。32 位图像虽然质量更好，但同时也带来更大的图像体积（事实上，一般肉眼也很难分辨 24 位图和 32 位图的区别）。此外将原始位图放大与缩小都会使图像效果失真，这是因为它们减小了图像中有效像素的数量或密度的缘故，所以在制作过程中应尽量避免图片被编辑的次数。\n真彩色与伪彩色、直接色 描述一幅图像需要使用图像的属性。图像的属性包含分辨率、像素深度、真/伪彩色、图像的表示法和种类等。本节介绍前面三个特性。\n搞清真彩色、伪彩色与直接色的含义，对于编写图像显示程序、理解图像文件的存储格式有直接的指导意义，也不会对出现诸如这样的现象感到困惑：本来是用真彩色表示的图像，但在VGA显示器上显示的图像颜色却不是原来图像的颜色。\n我这里就不以图形学的方式介绍各种花里胡哨的概念，我就用最简单的，作为一个程序员的角度来理解就行了。\n真彩色\n真彩色图像是一种用三个或更多字节描述像素的计算机图像存储方式。\n一般来说，前三个通道都会各用一个字节表示，如红绿蓝（RGB）或者蓝绿红（BGR）。如果存在第四个字节，则表示该图像采用了 Alpha 通道。然而，实际系统往往用多于 8 位（即1字节）表达一个通道，如一个 48 位的扫描仪等。这样的系统都统称为真彩色系统。\n伪彩色\n对于伪彩色图像其实可以理解为索引图像，他的每个像素值存储的不是直接的基色强度，而是存储的索引。就跟 js 里面的引用变量一样，变量只是个地址，变量所指向的值才是真正的值。\n对于伪彩色图像会有一个颜色表，是一个[3，255] 的数组，分别对应 0~255 个灰度值的RGB值，对照原理如下：\n可以看到上图，像素值存储的只是索引号 128，根据索引找到的 RGB 值才是真正的基色强度。\n直接色\n直接色又称假彩色。它和伪彩色的区别就是，前者的每个基色强度都要通过索引找到真正的基色强度。\n小结\n直接色系统产生颜色与真彩色系统相比，相同之处是都采用R，G，B分量决定基色强度，不同之处是前者的基色强度直接用R，G，B决定，而后者的基色强度由R，G，B经变换后决定。因而这两种系统产生的颜色就有差别。试验结果表明，使用直接色在显示器上显示的彩色图像看起来真实、很自然。\n直接色系统与伪彩色系统相比，相同之处是都采用查找表，不同之处是前者对 R，G，B分量分别进行变换，后者是把整个像素当作查找表的索引值进行彩色变换。\n参考链接 图片格式 jpg、png、gif各有什么优缺点？什么情况下用什么格式的图片呢？ 真彩色与伪彩色、直接色的区别 10 个免费的图像压缩优化工具和脚本 网页中图片格式的选择 最后欢迎大家关注我的公众号-「前端桃园」，我是桃翁。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/264/","summary":"前言 随着web的发展，网站资源的流量也变得越来越大。据统计，60% 的网站流量均来自网站图片，可见对图片合理优化可以大幅影响网站流量，减小带宽消耗和服务器压力。\n有时候你花大力气去配置 webpack 使打包体积减少，不如好好优化几张图片，这篇文章就是让你明白如何选择正确的图片，并且让你明白这么多图片格式，在什么场景下使用什么格式，如果想看答案，那么直接滑到文末看图即可。\n我的更多文章可以看 GitHub博客,\n基本概念 在进入正题之前，先聊聊一些图片相关的基本概念。\n一张照片（位图）不断放大之后，会看到一个个小格子，这些小格子，叫像素。\n一个格子（像素），在计算机中，用二进制来表示，使用的二进制位数越多，像素的色彩就越丰富。\n举个例子，如果一个像素用一位二进制数表示，能有多少种颜色呢？\n两种，一个二进制位，要不放 0（表示黑色），要不放 1（表示白色）\n下图展示了一个像素二进制的位数最多可以展示多少种颜色。\n在对图片有了基本的了解之后，接下来对图片进行分下类，有利于理解各种格式图片的特点。\n根据图的类型分类 点阵图(位图) 矢量图 位图(点阵图) 位图，也叫做点阵图，像素图。构成点阵图的最小单位是像素，位图就是由像素阵列的排列来实现其显示效果的，每个像素有自己的颜色信息，在对位图图像进行编辑操作的时候，可操作的对象是每个像素，我们可以改变图像的色相、饱和度、透明度，从而改变图像的显示效果。\n前面介绍中的那种不断放大会有小格子的图就是属于位图。\n常见的比如：jpg、png、webp等，我们平时遇到的大多数都是位图。\n矢量图 矢量图，也叫做向量图。矢量图并不纪录画面上每一点的信息，而是纪录了元素形状及颜色的算法，当你打开一幅矢量图的时候，软件对图形对应的函数进行运算，将运算结果图形的形状和颜色显示给你看。\n无论显示画面是大还是小，画面上的对象对应的算法是不变的，所以，即使对画面进行倍数相当大的缩放，其显示效果仍然相同(不失真)。\n常见的就是 svg 格式的。\n根据压缩分类 无压缩。 无损压缩。 有损压缩。 无压缩 无压缩的图片格式不对图片数据进行压缩处理，能准确地呈现原图片。BMP 格式就是其中之一。\n有损压缩 指在压缩文件大小的过程中，损失了一部分图片的信息，也即降低了图片的质量，并且这种损失是不可逆的，我们不可能从有一个有损压缩过的图片中恢复出原来的图片。\n常见的有损压缩手段，是按照一定的算法将临近的像素点进行合并。压缩算法不会对图片所有的数据进行编码压缩，而是在压缩的时候，去除了人眼无法识别的图片细节。因此有损压缩可以在同等图片质量的情况下大幅降低图片的尺寸。其中的代表是 jpg。\n无损压缩 在压缩图片的过程中，图片的质量没有任何损耗。我们任何时候都可以从无损压缩过的图片中恢复出原来的信息。\n压缩算法对图片的所有的数据进行编码压缩，能在保证图片的质量的同时降低图片的尺寸。\npng 是其中的代表。\n小结 使用有损压缩处理图像，是去除某些像素数据，无法找回原图。 使用无损处理图像，是对像素数据进行压缩，可以找回原图。 常见的图片格式解析 GIF 关键词：无损压缩、索引色、透明、动画\nGIF(Graphics Interchange Format) 的原义是“图像互换格式”，是一种基于 LZW 算法连续色调的无损的基于索引色的压缩格式。其压缩率一般在 50% 左右，它不属于任何应用程序所以几乎所有相关软件都支持它，公共领域有大量的软件在使用 GIF 图像文件。\nGIF 是一种无损压缩，所以它只是对像素数据进行压缩，其实 LZW 算法只是一个压缩数据的算法，如果你懂哈夫曼算法的话，可能就比较好理解压缩数据是怎么回事儿了。\nGIF 的特性是帧动画。","title":"每个前端工程师都应该了解的图片知识"},{"content":"最近 996.ICU 太火了。我本来不太想蹭这个热点，因为我的观念与很多人可能不相同，所以担心被骂，最近有读者问我为啥最近没有更新，最近我在准备晋升的事儿，所以也没怎么准备技术上的内容，但是对于 996 这件事儿上，我最近还是有很多想法，跟大家交流下吧！\n后面我会将最近晋升的一些心得总结出来跟大家交流一下，毕竟涨工资呀，所以希望对大家有帮助。\n一、反对 996 的本质原因 为什么要反对 996，说到底，就是钱给的不够。\n这句话可能说到了心坎里去，咱们来理一理这个逻辑。\n如果，发工资不按照一个月一个月发，不按照一天一天的算，而是按照小时、或者分钟、甚至秒来算，你会不会愿意每天多工作一阵子。 加入你现在工资每个月 10000，那么每天的日薪差不多是 480 左右，一天八小时，时薪就是 60。你每多工作一小时就可以多得 60 块，如果你不是三和大神(不知道三和大神的搜索一下，不然你可能不太好理解)的话，你大概率不会只工作 8 个小时。\n所以，我觉得说到底，反对的就是企业搞 996，加班不给加班工资导致的问题。\n对于头条，阿里这样的企业，虽然知道他们加班很严重，但是工资高呀，所以很多人拼了命的想去。\n今天我在小道消息里看到这样一个观点，加班的时候不愿意加，看到别人拿年终奖拿得多又羡慕；自己体会这句话吧。\n二、我的一些观点 讨论完了本质，我再说一下我的一些观点。\n**首先声明，我是极力反对 996 的。**但是对于现在很多人的行为不是太赞同，所以写出来跟大家讨论下。\n1. 不喜欢就走 在这场革命(说得似乎有点严重了)中，不少人想到终于有机会吐槽自己的公司了，垃圾公司，压迫员工，还搞 996。\n对于这种行为我的观点是既然觉得在公司干得不爽，为何不走呢？\n心里可能想着：我也想走呀，但是没其他公司要我咋办。\n这种想法我感觉是一种弱者的态度，即表现出了自己弱，然后又抱怨现状。这种行为就像这样一群人，整天自己不努力，然后抱怨世界不公平，为什么我的爸爸不是王健林；为什么同一个老师教的，他的成绩那么好；为什么同一个班的，他的工作那么高；为什么一起进公司的，他为什么涨工资。\n如果你有能力，不喜欢这个公司的制度，不能忍受 996，选择离开就行了呗。\n所以，提升自己，让自己变得更强，不喜欢就走。\n2. 其实我们已经很幸运了 作为程序员的我们，其实已经很幸运了，还有假期，还有双休，已经很不错了。有很多行业，根本没有休息，一年可能就只有过年的那几天会放，没错，我爸爸的职业就是这样，建筑工人，他们没有周末，没有节假日。\n另外你在外面看到的环卫工人，外面开早餐店，饭店的，有过双休吗？\n我说这点其实主要是想表达，我们应该少点抱怨，我们还是不错了，咱们让自己变得更强，多为社会做点有价值的事儿，让更多的人拥有双休，拥有节假日。这肯定不是取去革命能解决的事儿，不是去抵制资本家能干的事儿。\n3. 多花时间来提升自己的工作效率 说实话，大部分人工作时间的三分之一都没有为公司产生价值。\n这三分之一的时间你可能会早上用来刷下咨询，各大群水一下，看看各大新闻网站等待。也许还会去抽抽烟，跟同事聊聊天，以及有一些时间你无法专心工作等。\n当然，不可能有人做到每天都百分之百的投入，但是投入的比例就是人与人之间的差距，这是一个影响效率的地方。\n众所周知，在公司级别比你高的，经验比你丰富的，代码敲得比你快，完成任务比你好，这肯定嘛，别人工资拿得也高，所以干活也多。反过来也成立，活干得多，工资拿得高。你给公司创造的价值越大，那么你就应该拿更多的工资，后面我将晋升也会说到这个。\n所以我们已经想办法提高自己的工作效率，在一定的事件内干更多的活，那么你就需要提高自己的能力，这样你就能在规定的事件内完成任务，当然就不需要加班了。\n可能有人说，公司就是给你的任务是无论怎么做都做不完的，那么这种公司对于资源不合理安排，你可以选择第一点，不喜欢，咱就走。\n三、这件事情我思考了哪些？ 我在跟我周围讨论相关话题的时候，我感觉我思考的问题跟他们不同。比如：\n为什么这个仓库，或者说这个网站会传播得这么快？在最开始的几十，几百颗 star 是怎么来的？为什么同样类似的项目，godie996(方应杭的项目，地址是：https://godie996.com)没有火起来呢？当时我们讨论了两个原因：一个是各大群的宣传，另一个是 996.ICU 界面做得好看。另外的原因供大家思考，欢迎在评论区给出你的答案。 为什么那么多人不满意自己的公司，而不选择离开呢？ 为什么会这么多公司会搞 996 呢？ 同样是互联网公司，为什么国外的大厂不搞 996 呢？ 等等很多问题我觉得才是我们应该去思考的地方，我们只有去思源，才能从根本上解决问题，从表面现象去解决问题很多时候会走很多弯路。\n对于这个我举个例子，古代的铁匠都知道百炼成钢，把铁红了，然后拿出来锤，然后又拿进去烧，反复几次，就会发现做出来的铁具很硬，但是不知道为什么，其实就是因为铁里面融入了炭。所以近现代的就直接在熔铁的过程中加入炭，就不需要反复锤炼了。\n我们如果掌握不了一个东西的本质，掌握不了终极大道，就会在表面兜圈子。\n本文完，希望能与君共勉，能给你带来启发。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/267/","summary":"最近 996.ICU 太火了。我本来不太想蹭这个热点，因为我的观念与很多人可能不相同，所以担心被骂，最近有读者问我为啥最近没有更新，最近我在准备晋升的事儿，所以也没怎么准备技术上的内容，但是对于 996 这件事儿上，我最近还是有很多想法，跟大家交流下吧！\n后面我会将最近晋升的一些心得总结出来跟大家交流一下，毕竟涨工资呀，所以希望对大家有帮助。\n一、反对 996 的本质原因 为什么要反对 996，说到底，就是钱给的不够。\n这句话可能说到了心坎里去，咱们来理一理这个逻辑。\n如果，发工资不按照一个月一个月发，不按照一天一天的算，而是按照小时、或者分钟、甚至秒来算，你会不会愿意每天多工作一阵子。 加入你现在工资每个月 10000，那么每天的日薪差不多是 480 左右，一天八小时，时薪就是 60。你每多工作一小时就可以多得 60 块，如果你不是三和大神(不知道三和大神的搜索一下，不然你可能不太好理解)的话，你大概率不会只工作 8 个小时。\n所以，我觉得说到底，反对的就是企业搞 996，加班不给加班工资导致的问题。\n对于头条，阿里这样的企业，虽然知道他们加班很严重，但是工资高呀，所以很多人拼了命的想去。\n今天我在小道消息里看到这样一个观点，加班的时候不愿意加，看到别人拿年终奖拿得多又羡慕；自己体会这句话吧。\n二、我的一些观点 讨论完了本质，我再说一下我的一些观点。\n**首先声明，我是极力反对 996 的。**但是对于现在很多人的行为不是太赞同，所以写出来跟大家讨论下。\n1. 不喜欢就走 在这场革命(说得似乎有点严重了)中，不少人想到终于有机会吐槽自己的公司了，垃圾公司，压迫员工，还搞 996。\n对于这种行为我的观点是既然觉得在公司干得不爽，为何不走呢？\n心里可能想着：我也想走呀，但是没其他公司要我咋办。\n这种想法我感觉是一种弱者的态度，即表现出了自己弱，然后又抱怨现状。这种行为就像这样一群人，整天自己不努力，然后抱怨世界不公平，为什么我的爸爸不是王健林；为什么同一个老师教的，他的成绩那么好；为什么同一个班的，他的工作那么高；为什么一起进公司的，他为什么涨工资。\n如果你有能力，不喜欢这个公司的制度，不能忍受 996，选择离开就行了呗。\n所以，提升自己，让自己变得更强，不喜欢就走。\n2. 其实我们已经很幸运了 作为程序员的我们，其实已经很幸运了，还有假期，还有双休，已经很不错了。有很多行业，根本没有休息，一年可能就只有过年的那几天会放，没错，我爸爸的职业就是这样，建筑工人，他们没有周末，没有节假日。\n另外你在外面看到的环卫工人，外面开早餐店，饭店的，有过双休吗？\n我说这点其实主要是想表达，我们应该少点抱怨，我们还是不错了，咱们让自己变得更强，多为社会做点有价值的事儿，让更多的人拥有双休，拥有节假日。这肯定不是取去革命能解决的事儿，不是去抵制资本家能干的事儿。\n3. 多花时间来提升自己的工作效率 说实话，大部分人工作时间的三分之一都没有为公司产生价值。\n这三分之一的时间你可能会早上用来刷下咨询，各大群水一下，看看各大新闻网站等待。也许还会去抽抽烟，跟同事聊聊天，以及有一些时间你无法专心工作等。\n当然，不可能有人做到每天都百分之百的投入，但是投入的比例就是人与人之间的差距，这是一个影响效率的地方。\n众所周知，在公司级别比你高的，经验比你丰富的，代码敲得比你快，完成任务比你好，这肯定嘛，别人工资拿得也高，所以干活也多。反过来也成立，活干得多，工资拿得高。你给公司创造的价值越大，那么你就应该拿更多的工资，后面我将晋升也会说到这个。\n所以我们已经想办法提高自己的工作效率，在一定的事件内干更多的活，那么你就需要提高自己的能力，这样你就能在规定的事件内完成任务，当然就不需要加班了。\n可能有人说，公司就是给你的任务是无论怎么做都做不完的，那么这种公司对于资源不合理安排，你可以选择第一点，不喜欢，咱就走。\n三、这件事情我思考了哪些？ 我在跟我周围讨论相关话题的时候，我感觉我思考的问题跟他们不同。比如：\n为什么这个仓库，或者说这个网站会传播得这么快？在最开始的几十，几百颗 star 是怎么来的？为什么同样类似的项目，godie996(方应杭的项目，地址是：https://godie996.com)没有火起来呢？当时我们讨论了两个原因：一个是各大群的宣传，另一个是 996.ICU 界面做得好看。另外的原因供大家思考，欢迎在评论区给出你的答案。 为什么那么多人不满意自己的公司，而不选择离开呢？ 为什么会这么多公司会搞 996 呢？ 同样是互联网公司，为什么国外的大厂不搞 996 呢？ 等等很多问题我觉得才是我们应该去思考的地方，我们只有去思源，才能从根本上解决问题，从表面现象去解决问题很多时候会走很多弯路。\n对于这个我举个例子，古代的铁匠都知道百炼成钢，把铁红了，然后拿出来锤，然后又拿进去烧，反复几次，就会发现做出来的铁具很硬，但是不知道为什么，其实就是因为铁里面融入了炭。所以近现代的就直接在熔铁的过程中加入炭，就不需要反复锤炼了。","title":"中肯的看待 996"},{"content":" 文章首发于个人网站：前端桃园\n很多人总是抱怨面试官问一些平时不常用的知识点，比如算法呀，网络(TCP)等等，也就是大家常说的：面试造火箭，工作拧螺丝。\n但是有没有想过为什么整个前端圈，或者绝大部分面试，不仅是前端，各种职位都是这样呢？难道就没人来解决这个问题吗？\n我觉得，事实上，这是一种合理的行为，并不是因为存在即合理，而是本来就应该这样，接下来我以两个方面阐述我的观点。\n一、 考验对专业知识的掌握的扎实程度 在张鑫旭的十问十答里的一个问题是，「前端开发基础扎实的标准是什么？」\n这里面他对「扎实」的解释我觉得很适合来答这个问题。\n「扎」其实可以理解为深度，你可以想象一个用一根针，扎你的皮肤，对一个点的压力，可以让你痛不欲生。\n那么如何理解知识的深度呢？\n我还是拿前端面试来举例，比如考一个快速排序，很多人就觉得这有什么好考的嘛，平时又用不到，引擎底层已经写好了 sort 方法，什么数量级用什么排序底层也已经实现好了，没必要考了呀。\n但是其实面试官并不是想考你快排的代码是如何写的，说实话，花个十分钟，最多半小时，一个快排的代码你肯定可以记住。但是其实考察快排的真正原因可能不仅仅是考察代码，而是考察它的思想，分而治之(分治法)，划分算法的运用。\n另外可能会再问你，它的时间复杂度是多少，如何计算等这些问题，这些问题也不是来考你这一个算法的计算，而是通过这一个算法来看你知道怎么算时间复杂度不？以此来引导你为什么快速排序快，为什么同样是分治法的归并排序没有这么快。等等相关的算法方面的知识。\n面试官所考察的问题只是各种底层思想的一个运用，通过这个实例应用来考察对底层思想的理解程度。所以很多时候大厂的面试总是从浅入深的问问题，直到把你问到不知道为止。\n再谈谈「实」，实则可以理解为满，考察知识的广度。\n想象一下什么样的情况你才会说一个东西实，给你一晚装满的米饭，并且还压一压，再放进去一些米饭，直到压不下去了为止，这个时候你会说满满的一晚米饭，很实在。\n所以对「实」的理解就可以理解为满，全。\n如何来体现你对知识的广度呢，也就是实。\n比如可以考察一些你平时不常用的，但是你也许会用到的知识点。比如一些简单的算法和数据结构，链表呀，网络里面的 tcp/ip 协议族呀，函数式编程呀等等，一些 html5 的特性(比如 web-compoennt)等等。\n你可能在平时编程中没用到，或者大多数前端工程师平时不会用到，但是这些是基本功是需要知道的，比如 React 源码中就用到一些简单的数据结构，链表(Fiber 树就是用链表的结构存的，是一个单链表，以及里面还有循环列表的增删改查)，如果不知道树可以用链表存，如何对链表进行操作，那么可能你看源码就很成问题。里面还有一些位运算等，位运算平时也不常用吧，但是 fb 的工程师就用它来解决实际问题。\n再比如 web-component，这已经是 w3c 提出的一个前端组件化的标准了，我国也有大佬用 web-component 实现了一些库，比如腾讯出的 OMI。\n地址： https://github.com/Tencent/omi\n所以狼叔在 「2019 大前端技术趋势深度解读」里提到可能他是下一代框架的标准。\n我们前端变化得快，新东西也多，如何不跟上时代，多了解(主要了解，不是每个新东西都要去深究，因为你没那么多时间，大多数时间还是要用在平时用得到的地方)一些新东西。跟不上时代，也行就会慢慢的被淘汰，所以现在前端招聘基本上都会需要你会一门框架，不管是 React 、Vue、Angular，这些都是趋势，数据驱动，不再是以前拿起 jQuery 就是干了。\n小节 在工作中常用的知识点，那些是最重要的，那么大家都会这些，**如果你不知道点，别人不知道的东西，这些东西比别人掌握得更深一点，面试官为什么要你？**也许你还是个双非（非982、211）。\n我觉得在任何领域都适合一个定律，就是「T」字形发展，先把专业搞深一点，然后往两边扩展。\n二、醉翁之意不在题 另外面试官也许会考你一些软技能，考你的不仅仅是面试题完成了那么简单。这点注意，越简单的题越不简单(好好理解这句话)。\n我拿我自己的经历来举例，之前做小米的笔试题(是那种把题目发给你，两天内做好了发给他)的时候，有一道题是：求最大公约数的题目。\n很多人看到这道题觉得很简单嘛，几行代码就搞定了，当时跟我一起做笔试题的几位竞争者也是，他们就写了一个算法。\n而我当时想到，我觉得面试官在检查这道题的时候如果看代码还是有点麻烦，所以我就写了一个界面，界面上提供了可以点击的数字，还有输入框，还有几个计算按钮，一个结果框，用户可以通过点击数字，或者在输入框里输入数字进行计算最大公约数，还做了一些错误提示等。\n这相当于做了一个应用，一个可以给用户使用的应用，所以最后因为这道题，我被录取了。\n我被录取的原因，这些都是进去之后，老大告诉我的，当时很惊讶，竟然是因为这个。\n所以之后我就越来越注重用户体验，多一些思考，让别人用自己做的东西的时候更舒服，更方便。\n我期望的面试官 声明：我没当过面试官，所以以上内容大多是我思考(猜测)的，也可以用说用一种合理的解释，来解释了现在这种现象。\n我期望的面试官是这样的，或者说如果我以后当了面试官我会怎么做。\n作为面试官不是把面试者考倒，而是尽量挖掘面试者擅长的地方，然后去打破砂锅问到底的看对擅长的地方研究有多深，考察深度。 在考察的时候先考察广度，再考察深度，从广度的问题中提取擅长的点，然后再问下去。 一些小提示 一般面试官不会因为你某道题没答出来就否定你的。 面试官不喜欢简历上写的啥都会，一问每个知识点都掌握得很浅。 对于平时常用的框架，至少要知道核心原理。 这些是之前我们组面试官在讨论的时候提到的，希望能给大家帮助。\n我是桃翁，一个爱思考的前端er，想了解关于更多的面试相关的，请关注我的公号：前端桃园\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/268/","summary":"文章首发于个人网站：前端桃园\n很多人总是抱怨面试官问一些平时不常用的知识点，比如算法呀，网络(TCP)等等，也就是大家常说的：面试造火箭，工作拧螺丝。\n但是有没有想过为什么整个前端圈，或者绝大部分面试，不仅是前端，各种职位都是这样呢？难道就没人来解决这个问题吗？\n我觉得，事实上，这是一种合理的行为，并不是因为存在即合理，而是本来就应该这样，接下来我以两个方面阐述我的观点。\n一、 考验对专业知识的掌握的扎实程度 在张鑫旭的十问十答里的一个问题是，「前端开发基础扎实的标准是什么？」\n这里面他对「扎实」的解释我觉得很适合来答这个问题。\n「扎」其实可以理解为深度，你可以想象一个用一根针，扎你的皮肤，对一个点的压力，可以让你痛不欲生。\n那么如何理解知识的深度呢？\n我还是拿前端面试来举例，比如考一个快速排序，很多人就觉得这有什么好考的嘛，平时又用不到，引擎底层已经写好了 sort 方法，什么数量级用什么排序底层也已经实现好了，没必要考了呀。\n但是其实面试官并不是想考你快排的代码是如何写的，说实话，花个十分钟，最多半小时，一个快排的代码你肯定可以记住。但是其实考察快排的真正原因可能不仅仅是考察代码，而是考察它的思想，分而治之(分治法)，划分算法的运用。\n另外可能会再问你，它的时间复杂度是多少，如何计算等这些问题，这些问题也不是来考你这一个算法的计算，而是通过这一个算法来看你知道怎么算时间复杂度不？以此来引导你为什么快速排序快，为什么同样是分治法的归并排序没有这么快。等等相关的算法方面的知识。\n面试官所考察的问题只是各种底层思想的一个运用，通过这个实例应用来考察对底层思想的理解程度。所以很多时候大厂的面试总是从浅入深的问问题，直到把你问到不知道为止。\n再谈谈「实」，实则可以理解为满，考察知识的广度。\n想象一下什么样的情况你才会说一个东西实，给你一晚装满的米饭，并且还压一压，再放进去一些米饭，直到压不下去了为止，这个时候你会说满满的一晚米饭，很实在。\n所以对「实」的理解就可以理解为满，全。\n如何来体现你对知识的广度呢，也就是实。\n比如可以考察一些你平时不常用的，但是你也许会用到的知识点。比如一些简单的算法和数据结构，链表呀，网络里面的 tcp/ip 协议族呀，函数式编程呀等等，一些 html5 的特性(比如 web-compoennt)等等。\n你可能在平时编程中没用到，或者大多数前端工程师平时不会用到，但是这些是基本功是需要知道的，比如 React 源码中就用到一些简单的数据结构，链表(Fiber 树就是用链表的结构存的，是一个单链表，以及里面还有循环列表的增删改查)，如果不知道树可以用链表存，如何对链表进行操作，那么可能你看源码就很成问题。里面还有一些位运算等，位运算平时也不常用吧，但是 fb 的工程师就用它来解决实际问题。\n再比如 web-component，这已经是 w3c 提出的一个前端组件化的标准了，我国也有大佬用 web-component 实现了一些库，比如腾讯出的 OMI。\n地址： https://github.com/Tencent/omi\n所以狼叔在 「2019 大前端技术趋势深度解读」里提到可能他是下一代框架的标准。\n我们前端变化得快，新东西也多，如何不跟上时代，多了解(主要了解，不是每个新东西都要去深究，因为你没那么多时间，大多数时间还是要用在平时用得到的地方)一些新东西。跟不上时代，也行就会慢慢的被淘汰，所以现在前端招聘基本上都会需要你会一门框架，不管是 React 、Vue、Angular，这些都是趋势，数据驱动，不再是以前拿起 jQuery 就是干了。\n小节 在工作中常用的知识点，那些是最重要的，那么大家都会这些，**如果你不知道点，别人不知道的东西，这些东西比别人掌握得更深一点，面试官为什么要你？**也许你还是个双非（非982、211）。\n我觉得在任何领域都适合一个定律，就是「T」字形发展，先把专业搞深一点，然后往两边扩展。\n二、醉翁之意不在题 另外面试官也许会考你一些软技能，考你的不仅仅是面试题完成了那么简单。这点注意，越简单的题越不简单(好好理解这句话)。\n我拿我自己的经历来举例，之前做小米的笔试题(是那种把题目发给你，两天内做好了发给他)的时候，有一道题是：求最大公约数的题目。\n很多人看到这道题觉得很简单嘛，几行代码就搞定了，当时跟我一起做笔试题的几位竞争者也是，他们就写了一个算法。\n而我当时想到，我觉得面试官在检查这道题的时候如果看代码还是有点麻烦，所以我就写了一个界面，界面上提供了可以点击的数字，还有输入框，还有几个计算按钮，一个结果框，用户可以通过点击数字，或者在输入框里输入数字进行计算最大公约数，还做了一些错误提示等。\n这相当于做了一个应用，一个可以给用户使用的应用，所以最后因为这道题，我被录取了。\n我被录取的原因，这些都是进去之后，老大告诉我的，当时很惊讶，竟然是因为这个。\n所以之后我就越来越注重用户体验，多一些思考，让别人用自己做的东西的时候更舒服，更方便。\n我期望的面试官 声明：我没当过面试官，所以以上内容大多是我思考(猜测)的，也可以用说用一种合理的解释，来解释了现在这种现象。\n我期望的面试官是这样的，或者说如果我以后当了面试官我会怎么做。\n作为面试官不是把面试者考倒，而是尽量挖掘面试者擅长的地方，然后去打破砂锅问到底的看对擅长的地方研究有多深，考察深度。 在考察的时候先考察广度，再考察深度，从广度的问题中提取擅长的点，然后再问下去。 一些小提示 一般面试官不会因为你某道题没答出来就否定你的。 面试官不喜欢简历上写的啥都会，一问每个知识点都掌握得很浅。 对于平时常用的框架，至少要知道核心原理。 这些是之前我们组面试官在讨论的时候提到的，希望能给大家帮助。","title":"为什么现在面试都是面试造火箭"},{"content":"简介 PM2 是 node 进程管理工具，可以利用它来简化很多 node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。\n安装 npm install -g pm2 快速使用 pm2 start app.js 常用命令 启动 参数说明：\n--watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。 -i --instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目。 --ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如--ignore-watch=\u0026quot;test node_modules \u0026quot;some scripts\u0026quot;\u0026quot; -n --name：应用的名称。查看应用信息的时候可以用到。 -o --output \u0026lt;path\u0026gt;：标准输出日志文件的路径。 -e --error \u0026lt;path\u0026gt;：错误输出日志文件的路径。 --interpreter \u0026lt;interpreter\u0026gt;：the interpreter pm2 should use for executing app (bash, python\u0026hellip;)。比如你用的coffee script来编写应用。 重启 pm2 restart app.js 3.3 停止 停止特定的应用。可以先通过pm2 list获取应用的名字（\u0026ndash;name指定的）或者进程id。\npm2 stop app_name|app_id 如果要停止所有应用，可以\npm2 stop all 停止 类似pm2 stop，如下\npm2 stop app_name|app_id pm2 stop all 从进程列表删除进程 // pm2 delete [appname] | id pm2 delete app // 指定进程名删除 pm2 delete 0 // 指定进程id删除 删除进程列表中所有进程 pm2 delete all 查看进程状态 pm2 list // 或者 pm2 ls 查看某个进程的信息 pm2 describe 0 负载均衡 命令如下，表示开启三个进程。如果-i 0，则会根据机器当前核数自动开启尽可能多的进程。\npm2 start app.js -i 3 # 开启三个进程 pm2 start app.js -i max # 根据机器CPU核数，开启对应数目的进程 日志查看 除了可以打开日志文件查看日志外，还可以通过pm2 logs来查看实时日志。这点对于线上问题排查非常重要。\n比如某个 node 服务突然异常重启了，那么可以通过 pm2 提供的日志工具来查看实时日志，看是不是脚本出错之类导致的异常重启。\npm2 logs 开机自动启动 可以通过pm2 startup来实现开机自启动。细节可参考。大致流程如下\n通过pm2 save保存当前进程状态。 通过pm2 startup [platform]生成开机自启动的命令。（记得查看控制台输出） 将步骤2生成的命令，粘贴到控制台进行，搞定。 监控(monitor)-查看进程的资源消耗情况 运行如下命令，查看当前通过pm2运行的进程的状态。\npm2 monit 通过pm2配置文件来自动部署项目 在项目根目录下新建一个 deploy.yaml 文件 # deploy.yaml apps: - script: ./start.js # 入口文件 name: \u0026#39;app\u0026#39; # 程序名称 env: # 环境变量 COMMON_VARIABLE: true env_production: NODE_ENV: production deploy: # 部署脚本 production: # 生产环境 user: lentoo # 服务器的用户名 host: 192.168.2.166 # 服务器的ip地址 port: 22 # ssh端口 ref: origin/master # 要拉取的git分支 ssh_options: StrictHostKeyChecking=no # SSH 公钥检查 repo: https://github.com/**.git # 远程仓库地址 path: /home # 拉取到服务器某个目录下 pre-deploy: git fetch --all # 部署前执行 post-deploy: npm install \u0026amp;\u0026amp; pm2 reload deploy.yaml --env production # 部署后执行 env: NODE_ENV: production 配置git的ssh免密认证 在服务器中生成rsa公钥和私钥，当前是 centos7 下进行\n前提服务器要安装git，没有安装的先安装git，已安装的跳过\nyum –y install git 生成秘钥 ssh-keygen -t rsa -C \u0026#34;xxx@xxx.com\u0026#34; 在~/.ssh目录下有 id_rsa和 id_rsa.pub两个文件，其中id_rsa.pub文件里存放的即是公钥key。\n登录到GitHub，点击右上方的头像，选择settings ，点击Add SSH key，把id_rsa.pub的内容复制到里面即可。 使用pm2部署项目 每次部署前先将本地的代码提交到远程git仓库\n首次部署 pm2 deploy deploy.yaml production setup 复制代码 部署完成后，既可登陆服务器查看配置的目录下是否从git上拉取了项目\n再次部署 pm2 deploy deploy.yaml production upddate 该部署流程同样适用前端项目 如vue-cli的项目，自动部署到服务器，自动执行npm run build 命令，生成的dist目录，指定到nginx的静态文件目录下。\n参考资料 PM2实用入门指南 使用pm2自动化部署node项目 其他资料 https://pm2.io/doc/zh/runtime/overview/\n","permalink":"/posts/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/238/","summary":"简介 PM2 是 node 进程管理工具，可以利用它来简化很多 node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。\n安装 npm install -g pm2 快速使用 pm2 start app.js 常用命令 启动 参数说明：\n--watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。 -i --instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目。 --ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如--ignore-watch=\u0026quot;test node_modules \u0026quot;some scripts\u0026quot;\u0026quot; -n --name：应用的名称。查看应用信息的时候可以用到。 -o --output \u0026lt;path\u0026gt;：标准输出日志文件的路径。 -e --error \u0026lt;path\u0026gt;：错误输出日志文件的路径。 --interpreter \u0026lt;interpreter\u0026gt;：the interpreter pm2 should use for executing app (bash, python\u0026hellip;)。比如你用的coffee script来编写应用。 重启 pm2 restart app.js 3.3 停止 停止特定的应用。可以先通过pm2 list获取应用的名字（\u0026ndash;name指定的）或者进程id。\npm2 stop app_name|app_id 如果要停止所有应用，可以\npm2 stop all 停止 类似pm2 stop，如下\npm2 stop app_name|app_id pm2 stop all 从进程列表删除进程 // pm2 delete [appname] | id pm2 delete app // 指定进程名删除 pm2 delete 0 // 指定进程id删除 删除进程列表中所有进程 pm2 delete all 查看进程状态 pm2 list // 或者 pm2 ls 查看某个进程的信息 pm2 describe 0 负载均衡 命令如下，表示开启三个进程。如果-i 0，则会根据机器当前核数自动开启尽可能多的进程。","title":"pm2 使用教程"},{"content":"我发布了我的第一个 npm 组件，一个基于 react 的 3d 标签云组件。在这途中我也是遇到了很多的坑，花在完善整个发布流程的时间远多于写这个组件本身的时间，所以我记录下我觉得一个正常的 react 组件的发布流程\n最后记录这篇文章花的时间比我完成整个组件的时间都多，最终希望能给新手带来帮助\n在整个发布组件的过程我做了如下几件事儿：\n开发组件 编写 Readme 推送到 github，并且把 demo 放到 github page 上 发布组件到 npm 上 开发组件 创建项目文件夹并初始化 npm package ，确保你创建的组件名称没有在 npm 上被使用过， 这里我们用 react-demo 作为示例\nmkdir react-demo cd react-demo npm init npm init 是生成初始的 package.json 的命令，在 npm init 的时候，你可以根据你自己的需要进行填写你的组件信息。或者直接使用 npm init -y 采用默认的，后面自己再去修改。\n首先安装 react 相关的包：\nnpm i react react-dom -D 采用 babel 编译相关的依赖：\nnpm i @babel/cli @babel/core @babel/preset-env @babel/preset-react -D 采用 webpack 做构建，webpack-dev-server 作为本地开发服务器，所以需要安装如下依赖：\nnpm i webpack webpack-cli webpack-dev-server -D 我这里为了简单演示，只安装 babel-loader 用来编译 jsx，其他 loader 安装自己的需要自己安装。\nnpm i babel-loader -D 另外再安装一个 webpack 插件 html-webpack-plugin ，用来生成 html：\nnpm i html-webpack-plugin -D 然后再添加上常规的 start 和 build 脚本，package.json 如下：\n{ \u0026#34;name\u0026#34;: \u0026#34;react-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;webpack-dev-server --open development\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --mode production\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@babel/cli\u0026#34;: \u0026#34;^7.2.3\u0026#34;, \u0026#34;@babel/core\u0026#34;: \u0026#34;^7.2.2\u0026#34;, \u0026#34;@babel/preset-env\u0026#34;: \u0026#34;^7.3.1\u0026#34;, \u0026#34;@babel/preset-react\u0026#34;: \u0026#34;^7.0.0\u0026#34;, \u0026#34;babel-loader\u0026#34;: \u0026#34;^8.0.5\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^3.2.0\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^16.7.0\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^16.7.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^4.29.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^3.2.1\u0026#34;, \u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^3.1.14\u0026#34; }, \u0026#34;dependencies\u0026#34;: {} } 当然，你也可以直接把我这个 package.json 复制过去，然后 npm install 进行依赖的安装，也可以一个一个的安装。\n一个最基本的组件只需要编译 jsx，所以我这里没有安装 css 以及处理其他的 loader，这篇文章的重点不是讲 webpack 的，所以其他的自行解决，有 webpack 问题可以私聊我。\n然后我们再创建如下的目录结构：\n├── example // 示例代码，在自己测试的时候可以把测试文件放到 src 里 │ └── src // 示例源代码 │ ├── index.html // 示例 html │ └── app.js // 添加到 react-dom 的文件 ├── package.json ├── src // 组件源代码 │ └── index.js // 组件源代码文件 ├── .babelrc ├── .editorconfig // 不必须的，但是建议有 ├── .gitignore // 如果要放到 github 上，这个是需要有的 └── webpack.config.js 下面我们再创建一个最简单的组件，来进行演示：\n/*** src/index.js ***/ import React from \u0026#39;react\u0026#39;; const ReactDemo = () =\u0026gt; ( \u0026lt;h1\u0026gt;这是我的第一个 react npm 组件\u0026lt;/h1\u0026gt; ); export default ReactDemo; 接下来添加一个 demo\n\u0026lt;!-- examples/src/index.html --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My First React Component\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; /*** examples/src/app.js ***/ import React from \u0026#39;react\u0026#39; import { render } from \u0026#39;react-dom\u0026#39; import ReactDemo from \u0026#39;../../src\u0026#39; const App = () =\u0026gt; \u0026lt;ReactDemo /\u0026gt; render(\u0026lt;App /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;)) 注意 demo 中的 ReactDemo 是从 ../../src 中导入的\n接下来配置非常简单的 webpack, 在项目根路径下创建 webpack.config.js 文件\nconst path = require(\u0026#39;path\u0026#39;); const HtmlWebpackPlugin = require(\u0026#34;html-webpack-plugin\u0026#34;); const htmlWebpackPlugin = new HtmlWebpackPlugin({ template: path.join(__dirname, \u0026#34;./example/src/index.html\u0026#34;), filename: \u0026#34;./index.html\u0026#34; }); module.exports = { entry: path.join(__dirname, \u0026#34;./example/src/app.js\u0026#34;), output: { path: path.join(__dirname, \u0026#34;example/dist\u0026#34;), filename: \u0026#34;bundle.js\u0026#34; }, module: { rules: [{ test: /\\.(js|jsx)$/, use: \u0026#34;babel-loader\u0026#34;, exclude: /node_modules/ }] }, plugins: [htmlWebpackPlugin], resolve: { extensions: [\u0026#34;.js\u0026#34;, \u0026#34;.jsx\u0026#34;] }, devServer: { port: 3001 } }; Webpack 的配置文件主要做了如下事情：\n使用 example/src/index.js 作为项目入口，处理资源文件的依赖关系 通过 babel-loader 来编译处理 js 和 jsx 文件 通过 html-webpack-plugin 自动注入编译打包好的脚本文件 为 demo 启动端口为 3001 的服务 然后再配置一下 babel，咱们的 babel 主要做两件事，将 jsx 编译成 es5，然后再加一个通用的 env，所以 .babelrc 配置如下：\n{\r\u0026#34;presets\u0026#34;: [\u0026#34;@babel/preset-env\u0026#34;, \u0026#34;@babel/preset-react\u0026#34;]\r} 可以看到之前的 package.json ，我这里 babel 安装的是 7.x，那么 babel-loader 就应该是 8.x 才行，然后 babel 7.x 相对于之前的配置是不同的，要用这个配置，版本一定要跟我的相同，不然配置可能会不一样。\n然后现在执行 npm start，然后再访问 localhost:3001 就可以访问到了。\n编写 README 编写 README，如果你不知道该如何编写，我给你提几点建议，你可以选择你觉得必要的点来写：\nlogo 官方主页 介绍 安装 快速开始 功能列表 截图 todoList 不足之处 FAQ Change Log（更新日志） 添加徽章 当你写完 README 之后，我们将添加一些来自 shields.io 的时髦徽章，让人们知道我们又酷又专业。\n想添加什么样的徽章看自己喜欢吧，种类有很多。\n可以点击这里看我之前写的 3d 标签云的 README。\n现在基本上可以发布了，但是要是能提供一个在线的 demo 让别人在用这个组件的时候可以看到效果就更好了。\n在 GitHub Pages 上发布一个在线 demo 发布在线 demo 可以直接用 Github Pages 来帮助我们托管，通过 webpack 构建生产环境版本，然后发到 Github 上去即可。\n首先去 Github 创建一个用来存放你组件代码的仓库。\n然后把你的项目初始化成 git 项目：\ngit init 再添加远程仓库，将本地仓库和远程仓库关联起来。\ngit remote add origin git@github.com:crazylxr/react-demo.git 接下来我们可以安装 gh-pages 来帮助我们发布到 github pages：\nnpm i gh-pages -D 为了方便记忆，后续能更快的发布，这些命令我们可以写成 npm-scriprt，所以我们增加两个脚本：\n{ \u0026#34;name\u0026#34;: \u0026#34;@taoweng/react-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;react demo\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;lib/index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;webpack-dev-server --open development\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --mode production\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;gh-pages -d examples/dist\u0026#34;, \u0026#34;publish-demo\u0026#34;: \u0026#34;npm run build \u0026amp;\u0026amp; npm run deploy\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@babel/cli\u0026#34;: \u0026#34;^7.2.3\u0026#34;, \u0026#34;@babel/core\u0026#34;: \u0026#34;^7.2.2\u0026#34;, \u0026#34;@babel/preset-env\u0026#34;: \u0026#34;^7.3.1\u0026#34;, \u0026#34;@babel/preset-react\u0026#34;: \u0026#34;^7.0.0\u0026#34;, \u0026#34;babel-loader\u0026#34;: \u0026#34;^8.0.5\u0026#34;, \u0026#34;gh-pages\u0026#34;: \u0026#34;^2.0.1\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^3.2.0\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^16.7.0\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^16.7.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^4.29.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^3.2.1\u0026#34;, \u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^3.1.14\u0026#34; }, \u0026#34;dependencies\u0026#34;: {} } 添加了 deploy 脚本和 publish-demo，以后需要发布 demo 的时候只需要 npm run publish-demo 即可。\n然后我们就可以 build 项目之后再将 expamples/dist 发布到 gh-pages 分支：\nnpm run build npm run deploy 或者直接\nnpm run publish-demo 注意：这里只会将 expample/src 下的文件发布到 ph-pages 分支，master 分支依然没有到 github 上，如果你要把源码放到 github 的 master 或者其他分支上，还是需要自己 push 的。\n这个时候，我们可以通过 crazylxr.github.io/react-demo 访问到我们写的 demo。crazylxr 是 github 的 username，react-demo 是仓库名，注意改成你自己的。\n编译源码 我们现在的源码是 jsx 的，所以我们需要通过 babel 把 jsx 编译为正常浏览器能访问的代码。我们可以通过 babel-cli 来编译我们代码，直接编译 src 目录，到 lib 文件夹。更多命令见 babel-cli\nnpx babel src --out-dir lib 执行完这个命令，就把生成一个 lib 文件夹，然后里面的 index.js 就是编译过后的文件，是可以直接发布到 npm 的文件。\n然后将这个编译命令写到 script 里，package.json 如下：\n{ \u0026#34;name\u0026#34;: \u0026#34;@taoweng/react-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;react demo\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;lib/index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;webpack-dev-server --open development\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;webpack --mode production\u0026#34;, \u0026#34;compile\u0026#34;: \u0026#34;npx babel src --out-dir lib\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;gh-pages -d example/dist\u0026#34;, \u0026#34;publish-demo\u0026#34;: \u0026#34;npm run build \u0026amp;\u0026amp; npm run deploy\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@babel/cli\u0026#34;: \u0026#34;^7.2.3\u0026#34;, \u0026#34;@babel/core\u0026#34;: \u0026#34;^7.2.2\u0026#34;, \u0026#34;@babel/preset-env\u0026#34;: \u0026#34;^7.3.1\u0026#34;, \u0026#34;@babel/preset-react\u0026#34;: \u0026#34;^7.0.0\u0026#34;, \u0026#34;babel-loader\u0026#34;: \u0026#34;^8.0.5\u0026#34;, \u0026#34;gh-pages\u0026#34;: \u0026#34;^2.0.1\u0026#34;, \u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^3.2.0\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^16.7.0\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^16.7.0\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^4.29.0\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^3.2.1\u0026#34;, \u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^3.1.14\u0026#34; }, \u0026#34;dependencies\u0026#34;: {} } 那么以后要编译 src 下面的代码，只需要执行：\nnpm run compile 现在我们已经有编译好的代码了，接下来就可以发布到 npm 供其他人使用了。\n发布 npm 包 在发布以前我们是需要一些准备：\n注册 npm 账户：\n在这里](https://www.npmjs.com/) 注册一个 npm 账号。\n登录\n在终端输入：\nnpm adduser 也可以用：\nnpm login 然后你会得到一个让你输入username、password 和 **email ** 的提示，把它们填在相应的位置。\n关于 package.json 需要注意的点\npackage.json 里面的配置信息非常重要，我解释一下几个重要的配置。\nname: 包名，如果你学习的话建议加一个 scoped，就是我上面的 @taoweng/react-demo 而不是 react-demo，因为 npm 包特别的多，很容易重复。这样这个包就会是私有的，可以通过 npm publish --access=public 将这个包变为共有的包。\nversion: 包的版本，每次发布包的版本不能和上次一样。详细规范可见这里\ndescription：包的简介。\nrepository：适合写 Github 地址，建议写成：:username/:repository。\nlicense：认证。不知道该用什么的，就写MIT 吧。\nmain：包的入口文件。就是引入这个包的时候去加载的入口文件。\nkeywords：添加一些关键词更容易使你的包被搜索到。\n更详细的 package.json 配置可见官网。\n我这里简单的添加了这些信息：\n{\r\u0026#34;name\u0026#34;: \u0026#34;@taoweng/react-demo\u0026#34;,\r\u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;,\r\u0026#34;description\u0026#34;: \u0026#34;react demo\u0026#34;,\r\u0026#34;main\u0026#34;: \u0026#34;lib/index.js\u0026#34;,\r\u0026#34;repository\u0026#34;: \u0026#34;crazylxr/react-demo\u0026#34;,\r\u0026#34;scripts\u0026#34;: {\r\u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;,\r\u0026#34;start\u0026#34;: \u0026#34;webpack-dev-server --open development\u0026#34;,\r\u0026#34;build\u0026#34;: \u0026#34;webpack --mode production\u0026#34;,\r\u0026#34;compile\u0026#34;: \u0026#34;npx babel src --out-dir lib\u0026#34;,\r\u0026#34;deploy\u0026#34;: \u0026#34;gh-pages -d example/dist\u0026#34;,\r\u0026#34;publish-demo\u0026#34;: \u0026#34;npm run build \u0026amp;\u0026amp; npm run deploy\u0026#34;\r},\r\u0026#34;keywords\u0026#34;: [\u0026#34;react\u0026#34;, \u0026#34;demo\u0026#34;],\r\u0026#34;author\u0026#34;: \u0026#34;taoweng\u0026#34;,\r\u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;,\r\u0026#34;devDependencies\u0026#34;: {\r\u0026#34;@babel/cli\u0026#34;: \u0026#34;^7.2.3\u0026#34;,\r\u0026#34;@babel/core\u0026#34;: \u0026#34;^7.2.2\u0026#34;,\r\u0026#34;@babel/preset-env\u0026#34;: \u0026#34;^7.3.1\u0026#34;,\r\u0026#34;@babel/preset-react\u0026#34;: \u0026#34;^7.0.0\u0026#34;,\r\u0026#34;babel-loader\u0026#34;: \u0026#34;^8.0.5\u0026#34;,\r\u0026#34;gh-pages\u0026#34;: \u0026#34;^2.0.1\u0026#34;,\r\u0026#34;html-webpack-plugin\u0026#34;: \u0026#34;^3.2.0\u0026#34;,\r\u0026#34;react\u0026#34;: \u0026#34;^16.7.0\u0026#34;,\r\u0026#34;react-dom\u0026#34;: \u0026#34;^16.7.0\u0026#34;,\r\u0026#34;webpack\u0026#34;: \u0026#34;^4.29.0\u0026#34;,\r\u0026#34;webpack-cli\u0026#34;: \u0026#34;^3.2.1\u0026#34;,\r\u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^3.1.14\u0026#34;\r},\r\u0026#34;dependencies\u0026#34;: {}\r} 这些配置信息都会在 npm 包的页面显示出来的，所以能填还是填一下：\n最后我们在项目中添加 .npmignore 文件，跟 .gitignore 的作用一样，就是在发布 npm 的时候需要忽略的文件和文件夹：\n# .npmignore src\rexamples\r.babelrc\r.gitignore\rwebpack.config.js 这个时候我们就可以发布到 npm 了:\nnpm publish 如果你是私有包，可以这样发布：\nnpm publish --access=public 结语 以后发布新版本的时候，只需要更改一下 package.json 里面的 version 版本号，然后执行 npm publish 和 npm run publish-demo 就可以同步 npm 和 demo。\n不过如果想让你的组件在社区里给更多人用，你需要把 README 写得更好一点，然后添加好自动化测试，不然别人不太敢用。\n另外在写组件之前可以先了解下有没有类似的组件了，如果有就直接用吧，咱们就站在巨人的肩膀上，把自己宝贵的时间放在创造价值上。\n最后整个项目的源代码见 github\n参考文章 从 0 开始发布一个 react 组件到 npm 创建并发布一个小而美的 npm 包，没你想的那么难！ ","permalink":"/posts/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/235/","summary":"我发布了我的第一个 npm 组件，一个基于 react 的 3d 标签云组件。在这途中我也是遇到了很多的坑，花在完善整个发布流程的时间远多于写这个组件本身的时间，所以我记录下我觉得一个正常的 react 组件的发布流程\n最后记录这篇文章花的时间比我完成整个组件的时间都多，最终希望能给新手带来帮助\n在整个发布组件的过程我做了如下几件事儿：\n开发组件 编写 Readme 推送到 github，并且把 demo 放到 github page 上 发布组件到 npm 上 开发组件 创建项目文件夹并初始化 npm package ，确保你创建的组件名称没有在 npm 上被使用过， 这里我们用 react-demo 作为示例\nmkdir react-demo cd react-demo npm init npm init 是生成初始的 package.json 的命令，在 npm init 的时候，你可以根据你自己的需要进行填写你的组件信息。或者直接使用 npm init -y 采用默认的，后面自己再去修改。\n首先安装 react 相关的包：\nnpm i react react-dom -D 采用 babel 编译相关的依赖：\nnpm i @babel/cli @babel/core @babel/preset-env @babel/preset-react -D 采用 webpack 做构建，webpack-dev-server 作为本地开发服务器，所以需要安装如下依赖：","title":"发布 react 组件到 npm 上"},{"content":"我在提交中犯了一个错误，我该如何解决？\n我的提交历史一团遭，我改如何让它整洁？\n如果您有过上述问题，那么这篇文章适合您。这篇文章介绍了一个让你成为 Git 专家的主题列表。\n如果您不了解 Git 基础知识，请单击此处查看我的 Git 基础知识博客。您必须了解 Git 的基础知识才能充分利用本文。\n我的提交中犯了一个错误。我该怎么办？ 情景 1 假设您已经提交了一堆文件并意识到您输入的提交消息实际上并不清楚。现在您要更改提交消息。为此，您可以使用 git commit --amend\ngit commit --amend -m “新提交消息” 情景 2 假设您想提交六个文件，但是，错误地，您最终只提交了五个文件。您可能认为可以创建新提交并将第6个文件添加到该提交。\n这种方法没有错。但是，为了保持整洁的提交历史，如果你真的可以以某种方式将此文件添加到您之前的提交本身，那会不会更好？这也可以通过以下方式完成 git commit --amend：\ngit add file6 git commit --amend --no-edit --no-edit 表示提交消息不会更改\n场景3 无论何时在 Git 中进行提交，提交都会附上作者姓名和作者电子邮件。通常，当您第一次设置 Git 时，您需要设置作者姓名和电子邮件。您无需担心每次提交的作者详细信息。\n也就是说，对于特定项目，您可能希望使用不同的电子邮件 ID。您需要使用以下命令为该项目配置电子邮件 ID：\ngit config user.email “你的电子邮件ID” 假设您忘记配置电子邮件，并且已经完成了第一次提交。Amend 也可用于更改先前提交的作者。可以使用以下命令更改提交的作者：\ngit commit --amend --author“作者姓名\u0026lt;作者电子邮件\u0026gt;” 注意：仅在本地存储库中使用该 amend 命令。使用远程存储库可能会造成很多混乱 amend\n我的提交历史是一团糟。我该如何处理？ 假设您正在处理一段代码。您知道代码大约需要十天才能完成。在这十天内，其他开发人员也将提交代码到远程存储库。\n将本地存储库代码与远程存储库中的代码保持同步是一种很好的做法。这会在您提出拉取请求时避免很多合并冲突。因此，您决定每两天从远程存储库中提取一次更改。\n每次将代码从远程存储库提取到本地存储库时，都会在本地存储库中创建新的合并提交。这意味着您的本地提交历史记录将会进行大量的合并提交，这会使审阅者感到困惑。\n如何使提交历史看起来更整洁？ 这就是 rebase 拯救的地方。\n什么是变基(rebase)？ 让我通过一个例子解释一下。 Release 分支有三个提交：Rcommit1，Rcommit2 和Rcommit3。 您在 Release 分支中只有一个提交（即 Rcommit1）时创建了 Feature 分支。 您已向 Feature 分支添加了两个提交。它们是 Fcommit1 和 Fcommit2。 您的目标是从 Release 分支提交到 Feature 分支。 您将使用 rebase 来执行此操作。 让 Release 分支的名称发布，Feature 分支的名称是 feature。 可以使用以下命令重新进行重新定位： git checkout feature git rebase release 垫底 在重新定位时，您的目标是确保功能分支从 release 分支获取最新代码。\n重新尝试尝试逐个添加每个提交，并检查冲突。这听起来有点令人困惑吗？\n让我在图表的帮助下解释。\n这显示了内部实际的变革：\n第 1 步 运行该命令的那一刻，feature 分支指向 release 分支的头部。 现在，feature 分支有三个提交：Rcommit1，Rcommit2 Rcommit3。 您可能想知道 Fcommit1和 Fcommit2 发生了什么。 提交仍然存在，将在下面的步骤中使用。 第 2 步 现在 git 尝试将 fcommit1 添加到 feature 分支。 如果没有冲突，则在 Rcommit3 之后添加 Fcommit1 如果存在冲突，git 会通知您，您必须手动解决冲突。解决冲突后，使用以下命令继续重新绑定 git add fixedfile git rebase --continue 第 3 步 一旦添加了 Fcommit1，git 将尝试添加 Fcommit2。 同样，如果没有冲突，则在 Fcommit1 之后添加 Fcommit2 并且 rebase 成功。 如果存在冲突，git 会通知您，您必须手动解决。解决冲突后，请使用步骤2中提到的相同命令 整个 rebase 完成后，您会注意到 feature 分支有Rcommit1，Rcommit2，Rcommit3，Fcommit1 和 Fcommit2。 注意事项 Rebase 和 Merge 在 Git 中都很有用。一个并不比另一个好。 在合并的情况下，您将进行合并提交。在 rebase 的情况下，没有像 merge 提交那样的额外提交。 一种最佳实践是在不同点使用命令。使用远程存储库中的最新代码更新本地代码存储库时，请使用 rebase。在处理 pull 请求以将Feature 分支与 Release 或 Master 分支合并时，请使用merge。 使用 Rebase 会更改提交历史记录（使其更整洁）。但话虽如此，改变提交历史存在风险。因此，请确保永远不要对远程存储库中的代码使用 rebase。始终仅使用 rebase 来更改本地仓库代码的提交历史记录。 如果对远程存储库进行了rebase，则会产生很多混乱，因为其他开发人员无法识别新的历史记录。 此外，如果在远程存储库上完成 rebase，则当其他开发人员尝试从远程存储库中提取最新代码时，它可能会产生问题。所以我再说一遍，总是只为本地存储库使用 rebase 恭喜 你现在是Git专家 在这篇文章中你了解到：\n修改提交 变基(rebase) 这两个都是非常有用的概念。去探索Git的世界，进一步学习。\n原文：https://medium.freecodecamp.org/how-to-become-a-git-expert-e7c38bf54826\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/228/","summary":"我在提交中犯了一个错误，我该如何解决？\n我的提交历史一团遭，我改如何让它整洁？\n如果您有过上述问题，那么这篇文章适合您。这篇文章介绍了一个让你成为 Git 专家的主题列表。\n如果您不了解 Git 基础知识，请单击此处查看我的 Git 基础知识博客。您必须了解 Git 的基础知识才能充分利用本文。\n我的提交中犯了一个错误。我该怎么办？ 情景 1 假设您已经提交了一堆文件并意识到您输入的提交消息实际上并不清楚。现在您要更改提交消息。为此，您可以使用 git commit --amend\ngit commit --amend -m “新提交消息” 情景 2 假设您想提交六个文件，但是，错误地，您最终只提交了五个文件。您可能认为可以创建新提交并将第6个文件添加到该提交。\n这种方法没有错。但是，为了保持整洁的提交历史，如果你真的可以以某种方式将此文件添加到您之前的提交本身，那会不会更好？这也可以通过以下方式完成 git commit --amend：\ngit add file6 git commit --amend --no-edit --no-edit 表示提交消息不会更改\n场景3 无论何时在 Git 中进行提交，提交都会附上作者姓名和作者电子邮件。通常，当您第一次设置 Git 时，您需要设置作者姓名和电子邮件。您无需担心每次提交的作者详细信息。\n也就是说，对于特定项目，您可能希望使用不同的电子邮件 ID。您需要使用以下命令为该项目配置电子邮件 ID：\ngit config user.email “你的电子邮件ID” 假设您忘记配置电子邮件，并且已经完成了第一次提交。Amend 也可用于更改先前提交的作者。可以使用以下命令更改提交的作者：\ngit commit --amend --author“作者姓名\u0026lt;作者电子邮件\u0026gt;” 注意：仅在本地存储库中使用该 amend 命令。使用远程存储库可能会造成很多混乱 amend\n我的提交历史是一团糟。我该如何处理？ 假设您正在处理一段代码。您知道代码大约需要十天才能完成。在这十天内，其他开发人员也将提交代码到远程存储库。\n将本地存储库代码与远程存储库中的代码保持同步是一种很好的做法。这会在您提出拉取请求时避免很多合并冲突。因此，您决定每两天从远程存储库中提取一次更改。\n每次将代码从远程存储库提取到本地存储库时，都会在本地存储库中创建新的合并提交。这意味着您的本地提交历史记录将会进行大量的合并提交，这会使审阅者感到困惑。\n如何使提交历史看起来更整洁？ 这就是 rebase 拯救的地方。","title":"git 之修改 commit 以及 rebase 的使用"},{"content":"HTML 与 CSS 《Head First HTML与CSS(第2版)》\u0026ndash;豆瓣评分 9.3。入门真的是经典书籍，手把手教学，丰富的案例让你从 0 开始学前端。 《CSS权威指南(第三版)》\u0026ndash;豆瓣评分 8.5。这本书也是非常的经典了，2007 年的书了，但是无不影响这本书作为 CSS 的经典著作，把原理讲得非常的通透，除了 w3c 标准，算最权威的一本了，毕竟权威指南。这本书都是 css 2.1 的，与张鑫旭的《CSS 世界》可以说是一个类别的，我没看过这本书，但是据我朋友说没有权威指南好，口水话太多，也许是让读者好理解，权威指南这本我是看过的，学 CSS 必读经典。 《CSS揭秘》\u0026ndash;豆瓣评分9.4。神书，47 和 css 技巧让你在面对各种 css 问题的时候游刃有余。豆瓣评分 9.4 ，是 css 书籍中评分最高的了，css 进阶必备。 总结：所以对于 css 来说，《Head First HTML与CSS(第2版)》是入门，权威指南是基础，css 揭秘是进阶，可以按照这个顺序来阅读。\nJavaScript 《javascript语言精粹》\u0026ndash;豆瓣评分 9.1。这本书可以在入门之前了解一下基本语法，以及在学习之前可以了解下 JS 里面的精粹以及糟粕，虽然这本书很薄很薄，但是值得反复去读的一本书，当时学习前端半年，一年再回来看这本书会跟你第一看应该有更深刻的理解。 《JavaScript DOM编程艺术(第2版)》\u0026ndash; 豆瓣评分 8.7。本 书在简洁明快地讲述JavaScript和DOM的基本知识之后，通过几个实例演示了专业水准的网页开发技术，透彻阐述了平稳退化等一批至关重要的 JavaScript编程原则和最佳实践。 《JavaScript权威指南》：犀牛书是每个FE都绕不过的一本书，可以先大致通读几遍，也可以把其当作工具书，时时翻阅。 《JavaScript高级程序设计》：红宝书虽然号称高级，但其实是帮助入门的，Zakas大神把概念深入浅出，将JavaScript的语法要点讲清楚明白。小红书配合犀牛书，相互印证，谁读谁知道。 《你不知道的JavaScript 上中下》：这本绝对是神书，让你了解JavaScript不为人知的另一面，把闭包、异步这些讲得很通透。 《ES6 标准入门（第3版）》\u0026ndash;豆瓣评分 8.9。阮老师的书，国内最好的一本 ES6 ES7 ES8 的入门书籍，第三版相对于第二版多了 ES8 的内容，所以也厚了很多。因为现在框架盛行，特别是 React 基本是已经完全拥抱了 ES6 了，还没学 ES6 赶紧补起来，不然要落后了。 《深入理解 ES6》\u0026ndash;豆瓣评分9.5。这本书是红宝书作者写的又一部经典著作，ES6 进阶用。 《JavaScript设计模式与开发实践》\u0026ndash;豆瓣评分 9.1。本书将教会你如何把经典的设计模式应用到JavaScript语言中，编写出优美高效、结构化和可维护的代码。如果想学 设计模式的，我相信这本书应该比 JavaScript 设计模式那本书更好懂。 《高性能JavaScript》\u0026ndash;豆瓣评分9.0。揭示了技术和策略能帮助你在开发过程中消除性能瓶颈。你将会了解如何提升各方面的性能，包括代码的加载、运行、DOM交互、页面生存周期等。 总结：阅读顺序建议从《javascript语言精粹》-\u0026gt; JavaScript DOM编程艺术(第2版)》-\u0026gt; 《JavaScript高级程序设计》和 《JavaScript权威指南》-\u0026gt; 《ES6 标准入门（第3版）》。\n其他几本没写顺序的就可以在学完基础都可以看着的。根据自己当时的需要来选择性阅读。\n框架 《深入 React 技术栈》\u0026ndash; 豆瓣评分 8.3。写 react 及其技术栈的还有一本程墨的《深入 React 和 Redux》，后者文字比较通俗易懂，相对于前者来说还不够深入，而且没有源码解析，两本我都看过，如果买的话我推荐《深入 React 技术栈》。如果已经买了《深入 React 和 Redux》 的，就看这本也可以了。 《React状态管理与同构实战》\u0026ndash;豆瓣评分估计 8.5 以上。这本刚出的书，我也看了一部分了，偏实战，react 知识讲解得比较少，大部分用来讲解 Redux 并用 Redux 如果做好状态管理，并且还有同构部分的深入讲解。想深入学习 React 原理的并不是适合买这本书。 《React 进阶之路》\u0026ndash;豆瓣评分 9.3。虽然这本书是进阶之路，但是其实这本书还是适合新手看的，从入门到进阶吧，这本是 React 16 版本的书，16 的新特性也都写到了，新手想学 React 的这是一本不错的书哦。 总结：《React 进阶之路》这本用来入门，《深入 React 技术栈》用来深入理解，《React状态管理与同构实战》这本用来实战。\n其他 《图解HTTP》：一本HTTP的神书，图文并茂，生动形象。 《Web性能权威指南》：优化web性能，进阶之书。\u0026ndash; 豆瓣评分8.8 Node Node 说实话，真没感觉有什么好书。 非要推荐的话，就\n《深入浅出Node.js》：针对Node的基本原理做了深入，能让你了解底层的Node实现\n《Node.js开发指南》：Node的事件循环，必看必会。\n后记 担心有读者问我为啥不推荐 vue 的书，这里说一下，学习 vue 真的不用买书，官网够了，vue 官网是我看过质量最高的官网了，入门，进阶都有。但是要深入的话，比如源码这些，推荐看黄轶在慕课上的源码解析，如果不想看课程的也有配套的开源源码分析文章，vue 技术内幕(http://hcysun.me/vue-design/)，然后还有染陌的源码解析，地址是(https://github.com/answershuto/learnVue)。\nAngular 我刚学，了解一下，基本都是从官网里面学习，没有买过书，所以 Angular 我就不推荐了，没看过担心误人子弟。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/227/","summary":"HTML 与 CSS 《Head First HTML与CSS(第2版)》\u0026ndash;豆瓣评分 9.3。入门真的是经典书籍，手把手教学，丰富的案例让你从 0 开始学前端。 《CSS权威指南(第三版)》\u0026ndash;豆瓣评分 8.5。这本书也是非常的经典了，2007 年的书了，但是无不影响这本书作为 CSS 的经典著作，把原理讲得非常的通透，除了 w3c 标准，算最权威的一本了，毕竟权威指南。这本书都是 css 2.1 的，与张鑫旭的《CSS 世界》可以说是一个类别的，我没看过这本书，但是据我朋友说没有权威指南好，口水话太多，也许是让读者好理解，权威指南这本我是看过的，学 CSS 必读经典。 《CSS揭秘》\u0026ndash;豆瓣评分9.4。神书，47 和 css 技巧让你在面对各种 css 问题的时候游刃有余。豆瓣评分 9.4 ，是 css 书籍中评分最高的了，css 进阶必备。 总结：所以对于 css 来说，《Head First HTML与CSS(第2版)》是入门，权威指南是基础，css 揭秘是进阶，可以按照这个顺序来阅读。\nJavaScript 《javascript语言精粹》\u0026ndash;豆瓣评分 9.1。这本书可以在入门之前了解一下基本语法，以及在学习之前可以了解下 JS 里面的精粹以及糟粕，虽然这本书很薄很薄，但是值得反复去读的一本书，当时学习前端半年，一年再回来看这本书会跟你第一看应该有更深刻的理解。 《JavaScript DOM编程艺术(第2版)》\u0026ndash; 豆瓣评分 8.7。本 书在简洁明快地讲述JavaScript和DOM的基本知识之后，通过几个实例演示了专业水准的网页开发技术，透彻阐述了平稳退化等一批至关重要的 JavaScript编程原则和最佳实践。 《JavaScript权威指南》：犀牛书是每个FE都绕不过的一本书，可以先大致通读几遍，也可以把其当作工具书，时时翻阅。 《JavaScript高级程序设计》：红宝书虽然号称高级，但其实是帮助入门的，Zakas大神把概念深入浅出，将JavaScript的语法要点讲清楚明白。小红书配合犀牛书，相互印证，谁读谁知道。 《你不知道的JavaScript 上中下》：这本绝对是神书，让你了解JavaScript不为人知的另一面，把闭包、异步这些讲得很通透。 《ES6 标准入门（第3版）》\u0026ndash;豆瓣评分 8.9。阮老师的书，国内最好的一本 ES6 ES7 ES8 的入门书籍，第三版相对于第二版多了 ES8 的内容，所以也厚了很多。因为现在框架盛行，特别是 React 基本是已经完全拥抱了 ES6 了，还没学 ES6 赶紧补起来，不然要落后了。 《深入理解 ES6》\u0026ndash;豆瓣评分9.","title":"前端书籍推荐"},{"content":"简介 Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 系统上的软件安装过程。每个操作系统都有类似的，比如 Ubuntu 的 apt，Centos 的 yum。\n常用命令 安装 brew ruby -e \u0026#34;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\u0026#34; 使用brew安装软件 $ brew install git 使用brew卸载软件 $ brew uninstall git 使用brew查询软件 有时候，你不知道你安装的软件的名字， 那么你需要先搜索下, 查到包的名字。\nbrew search /wge*/ 其他brew命令 brew list 列出已安装的软件 brew update 更新brew brew home 用浏览器打开brew的官方网站 brew info 显示软件信息 brew deps 显示包依赖 brew upgarde 更新所有 brew upgarde [包名] 更新指定包 brew cleanup 清理所有包的旧版本 brew cleanup [包名] 清理指定包的旧版本 brew cleanup -n 查看可清理的旧版本包，不执行实际操作 卸载 brew cd `brew --prefix` rm -rf Cellar brew prune rm `git ls-files` rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions rm -rf .git rm -rf ~/Library/Caches/Homebrew ","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/223/","summary":"简介 Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 系统上的软件安装过程。每个操作系统都有类似的，比如 Ubuntu 的 apt，Centos 的 yum。\n常用命令 安装 brew ruby -e \u0026#34;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\u0026#34; 使用brew安装软件 $ brew install git 使用brew卸载软件 $ brew uninstall git 使用brew查询软件 有时候，你不知道你安装的软件的名字， 那么你需要先搜索下, 查到包的名字。\nbrew search /wge*/ 其他brew命令 brew list 列出已安装的软件 brew update 更新brew brew home 用浏览器打开brew的官方网站 brew info 显示软件信息 brew deps 显示包依赖 brew upgarde 更新所有 brew upgarde [包名] 更新指定包 brew cleanup 清理所有包的旧版本 brew cleanup [包名] 清理指定包的旧版本 brew cleanup -n 查看可清理的旧版本包，不执行实际操作 卸载 brew cd `brew --prefix` rm -rf Cellar brew prune rm `git ls-files` rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions rm -rf .","title":"Mac Brew 常用命令笔记"},{"content":"2018已经结束了，总结自己这一年来就是三个角色的转变：自己从一个学生成为了一个社会人，从一个读者变成了一个自媒体人，从一个在校学习者变成了终身学习者。\n每一种角色的转变意味着责任的转变，每多一种角色，就会多承担一份责任。角色变得越大，责任也会承担得越大，当然收获得也更大。\n技术成长 对于技术成长，我感觉我莫名其妙的就走在了前端的前沿，刚刚在知乎上看到一个帖子2019 前端技术规划该包含什么？很多大佬在规划里面都谈到 Rxjs、Typescript、函数式编程、Flutter、PWA、Node 相关, 然而事实就是这么巧(或者可以说我眼界比较远，偷笑)，在 2018 年我很多都已经接触过了，比如 Rxjs、TS、函数式编程、Node 等。\n聊 Typescript(TS) 特别是对于 TS，我在公众号，然后我维护的微信群里早就已经说过，TS 最近会火起来的，没学的赶紧学起来，不知道有多少人听了我的，看了那么多大佬的规划，我更加的坚信了 TS 将会变成未来前端工程师一项必备的技能。\n然后对于 TS 的学习，我看过这些东西，我推荐一下，不过对于 TS 我仍然是个初学者，不敢说有多精通，我只在我自己的小项目中用过，没有在公司的项目中使用。\nTS 官方文档 技术胖的 ts 教程 TypeScript极速完全进阶指南 深入理解 TypeScript 如果问我使用 TS 感觉是什么样的，我只能说相逢恨晚，就跟 vim 一样，用过之后就像一直用。\n聊 Rxjs 对于学 Rxjs 来说，我想说的是，Rxjs 是我学过最难学的一个库了，目前为止没有之一。现在回想起来，要是早点接触函数式编程就好了，如果先是研究函数式编程，再去学习 Rxjs，我相信会轻松 40% 以上。但是目前为止，我并没有拿到真正的生产环境去用过，只是写过一些简单的 demo，然后看过一些资料和书籍，同时也在团队做过相关的普及。\nRxjs 难的就是思维方式以及 api 很多，然后就是由于一些概念不知道为什么要这么设计(很多思想我相信学了函数式编程就会明白了)。\n对于 rxjs 的学习看过很多的文章，我这里还是推荐三个我觉得比较全的学习资料。\nRxjs 官网 30 天精通 Rxjs 程墨老师的深入浅出 Rxjs 聊函数式编程 学习函数式编程给我最大的感受就是让我拓宽了我的眼界，突然的就弥补了以前知识体系缺的点。比如对于 compose、curry 这些 js 里面也算一直提及的重要概念，但是总是记了又忘，忘了又记，就算自己手写来实现过了，但是隔了几个月还是又忘了，因为没用过。但是学了函数式编程以后，发现全是这些东西，compose 呀、柯里化呀、部分应用呀，就跟用数组的 map、reduce 这些方法那么熟练，所以，现在闭着眼睛也能写出来，就几行代码的事儿。\n函数式编程里面的基本工具函数实现, 用 ES6 简单的实现了这些概念的核心原理，真的就几行代码。\n之前也谈到过学 Rxjs 的时候要是先学了函数式编程就好了，那是因为 Rxjs 用的也是函数式编程，而且那里面的操作符也是，然后比如 rxjs 的链式调用当时觉得很不错，jQuery 也有这种，当时还无法确切的知道是怎样的机制，然而当了解了函数式编程的 Functor 之后，就不再感到迷惑了，再比如实现一个 Promise，我相信是对于大部人前端开发者来说还是有一定的难度的，当 学习了 Monad 之后，可能再去写一个 Promise 就没那么难了，因为 Promise 就是一个 Monad，Monad 是函数式编程里面一个非常非常难以理解的概念，我觉得是最难的概念之一。\n另外可能就会有朋友问，既然函数式编程这么好，那你平时在用吗？说实话，我不敢在公司的项目里面使用，要用也最多只会用下组合，柯里化，部分应用这些，不敢去用 Monad 相关的东西，因为团队用函数式的人很少，一个人去用，会给团队带来很大的维护成本。而且目前感觉这些高级概念在 js 里面不太适合，可能因为我还是个初学者，还没学到精华吧。\n但是对于函数式里面的组合，我是非常之赞成，通过抽象颗粒度更小的函数，然后再组成满足任务函数，这点我感觉是函数式编程的精华之一，想要用好组合，柯里化和部分应用的灵活使用就显得非常重要，可能刚开始不知道有啥区别，或者说什么时候该用哪个，当你真正遇到的时候，你自然就会区分出来。\n函数式编程给我带来的收获太多了，后面会陆续总结出我的学习总结，本来早就想写，但是之前发表的一篇函数式编程，真香令我有点心累，这篇文章是我刚开始学习函数式编程不久写的一篇文章，当时在看《javascript 函数式编程指南》的时候写的，这篇基本上是总结的那上面的第一章，因为我觉得这是我看到过的资料里面对函数式编程的总体概述说得最好的，所以我写出来给大家分享一下，然后就被说，抄书有意思？等等之类的话，但是也有朋友说，感谢我的分享，书上有时候大段大段的文字，还不如别人一篇文章总结的好。反正这篇文章是我写了之后最难受的一篇，在发这篇文章之后的几天，我都很怕我的掘金账号有通知消息，生怕又要被骂了，那个时候本来就计划着自己可以总结一下那本书的精华，然后写一系列文章，但是为了维护我的玻璃心，就继续买书，看资料，理解得更深刻了，变为自己东西了再写。\n我收集的一些函数式编程的资料以及书籍，如果没找到好的资料的可以点进去看下。\n虽然我看了这么多资料以及书籍，但是我还是一个在函数式领域的新手，要是写得不好，欢迎大家拍砖(留点面子)。\n之前以一篇《我如何零基础转行成为一个自信的前端》的文章，红遍掘金的serialcoder，就是被有些朋友激进的言语离开掘金了，删掉了所有的文章，还好现在我看他现在又回归了。希望大家还是多交流，言语啥的也都轻点，都是一个圈子的人。\n我的公众号 做公众号是我今年做得最正确的一个决定吧，也是令我收获蛮大的。主要是写了很多的文章，扩展了自己的社交圈，认识了很多朋友，也接触到了很多大佬，还有了一点点运营的概念。\n我的公众号是【前端桃园】，做得不太好，最近没有坚持更新了，因为在写自己的小项目，后面可以看到自己规划的项目还有好多没写完呢，希望有小伙伴来入个伙，早点让这些项目上线用起来。\n我的项目 今年计划的项目其实还挺多的。不过目前为止一个拿得出手的都没有，说出来惭愧呀。\n1. github issue 博客 项目地址\n之前想在 github issue 上写博客，但是有嫌弃 issue 太丑了，所以就写了一个静态博客，那个时候刚好 parcel 刚好发布了，所以就用 vue + parcel 练练手，获取 issue 的内容，然后展示在网站上，所以就做了一个极简的博客系统，但是写好了就没怎么用了，现在似乎图片都失效了。\n2. 随机小程序(决策那点事儿) 写这个项目的原因是，最开始我们在公司的时候，中午总是不知道出去吃哪一家，所以就比较的纠结，当时我就想到要是有一个东西可以帮我做下决定，随机一下，然后还可以给答案设定权重，比如比较喜欢吃张亮麻辣烫就权重设高一点，那么随机的概率就大点。然后想到这种对于选项太多，难以做决定的情况也很多，比如想去看电影，有好几部都想看，这个时候就可以随机一下，帮你做决定。其实对于这种小程序已经有了，但是他们都没有设置权重的功能，所以我还是决定自己做一个，现在代码是写完了，但是由于小程序是要用 https 的域名，所以目前还没有上线。\n3. 中文版的 medium 这个项目的来历是因为我经常看 medium 上的文章，不过英语不是太好，所以很多时候都是都是翻译了之后再看的，然后我也会经常翻译这上面的文章到公众号里，但是就算翻译，也很花时间，而且有些是机器翻译的，所以比较的生硬。所以我就想着把 medium 上的文章爬下来，然后通过翻译 api 翻译之后得到一篇中文文章，然后中文文章每段判断都有原文，然后用户可以去修正翻译的中文，这样一次次的修正，相信文章被翻译得越来越好，就跟做开源项目一样。\n在这个项目中我用的是 puppeteer 做的爬虫，然后翻译是用的划词翻译的接口。目前做到的地步只是可以爬文章，然后翻译文章(这个其实也不是那么简单，需要把英文的每个段落拿去翻译，然后再把每段的翻译组成文章)，对于用户修改中文这个还没做好，这个比较复杂，还要管理员审核啥的。有兴趣的小伙伴可以和我一起做。\n4. 聚合 github issue 博客 项目背景：经过我的观察，很多程序员喜欢在 github issue 里面写文章，往往这种人写的博客质量还比较高，但是 github 对于搜索 issue 还是比较鸡肋，搜索引擎搜的呢又不是很全，所以我就想着做一个聚合的网站，在网站上填一个仓库地址，就获取 issue 以及作者的信息，然后进行打标签，分类等操作，主要是方便查找，而且 UI 也可以定制得好看一些，同时还可以做订阅功能等。\n现在初版快完成了，尽量在春节之前上线。\n其他方面的成长 虽然我们是程序员，但是人生里面不能只有技术，还应该学习一些其他的知识。\n投资理财 理财的重要性我就不阐述了，说下我的经历吧，最开始接触理财的书籍我看的是一本《指数基金投资指南》,文中就说指数基金是巴菲特在公众场合唯一推荐的小白投资方式，无脑定投个几年也会赚，然后我就跟着作者的公众号推荐的一些指数，每个月投资了一点，投资了大半年了，目前还是亏的，我相信只是因为今年行情不好，中国没到牛市，算是给自己的心理安慰吧。\n另外看了《富爸爸与穷爸爸》,这本书是一本畅销书，还是很推荐阅读的，里面提出的富人的金钱观，以及一些思维我觉得对我们为人处世，以及花钱都还是有帮助的。\n还在得到上买了两门金融课程，当时为了学习炒股，所以就买了想学习，一门是《香帅的北大金融课》,现在我还没有补完，才看了一百多节，另外一门是陆蓉的《行为金融学》课程，这个是每节都追的，刚出来我就买了，还是挺有收获的，扩展了我的金融观，以及一些投资技巧，虽然现在股票还没赚，趁着现在没啥钱，多鼓捣，摸索经验，亏了也没多少钱，等到以后有钱了，亏了就亏大了。\n在圣诞节女朋友看我之前一直想买《穷查理宝典》，她在圣诞节帮我买了，这本书我相信是会对我的思维有所帮助的，是讲的巴菲特的合伙人查理芒格的一些思考方式，巴菲特对查理芒格的评价很高，他觉得查理芒格比他自己更聪明。\n产品 一直很喜欢极客时间的课程，当时也是想接触一下产品方面的，然后就买了《邱岳的产品实战》课来看，很愧疚，都更新完很久了，我现在也才看了一半，立个 flag 春节后一个月内一定要看完。\n写作 做公众号，或者说自媒体其实就是要写作嘛，做内容，另外还需要宣传，做营销，但是现在我想的是先把内容做好，所以就买了粥左罗的《新媒体写作 30 讲》来看，这个是早已看了两遍了，但是有很多自己还没有实践起来，最近粥老师又出新课了，差点又剁手了。\n另外写作真的是一门很重要的技能，真心希望大家多写，打造自己的 IP。\n总结 在文章的开头我已经说了今年的我主要是三个角色的转变，学生变成了社会人，今年六月份毕业，来到了蘑菇街工作；从一个读者变成了一个自媒体人，自己开始做公众号，开始经常写作；从一个读者变成了一个自媒体人，开始在网上买各种课程，在这个充满着变化的世界里不断的为自己充能，学习新知识。\n不知道有没有觉得我的项目可能有类似的竞品了，为什么还要做，我的回答就是因为我还不够满意，我就想做一个我自己满意的东西，就像尤大一样，当初写 vue 只是想写一款自己好用的框架，没想到大家也觉得好用，所以就火了，我的项目虽然没抱着会火的心态，但是让我自己用着很舒服也是一件不错的事儿呢！\n学到的技术尽量想办法实践，不实践，永远只是纸上谈兵，而且纸上得到终觉浅。拿自己举例吧，我不是做了好几个自己的小项目么，里面都需要服务端吧，所以这个时候就是学习 node 的好机会，koa、ts 都用起来，前端也得写，所以如果你想学习 vue，前端就用 vue 写，想学 angular ，前端就用 angular 写，最好学习了一个技术，有一定的项目经验，才能说你会了。\n另外再说下编辑器，现在 VSCode 很火，我司大部分前端开发者都在用，我也承认它是一款非常优秀的编辑器，但是 VSCode 还是有些地方我用着不是太满意，所以我还是用继续用了 Emacs。\n哎，我这该死的，无处安放的 xx!\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/221/","summary":"2018已经结束了，总结自己这一年来就是三个角色的转变：自己从一个学生成为了一个社会人，从一个读者变成了一个自媒体人，从一个在校学习者变成了终身学习者。\n每一种角色的转变意味着责任的转变，每多一种角色，就会多承担一份责任。角色变得越大，责任也会承担得越大，当然收获得也更大。\n技术成长 对于技术成长，我感觉我莫名其妙的就走在了前端的前沿，刚刚在知乎上看到一个帖子2019 前端技术规划该包含什么？很多大佬在规划里面都谈到 Rxjs、Typescript、函数式编程、Flutter、PWA、Node 相关, 然而事实就是这么巧(或者可以说我眼界比较远，偷笑)，在 2018 年我很多都已经接触过了，比如 Rxjs、TS、函数式编程、Node 等。\n聊 Typescript(TS) 特别是对于 TS，我在公众号，然后我维护的微信群里早就已经说过，TS 最近会火起来的，没学的赶紧学起来，不知道有多少人听了我的，看了那么多大佬的规划，我更加的坚信了 TS 将会变成未来前端工程师一项必备的技能。\n然后对于 TS 的学习，我看过这些东西，我推荐一下，不过对于 TS 我仍然是个初学者，不敢说有多精通，我只在我自己的小项目中用过，没有在公司的项目中使用。\nTS 官方文档 技术胖的 ts 教程 TypeScript极速完全进阶指南 深入理解 TypeScript 如果问我使用 TS 感觉是什么样的，我只能说相逢恨晚，就跟 vim 一样，用过之后就像一直用。\n聊 Rxjs 对于学 Rxjs 来说，我想说的是，Rxjs 是我学过最难学的一个库了，目前为止没有之一。现在回想起来，要是早点接触函数式编程就好了，如果先是研究函数式编程，再去学习 Rxjs，我相信会轻松 40% 以上。但是目前为止，我并没有拿到真正的生产环境去用过，只是写过一些简单的 demo，然后看过一些资料和书籍，同时也在团队做过相关的普及。\nRxjs 难的就是思维方式以及 api 很多，然后就是由于一些概念不知道为什么要这么设计(很多思想我相信学了函数式编程就会明白了)。\n对于 rxjs 的学习看过很多的文章，我这里还是推荐三个我觉得比较全的学习资料。\nRxjs 官网 30 天精通 Rxjs 程墨老师的深入浅出 Rxjs 聊函数式编程 学习函数式编程给我最大的感受就是让我拓宽了我的眼界，突然的就弥补了以前知识体系缺的点。比如对于 compose、curry 这些 js 里面也算一直提及的重要概念，但是总是记了又忘，忘了又记，就算自己手写来实现过了，但是隔了几个月还是又忘了，因为没用过。但是学了函数式编程以后，发现全是这些东西，compose 呀、柯里化呀、部分应用呀，就跟用数组的 map、reduce 这些方法那么熟练，所以，现在闭着眼睛也能写出来，就几行代码的事儿。","title":"2018 年度总结, 三个角色的转变"},{"content":"compose 实现 function compose(...args) { return (result) =\u0026gt; { return args.reduceRight((result, fn) =\u0026gt; { return fn(result) }, result) } } pipe 实现 function compose(...args) { return (result) =\u0026gt; { return args.reduce((result, fn) =\u0026gt; { return fn(result) }, result) } } 柯里化实现 function currying(fn, ...args) { if (args.length \u0026gt;= fn.length) { return fn(...args) } return function (...args2) { return currying(fn, ...args, ...args2) } } 部分应用实现 function partial(fn, ...args) { return (..._arg) =\u0026gt; { return fn(...args, ..._arg); } } ","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/218/","summary":"compose 实现 function compose(...args) { return (result) =\u0026gt; { return args.reduceRight((result, fn) =\u0026gt; { return fn(result) }, result) } } pipe 实现 function compose(...args) { return (result) =\u0026gt; { return args.reduce((result, fn) =\u0026gt; { return fn(result) }, result) } } 柯里化实现 function currying(fn, ...args) { if (args.length \u0026gt;= fn.length) { return fn(...args) } return function (...args2) { return currying(fn, ...args, ...args2) } } 部分应用实现 function partial(fn, ...args) { return (..._arg) =\u0026gt; { return fn(.","title":"函数式编程里面的基本工具函数实现"},{"content":"现在互联网发达的时代，大家都会有很多的群，xxx 交流群、xxx 技术交流、xxx开发群、xxx技术学习群等，大家的初心可能都是想交流的，遇到点问题然后就可以在群里问。\n然而很多时候你问的问题没人回答；也有时候问了半天还是没找到答案；也有时候当你把问题发出来了，别人正准备回答你的时候，你说知道了；然后刚开始群里很活跃，慢慢的就死了。\n其实以上问题，都是大家不想看到的，然而在群里提问是我们加入群的初心，但是很多人做不好，最终导致你的问题无人解答，群慢慢的失去意义。\n今天我所谈的就是群里提问的艺术，让你的问题快速得到解决。\n我将今天的问题分成以下三部分进行介绍：\n提问之前 提问之时，怎么提问 注意事项 提问之前 在群里提问之前首先我们应该做好功课，看自己是否完成以下步骤，否则你的提问将一塌糊涂，大概率得不到想要 的答案。\n尝试自己解决 不能自己解决应该准备的哪些 尝试自己解决 尝试自己解决是非常重要的一步，这也是我们能否经过这个问题能够成长的关键所在。\n通过搜索引擎搜索：baidu 或者 google(推荐)，搜索结果中前三页如果找不到你想要的信息，就进行下一步吧。对于成熟的开源项目，你遇到的问题，很可能别人也遇到过。这时通过 Google、StackOverflow 等网站的搜索服务，可以帮你快速定位并解决问题。永远记住，地球上的你并不孤单，包括你遇到的问题。 **查阅手册/文档：**确保自己阅读过至少一次官方文档。这样在遇到问题时，如果能回忆起只言片语，就可以再去读一遍相关文档，问题往往也就解决了。 **查阅社区/论坛：**阅读常见问题文件（FAQ）或者开源项目的 issue，或者论坛(类似 react china) **询问朋友：**如果你使用的开源软件，在朋友圈或同事圈里也有人使用，那么抬起你的脚、或拿起你的电话，真挚诚恳的探讨不会遭遇拒绝，而会增进友谊。不要犹豫，你的内心渴望面对面交流，你的朋友也是。 **自检并不断测试：**试自己检查或试验以找到答案。 **阅读源码(这步非必须)：**如果你是程序开发者，尽量尝试阅读源码以找到答案。 经过以上 6 步或者 5 步你都无法解决遇到的问题，那么你确实针对这个问题能力有限，准备去群里请教了，那么在尝试自己解决之后无果，应该做哪些准备呢？\n不能自己解决应该准备的哪些 一定要明白自己想要问什么问题：不能自己都说不清自己想要问什么问题，那么群里提问你也问不出什么来。 梳理准备您的问题：要说明之前你都干了些什么。 要用言简意赅的语言：这个是我们作为职场一个必备的技能，说重点，言简意赅。 怎么提问 抱着平和对等的心态，找到合适的途径后，就得静下心来将遇到的问题写成文字。书写文字不是一件简单的事情，我们可以从遵循一些简单的规则开始。\n用词准确，问题明确 标题要简洁清晰，要言之有物。\nBad：救命呀/急/跪求，遇到了一个 react 问题，xxx 组件渲染不出来\nGood：在使用 xxx 版本的 react ，我操作了 xxx，也写了 xxx，但是 xxx 组件渲染不出来\n一个好标题范例是目标 —— 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。\n描述清晰，信息充足 **准确有效的信息：**描述事实，而不是猜测，如果你想给出你的猜测，一定要先描述事实，给你的猜测一些证据，不然就不要猜测。\n**问题表现/内容：**按照时间顺序列出问题症状。问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。\n**简单的做过什么尝试：**在描述你做过什么尝试的时候，简单的你描述你做了哪些尝试就行，为什么要这么做其实不是那么重要。\n如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。\n经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。\n玉伯有句话是这么说的：\n提问者选择的路本身就是一条崎岖之路，对于要解决的问题，实际上有更好的方式。这种情况下，描述清楚目标，讲清楚要干什么非常重要。\n**想要问到什么：**提供建议？发送一段代码？检查你的补丁或者别的？在群里经常会出现这种情况，当某个人发了一段文字，另外的人说：你想问什么？\n所以我们在问问题的时候一定要把你想要问到什么，这个目标想清楚。\n**提供尽量多的信息：**尽量提供可重现的例子，你可以在 jsbin、runjs、jsfiddle、codepen 等这些地方提供一个可重现的例子。即使你是一个很大的项目，想办法把你需要验证的点提取出来，如果确实无法提取，就贴一些代码，出现问题那行代码周围的代码(周围的相关代码都要，因为你可能觉得不是他们的问题，但也许就是，不然你觉得的都是对的，你就不会不知道怎么解决了)。\n避免一些毫无意义的问题 经常会有人问一些毫无意义的问题，比如这样的：\nBad：有没有人会xxx？\nBad: 有没有人在？\nBad: 谁能帮我解决一个问题？\n面对这种问题，别人就很难预估你这个问题需要解决多久，也很难判断自己是否能解决这个问题，如果他回答了你，意味着你就是有空而且很在行，所以他还是选择不出声。这个就跟微信私聊的时候说：”在吗？“ 这种一个意思。\nBad: 什么是 JavaScript？\n这种问题也是，很明显通过搜索引擎就能搞定的，要是下次还有这种问题，你就把这个图发给它。\n建议的问法： 有问题直接问。比如：ES6什么时候雄霸天下，前端什么时候一统江湖？\n直接说场景：我在做xx端东西的时候，在 window 7 平台的 IE7 版本下遇到了左右不对齐问题，具体如图所示img，代码地址：http://www.jsbin.com/xxxx，在百度中找到的答案，试了之后还是有同样的问题。请有空的同学帮我看看是什么问题？\n注意事项 提前做好冷场的准备：也许别人在忙，也许这个问题太简单了，也许没人做过这块，如果冷场了，没人回答，赶紧换下一个群。 谦虚，别人没有义务帮你解决问题，往往大牛的时间比你少，比你珍贵。 没有一定的自学能力，问到问题就伸手的不适合玩这个。 群唯一的作用就是：扯淡、交流、分享，以上几条为前提。 如果觉得问题记不住，收藏一下这个图吧：\n最后 其实对于问问题，我们换位思考一下就更好了，这其实也是人际交往的方式，站在看你提问题的角度，想想当别人提问题的时候，你想让他问什么，你才愿意去回答。\n当然除了在群里提问，在社区里提问，论坛里提问都有一定的规范，后面再慢慢补充吧。\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/215/","summary":"现在互联网发达的时代，大家都会有很多的群，xxx 交流群、xxx 技术交流、xxx开发群、xxx技术学习群等，大家的初心可能都是想交流的，遇到点问题然后就可以在群里问。\n然而很多时候你问的问题没人回答；也有时候问了半天还是没找到答案；也有时候当你把问题发出来了，别人正准备回答你的时候，你说知道了；然后刚开始群里很活跃，慢慢的就死了。\n其实以上问题，都是大家不想看到的，然而在群里提问是我们加入群的初心，但是很多人做不好，最终导致你的问题无人解答，群慢慢的失去意义。\n今天我所谈的就是群里提问的艺术，让你的问题快速得到解决。\n我将今天的问题分成以下三部分进行介绍：\n提问之前 提问之时，怎么提问 注意事项 提问之前 在群里提问之前首先我们应该做好功课，看自己是否完成以下步骤，否则你的提问将一塌糊涂，大概率得不到想要 的答案。\n尝试自己解决 不能自己解决应该准备的哪些 尝试自己解决 尝试自己解决是非常重要的一步，这也是我们能否经过这个问题能够成长的关键所在。\n通过搜索引擎搜索：baidu 或者 google(推荐)，搜索结果中前三页如果找不到你想要的信息，就进行下一步吧。对于成熟的开源项目，你遇到的问题，很可能别人也遇到过。这时通过 Google、StackOverflow 等网站的搜索服务，可以帮你快速定位并解决问题。永远记住，地球上的你并不孤单，包括你遇到的问题。 **查阅手册/文档：**确保自己阅读过至少一次官方文档。这样在遇到问题时，如果能回忆起只言片语，就可以再去读一遍相关文档，问题往往也就解决了。 **查阅社区/论坛：**阅读常见问题文件（FAQ）或者开源项目的 issue，或者论坛(类似 react china) **询问朋友：**如果你使用的开源软件，在朋友圈或同事圈里也有人使用，那么抬起你的脚、或拿起你的电话，真挚诚恳的探讨不会遭遇拒绝，而会增进友谊。不要犹豫，你的内心渴望面对面交流，你的朋友也是。 **自检并不断测试：**试自己检查或试验以找到答案。 **阅读源码(这步非必须)：**如果你是程序开发者，尽量尝试阅读源码以找到答案。 经过以上 6 步或者 5 步你都无法解决遇到的问题，那么你确实针对这个问题能力有限，准备去群里请教了，那么在尝试自己解决之后无果，应该做哪些准备呢？\n不能自己解决应该准备的哪些 一定要明白自己想要问什么问题：不能自己都说不清自己想要问什么问题，那么群里提问你也问不出什么来。 梳理准备您的问题：要说明之前你都干了些什么。 要用言简意赅的语言：这个是我们作为职场一个必备的技能，说重点，言简意赅。 怎么提问 抱着平和对等的心态，找到合适的途径后，就得静下心来将遇到的问题写成文字。书写文字不是一件简单的事情，我们可以从遵循一些简单的规则开始。\n用词准确，问题明确 标题要简洁清晰，要言之有物。\nBad：救命呀/急/跪求，遇到了一个 react 问题，xxx 组件渲染不出来\nGood：在使用 xxx 版本的 react ，我操作了 xxx，也写了 xxx，但是 xxx 组件渲染不出来\n一个好标题范例是目标 —— 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。\n描述清晰，信息充足 **准确有效的信息：**描述事实，而不是猜测，如果你想给出你的猜测，一定要先描述事实，给你的猜测一些证据，不然就不要猜测。\n**问题表现/内容：**按照时间顺序列出问题症状。问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。\n**简单的做过什么尝试：**在描述你做过什么尝试的时候，简单的你描述你做了哪些尝试就行，为什么要这么做其实不是那么重要。\n如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。\n经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。\n玉伯有句话是这么说的：\n提问者选择的路本身就是一条崎岖之路，对于要解决的问题，实际上有更好的方式。这种情况下，描述清楚目标，讲清楚要干什么非常重要。","title":"群里提问的艺术"},{"content":"今天的文章是来自 medium 的一篇文章，点赞数有将近 1 万 9，所以翻译出来给大家分享一下，有些概念怕大家不了解，所以我放了一些 维基百科的解释。如果有翻译得不是很好的地方，请看原文：https://hackernoon.com/top-12-things-that-destroy-developer-productivity-2ddf0abc190\n正文：\n很多文章都涉及技术主管和项目经理的角色。我们经常遇到的一个共同主题是如何提高团队的工作效率。但是在你集中精力来提高生产力之前，你可能首先要考虑是什么在摧毁它，以便建立一个可靠的基础。不幸的是，即使 Peopleware 近 30 年前发布，我们也看到许多团队在一些（消极的）显着方式中遭受巨大的生产力损失！\n没有人希望程序员在没有计算机的情况下完成工作，但是有很多公司希望程序员能够在不知情的情况下完成工作。这同样不切实际。\n因此，让我们深入探讨我们的 12 个阻止您的开发人员“进入区域”并提高工作效率的事项列表。我将尝试从大多数到最不具影响力的列表中优先考虑此列表。随意评论！\n如果您想知道这一切是否值得投资，只需考虑开发商的工资。生产力提高10％甚至更多！\n中断和会议 在我看来，中断是开发人员的首要生产力杀手。开发人员在中断之前不能轻易回到他们正确的位置。他们需要进入发展的思维模式，然后慢慢追溯到他们离开的地方。这可能需要超过30分钟。中断越多，挫折越多，工作质量越差，错误就越多 - 而且还在继续。 “The more times you trip me up while I’m trying to get started — the longer between each time I’m going to try. If you fill my morning with interruptions — don’t be surprised when the day is unproductive.。” \u0026ndash;A developer on Reddit\n大概意思就是说，每次被打断都要重新开始，如果你的一天里经常被打断，那么当你一天没有任何成果的时候，不要感到惊讶。\n会议怎么样？会议和中断之间的唯一区别是会议是计划中断，这会使情况变得更糟。如果开发人员在处理任务时知道他们会中断，则他们无法完成任务。因此，如果他们在一两个小时内召开会议，他们将无法取得任何进展，因为大多数工程任务需要更多时间。\nAs Paul Graham wrote, “A single meeting can blow a whole afternoon by breaking it into two pieces, each too small to do anything hard in.”\n意思就是：正如保罗·格雷厄姆（Paul Graham）所写的那样，“单次会议可以将整个下午分成两部分，每部分都太小而无法做任何事情。”\n如何避免这种情况？这部分记录良好; 你没有任何借口。例如，在一天的开始或午餐前举行简短的状态会议，以避免不必要的中断。\n微观管理 在不同类型的管理者中，微观管理者在开发人员的生产力方面可能是最糟糕的。当然，微观管理者往往会有更多的会议和意外中断。但不仅如此。他们表现出缺乏信任，通过这样做，你会觉得他们不断破坏你的技能和你完成任务的能力。开发人员在中断之间的任何动机都会在那时消失。影响超出了生产力。微观管理者可能是开发人员离职的第一个原因，或者至少是改变团队的原因。 如果不知道什么是微观管理(micro-management)的，看下面的解释：\n在商业管理中，微观管理（英语：Micromanagement），亦作微观管理学、微管理学、微管理或显微管理学，一种管理风格，与宏观管理的理念相反。在这种手法里，管理者透过对被管理者（员工）的密切观察及操控，使被管理者达成管理者所指定的工作。相对于一般管理者只对较小型的工作给予一般的指示，微观管理者会监视及评核每一个步骤。这个名词一般在使用上带有负面的意思。\u0026ndash; 来自维基百科\n模糊 有许多方法可以说明模糊性。错误的报告，如“出问题了，快修复！”没有足够的信息供开发人员使用。顺便说一下，拥有错误报告模板可以帮助解决这个问题。 或者对某个功能的规范不明确，在这种情况下，一旦管理员更好地详细说明了预期的行为，开发人员就会开始实施对他们感觉合适的事情。\n不明确的优先次序也属于此类别。开发人员想知道他们是否正在处理正确的任务的时间可以很容易地避免。如果有的话，他们会得到经理的评论，询问他们为什么要处理这个特定的任务（虽然优先事项没有定义）……好吧，你得到它 - 很多挫折……\n海鸥管理 你听说过吗？当管理者完全没有参与工作时，就会发生这种情况，但是……他们偶尔会突然畏缩不前。“这是错的，这个，这看起来很糟糕，”等等，然后又飞走了。我不得不承认我喜欢这个形象，但不幸的是，这种情况比我们想要的更频繁。这种行为让开发人员感到非常沮丧; 他们将在接下来的几个小时内无法返回该区域，有时甚至连几天都没有。\n信用贪婪 您是否有过经理或其他开发人员，他们在过去几周内完成了您所做的工作？开发人员首先重视能力。为别人赢得信誉是为了自己并将其从他或她手中移除。这在我的名单上相当高，因为我觉得它产生了如此多的紧张，它只会在很长一段时间内摧毁整个开发人员的生产力。\n环境 - 噪音，运动，工作区设计…… 这对于非程序员来说可能看起来很奇怪，但开发人员工作的环境对他们的活动有重要影响。例如，有一些白噪声 - 响亮的交流电，听力汽车和卡车翻滚 - 帮助他们更好地集中注意力。这就是我们这么多人戴耳机的原因！我其实刚刚发现了RainyMood - 非常棒\n","permalink":"/posts/%E8%AF%91%E6%96%87/157/","summary":"今天的文章是来自 medium 的一篇文章，点赞数有将近 1 万 9，所以翻译出来给大家分享一下，有些概念怕大家不了解，所以我放了一些 维基百科的解释。如果有翻译得不是很好的地方，请看原文：https://hackernoon.com/top-12-things-that-destroy-developer-productivity-2ddf0abc190\n正文：\n很多文章都涉及技术主管和项目经理的角色。我们经常遇到的一个共同主题是如何提高团队的工作效率。但是在你集中精力来提高生产力之前，你可能首先要考虑是什么在摧毁它，以便建立一个可靠的基础。不幸的是，即使 Peopleware 近 30 年前发布，我们也看到许多团队在一些（消极的）显着方式中遭受巨大的生产力损失！\n没有人希望程序员在没有计算机的情况下完成工作，但是有很多公司希望程序员能够在不知情的情况下完成工作。这同样不切实际。\n因此，让我们深入探讨我们的 12 个阻止您的开发人员“进入区域”并提高工作效率的事项列表。我将尝试从大多数到最不具影响力的列表中优先考虑此列表。随意评论！\n如果您想知道这一切是否值得投资，只需考虑开发商的工资。生产力提高10％甚至更多！\n中断和会议 在我看来，中断是开发人员的首要生产力杀手。开发人员在中断之前不能轻易回到他们正确的位置。他们需要进入发展的思维模式，然后慢慢追溯到他们离开的地方。这可能需要超过30分钟。中断越多，挫折越多，工作质量越差，错误就越多 - 而且还在继续。 “The more times you trip me up while I’m trying to get started — the longer between each time I’m going to try. If you fill my morning with interruptions — don’t be surprised when the day is unproductive.。” \u0026ndash;A developer on Reddit\n大概意思就是说，每次被打断都要重新开始，如果你的一天里经常被打断，那么当你一天没有任何成果的时候，不要感到惊讶。\n会议怎么样？会议和中断之间的唯一区别是会议是计划中断，这会使情况变得更糟。如果开发人员在处理任务时知道他们会中断，则他们无法完成任务。因此，如果他们在一两个小时内召开会议，他们将无法取得任何进展，因为大多数工程任务需要更多时间。\nAs Paul Graham wrote, “A single meeting can blow a whole afternoon by breaking it into two pieces, each too small to do anything hard in.","title":"破坏开发人员生产力的十二件事"},{"content":" 如果你觉得它很快，那么这篇文章可能就是你所缺少的\n我经常听到有人在群里，或者在社区里说的一个很严重的错误，那就是说 React 的 Virtual Dom 是以快出名的，比原生 Dom 快多了，啥啥啥的，每次都一两句话说不清楚，所以下次有谁再说 React 是以快出名的，你就把这篇文章丢给他，下面进入正题。\n在过去的几年里，你一直在跟踪 JavaScript 社区的发展，你至少听说过 Virtual DOM（React，Vue.js 2，Riot.js，Angular 2等等）。他们承诺（或者更确切地说，他们的宣传）更快的渲染界面，特别是更新，减少麻烦。你很快的上手了使用虚拟DOM的应用程序，这很好。几个月后，您的应用程序现在变得越来越复杂，你可能从用户交互到屏幕更新只需要一两秒钟的更新。你可能会想，这东西很神奇，应该会比 jQuery 快，但是实际上不是这个样子的。\n虽然我同意虚拟 DOM 为我们提供了很多便利，但我将解释为什么我认为根据定义，更快的渲染和更快的更新是不正确的。要付出代价，其利益并不是大多数人想象或至少希望的。\n要阅读本文，您需要熟悉DOM。理想情况下，您至少可以使用 DOM API。如果你只使用 DOM API 构建东西，你可能不需要这篇文章，但我仍然希望你阅读它并在评论中留下一点评语。\n渲染和更新 让我们来看看手动执行 DOM 节点的创建和更新的鸟瞰图。这对于理解虚拟DOM如何工作以及它解决了哪些问题非常重要。\n在谈论 JavaScript Web 应用程序时，用户界面的更改通过 DOM 操作发生。这个过程分为两个阶段：\nJS 部分：定义 JavaScript 世界中的变化 DOM 部分：使用 DOM API 函数和属性执行更改 性能是根据整个过程的速度来衡量的，但了解每部分的速度也很重要，以便了解要优化的内容。\n有两种方法可以创建和更新DOM树的各个部分。\n①字符串方式创建\n使用字符串既快速又简单，但在更新方面并不是非常精细。对于字符串，JS部分是它如此之快的原因。您可以在几毫秒内创建一段代表5000个节点的HTML。这是一个例子：\nconst userList = document.getElementById(\u0026#34;user-list\u0026#34;); // JS 部分 const html = users.map(function (user) { return ` \u0026lt;div id=\u0026#34;${user.id}\u0026#34; class=”user”\u0026gt; \u0026lt;h2 class=\u0026#34;header\u0026#34;\u0026gt;${user.firstName} ${user.lastName}\u0026lt;/h2\u0026gt; \u0026lt;p class=\u0026#34;email\u0026#34;\u0026gt;\u0026lt;a href=”mailto:${user.email}”\u0026gt;EMAIL\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;avg-grade\u0026#34;\u0026gt;Average grade: ${user.avgGrade}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;enrolled\u0026#34;\u0026gt;Enrolled: ${user.enrolled}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ` }).join(\u0026#34;\u0026#34;); // DOM 部分 userList.innerHTML = html; 我提到使用这种方法时存在局限性。请考虑以下示例：\nconst search = document.getElementById(\u0026#34;search\u0026#34;); search.innerHTML = `\u0026lt;input class=\u0026#34;search\u0026#34; type=\u0026#34;text\u0026#34; value=\u0026#34;foo\u0026#34;\u0026gt;`; // Change value to \u0026#34;bar\u0026#34;? search.innerHTML = `\u0026lt;input class=\u0026#34;search\u0026#34; type=\u0026#34;text\u0026#34; value=\u0026#34;bar\u0026#34;\u0026gt;`; 虽然看起来上面的内容很简单，但它实际上并不起作用。当我们运行上面的代码时，原始\u0026lt;input\u0026gt;元素被替换而不是更新，例如，如果用户有焦点的字段，他们将失去焦点。\n创建和更新 DOM 树的另一种方法是使用 DOM 对象。就你必须编写的代码而言，这种方法非常冗长，而且总体来说它也慢得多。\n让我们使用这个方法重写用户列表示例：\nconst userList = document.getElementById（“user-list”）; // JS part const = document.createDocumentFragment（）; users.forEach（function（user）{ const div = document.createElement（“div”）; div.id = user.id; div.className =“user”; const header = document.createElement（“h2”）; h2 .className =“header”; h2.appendChild（ document.createTextNode（`$ {user.firstName} $ {user.lastName}`） ）; // .... frag.appendChild（div）; }）; // DOM部分 userList.innerHTML =“”; userList.appendChild（FRAG）; 这看起来不太好，但它仍然是创建DOM节点的有效方法。它还有一个优点，即我们能够将它与第三方库（如D3）混合使用，以执行 HTML 字符串不易处理的事情。在真正的优势，虽然是执行粒度更新现有的树时：\nconst search = document.getElementById（“search”）; search.innerHTML =`\u0026lt;input class =\u0026#34;search\u0026#34; type =\u0026#34;text\u0026#34;value =\u0026#34;foo\u0026#34;\u0026gt;`; //将值更改为“bar”？ search.querySelector（\u0026#34;input\u0026#34;）。value =\u0026#34;bar\u0026#34;; 这次我们结合快速方便的字符串 HTML 方法来创建初始 UI，然后我们使用 DOM 操作方法来更新 value 属性。不像我们第一次这样做，\u0026lt;input\u0026gt;现在没有被替换，所以它不会像第一个例子那样引起 UX 故障。\n进入虚拟DOM 让我们回到输入示例的第一个版本：\nconst search = document.getElementById(\u0026#34;search\u0026#34;); search.innerHTML = `\u0026lt;input class=\u0026#34;search\u0026#34; type=\u0026#34;text\u0026#34; value=\u0026#34;foo\u0026#34;\u0026gt;`; // Change value to \u0026#34;bar\u0026#34;? search.innerHTML = `\u0026lt;input class=\u0026#34;search\u0026#34; type=\u0026#34;text\u0026#34; value=\u0026#34;bar\u0026#34;\u0026gt;`; 如果我们参数化值部分，它将如下所示：\nconst search = document.getElementById(\u0026#34;search\u0026#34;); const renderInput = function (value) { search.innerHTML = `\u0026lt;input class=\u0026#34;search\u0026#34; type=\u0026#34;text\u0026#34; value=\u0026#34;${value}\u0026#34;\u0026gt;`; }; renderInput(\u0026#34;foo\u0026#34;); // Change value to \u0026#34;bar\u0026#34;? renderInput(\u0026#34;bar\u0026#34;); 好吧，新 renderInput() 功能肯定看起来很酷，但我们已经知道这不是好方法。\n如果我们有一些骚操作可以让我们继续使用类似的东西，但同时弄清楚我们想要做什么并做正确的事情呢？第二次 renderInput() 被调用，我们只更新 value 属性，所以只更新该属性而不是重新渲染整个属性\u0026lt;input\u0026gt;？\n我们说过创建和更新 DOM 树的整个过程分为两个阶段。使用虚拟 DOM，DOM 阶段应该尽可能高效，代价是在 JS 阶段完成的额外工作。这项额外的工作会做 diff(不要以为 js 计算就不花费代价)，因此它的另一个名称将是开销。根据定义，虚拟 DOM 比精心设计的手动更新慢，但它为我们提供了一个更方便的 API 来创建 UI。\n虚拟DOM比精心设计的手动更新慢。\n为什么有些开发人员认为Virtual DOM更快 在虚拟DOM（尤其是React）的早期，传播了一个神话，即虚拟 DOM 使 DOM 快速更新。正如我们在前面的章节中看到的那样，这在技术上是不可行的。DOM 更新就是它们的原因，并且没有任何魔法可以使它更快：它必须在浏览器的本机代码中进行优化。\n可以看到 React 主页里面没有提到性能，而是开发人员的便利性。\nReact 的基本思维模式是每次有变动就整个重新渲染整个应用。如果没有 Virtual DOM，简单来想就是直接重置 innerHTML。很多人都没有意识到，在一个大型列表所有数据都变了的情况下，重置 innerHTML 其实是一个还算合理的操作\u0026hellip; 真正的问题是在 “全部重新渲染” 的思维模式下，即使只有一行数据变了，它也需要重置整个 innerHTML，这时候显然就有大量的浪费。\n您仍然可以看到比较各种虚拟 DOM 实现的基准测试，并且一些措辞会误导新开发人员认为虚拟 DOM 是当今事实上的标准，并且不值得对其他技术进行基准测试。然而，有一些基准可以将它与其他技术进行比较，例如 Aerotwist 的 React +性能文章，它描绘了虚拟 DOM 在宏观方案中所处位置的更真实的画面。\n我们得到了什么？这值得么？ 虚拟DOM最终是一种执行 DOM 更新的循环方式。但是，它打开了通向有趣架构的大门，例如将视图视为状态函数，或者编写和组合视图组件。虚拟 DOM 带来了很多好东西，尽管疯狂的性能水平不是其中之一。您可以将其视为 Python 或 PHP 中的编码与 C 中的编码之间的差异。我们以性能为代价获得更多的开发人员工具。换句话说，这是一种权衡。\n另一方面，开发人员的时间丢失也是一些实现方面的事情。虚拟 DOM 试图弄清楚它需要执行哪些更改的部分是由人类实现的，因此它并不总是万无一失。有时你必须介入。在某些情况下，无法进行干预。对于绝对性能至关重要的事情，它甚至可能不是一种选择。\n衡量您的表现并根据硬数据来决定。\n最重要的是，虚拟DOM只是您可以使用的工具之一。衡量您的表现并根据硬数据来决定。数据绑定仍然非常可行，我们已经看到您也可以手动完成所有操作。它绝对不是万能的，因此没有必要与虚拟DOM结合。\n结论 React 厉害的地方并不是说它比 DOM 快，而是说不管你数据怎么变化，我都可以以最小的代价来进行更新 DOM。 方法就是我在内存里面用心的数据刷新一个虚拟 DOM 树，然后新旧 DOM 进行比较，找出差异，再更新到 DOM 树上。\n这就是所谓的 diff 算法，虽然说 diff 算法号称算法复杂度 O(n) 可以得到最小操作结果，但实际上 DOM 树很大的时候，遍历两棵树进行各种对比还是有性能损耗的，特别是我在顶层 setState 一个简单的数据，你就要整棵树 walk 一遍，而真实中我可以一句 jQuery 就搞定，所以就有了 shouldComponentUpdate 这种东西。\n框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。\n针对每一个点，都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，你难道为每一个地方都去做手动优化吗？出于可维护性的考虑，这显然不可能。框架给你的保证是，你在不需要手动优化的情况下，我依然可以给你提供过得去的性能。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/124/","summary":"如果你觉得它很快，那么这篇文章可能就是你所缺少的\n我经常听到有人在群里，或者在社区里说的一个很严重的错误，那就是说 React 的 Virtual Dom 是以快出名的，比原生 Dom 快多了，啥啥啥的，每次都一两句话说不清楚，所以下次有谁再说 React 是以快出名的，你就把这篇文章丢给他，下面进入正题。\n在过去的几年里，你一直在跟踪 JavaScript 社区的发展，你至少听说过 Virtual DOM（React，Vue.js 2，Riot.js，Angular 2等等）。他们承诺（或者更确切地说，他们的宣传）更快的渲染界面，特别是更新，减少麻烦。你很快的上手了使用虚拟DOM的应用程序，这很好。几个月后，您的应用程序现在变得越来越复杂，你可能从用户交互到屏幕更新只需要一两秒钟的更新。你可能会想，这东西很神奇，应该会比 jQuery 快，但是实际上不是这个样子的。\n虽然我同意虚拟 DOM 为我们提供了很多便利，但我将解释为什么我认为根据定义，更快的渲染和更快的更新是不正确的。要付出代价，其利益并不是大多数人想象或至少希望的。\n要阅读本文，您需要熟悉DOM。理想情况下，您至少可以使用 DOM API。如果你只使用 DOM API 构建东西，你可能不需要这篇文章，但我仍然希望你阅读它并在评论中留下一点评语。\n渲染和更新 让我们来看看手动执行 DOM 节点的创建和更新的鸟瞰图。这对于理解虚拟DOM如何工作以及它解决了哪些问题非常重要。\n在谈论 JavaScript Web 应用程序时，用户界面的更改通过 DOM 操作发生。这个过程分为两个阶段：\nJS 部分：定义 JavaScript 世界中的变化 DOM 部分：使用 DOM API 函数和属性执行更改 性能是根据整个过程的速度来衡量的，但了解每部分的速度也很重要，以便了解要优化的内容。\n有两种方法可以创建和更新DOM树的各个部分。\n①字符串方式创建\n使用字符串既快速又简单，但在更新方面并不是非常精细。对于字符串，JS部分是它如此之快的原因。您可以在几毫秒内创建一段代表5000个节点的HTML。这是一个例子：\nconst userList = document.getElementById(\u0026#34;user-list\u0026#34;); // JS 部分 const html = users.map(function (user) { return ` \u0026lt;div id=\u0026#34;${user.id}\u0026#34; class=”user”\u0026gt; \u0026lt;h2 class=\u0026#34;header\u0026#34;\u0026gt;${user.","title":"不要再说虚拟 DOM 有多快了"},{"content":"在知乎上看到这么一个问题，觉得很有意思，以下是原提问者的见解\n过去五年前端的发展过程基本上是一个工程化的过程,框架和工程化工具层出不穷。\n近两年其实发展已经比较迟滞了。\n框架方面:基本就是三大框架鼎立的局面,三大框架都在相互借鉴吸收,而且方向各有侧重,未来短时间内我看格局不可能有什么大变化.\n工程化工具:基本上是 webpack 一统江湖的趋势,虽然有 parcel 等来小打小闹,但是生态一旦形成,没有革命性的项目是无法取代 webpack 的,而且 webpack 也在进化.\n个人认为前面五年是前端生产力提高的五年,工程化使得前端的生产力得到了极大提升,但是现在也基本上是在已有的格局中修修补补了\n我谈谈我对前端未来几年的发展方向的看法。\n看未来的发展方向，无非就是看现在的解决方案所存在的痛点。\n1. 浏览器的性能问题 做 web 前端的同学都知道，和原生的 App 相比，性能一直一个致命的痛点，如果要追求性能，肯定得用原生 App。那么在性能上，未来几年可能是一个方向。\n①前端代码编译为字节码\n浏览器这几年在 Chrome 的带动下，性能飞速发展，但毕竟其核心原理没有变化，性能始终难以达到原生 App 的水平，这部分是很有可能出现大的变化的，一个可能的方向就是浏览器变成虚拟机，前端代码编译为字节码，通过这种方式来将性能提升一个等级，虽然还是难以达到原生App的水平，但已经能够满足绝大部分应用的性能需求，类似于Java对比C/C++一样。 \u0026ndash;李运华\n因为 js 是边解释边执行的，这肯定是要比编译型语言要慢，为了解决解释器的低效问题，大概在 2008 年的时候，提出了 JIT 的概念，它是使 JavaScript 运行更快的一种手段（JIT，内联缓存和隐藏类）之一，通过监视代码的运行状态，把 hot 代码（重复执行多次的代码）进行优化。通过这种方式，可以使 JavaScript 应用的性能提升很多倍。\n但是时至今日，还是觉得不够快，所以各大浏览器厂商开始支持 WebAssembly。WebAssembly 是一种新的字节码格式，主流浏览器都已经支持 WebAssembly。\n和 JS 需要解释执行不同的是，WebAssembly 字节码和底层机器码很相似可快速装载运行，因此性能相对于 JS 解释执行大大提升。\n也就是说 WebAssembly 并不是一门编程语言，而是一份字节码标准，需要用高级编程语言编译出字节码放到 WebAssembly 虚拟机中才能运行.\n他的优点就是：\n体积小：由于浏览器运行时只加载编译成的字节码，一样的逻辑比用字符串描述的 JS 文件体积要小很多； 加载快：由于文件体积小，再加上无需解释执行，WebAssembly 能更快的加载并实例化，减少运行前的等待时间； 目前可以编译成为 WebAssembly 字节码有 ：AssemblyScript(语法跟 TS 差不多，)、c\\c++、Rust、Kotlin。\n②统一的DOM树限制了单线程的渲染\n理论上来说，一个页面某个时间变化的部分只是集中在一小块区域，没有必要将整个DOM树锁住。因此，一个可能的方向是分区渲染，即将页面划分为几个不同的区域，每个区域有独立的DOM树，独立渲染，那么性能会高很多，类似于 App 开发中的组件，组件类的运行不影响其它组件，如果需要依赖其它组件，通过组件间消息进行通信。\n原生 App 不同平台重新开发的痛点 现在的 web 有两大优势，一个是浏览完毕直接走人，另外一个是跨平台，只要有浏览器，一切都好说。\n所以现在有很多 hybrid 解决方案，某些页面通过 h5 的方式来展现。\n想解决的无非就是少花点成本，写一份代码，可以在 ios 和 Android 上都可以用，进而也出来了想 RN、weex、NativeScript 这类 Learn Once, Write Anywhere(RN提出来的) ，但是他们最终都会翻译成原生代码。\n但是用过这些的人都知道，还有很多坑，经常调侃 rn 的就是 write once ，debug anywhere。\nLearn Once, Write Anywhere 的理念，背后就是跨端的思想，所以也诞生出来 electron、PWA 为代表的案例。\n而且现在出现了 Taro 、mpvue 这些 h5 与小程序的统一的方案，所以未来在突破写一份代码在 h5 ，原生 app、小程序，甚至桌面应用都有可能。\n另外提醒 我很早就跟星球里的朋友们说过，TS 一定会在火的，现在用 TS 的感觉，让我感觉跟 vim 很像，刚开始用的时候很难受，一旦习惯了就离不开了。未来项目会越来越复杂，用了 TS 项目的风险会可控很多。 多注重框架原理，现在对于前端工程化，个人认为差不多到了瓶颈期，很难有新的突破，注重原理才能很好的应对未来的发展。 眼界放宽、拓宽自己知识的广度。 ","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/117/","summary":"在知乎上看到这么一个问题，觉得很有意思，以下是原提问者的见解\n过去五年前端的发展过程基本上是一个工程化的过程,框架和工程化工具层出不穷。\n近两年其实发展已经比较迟滞了。\n框架方面:基本就是三大框架鼎立的局面,三大框架都在相互借鉴吸收,而且方向各有侧重,未来短时间内我看格局不可能有什么大变化.\n工程化工具:基本上是 webpack 一统江湖的趋势,虽然有 parcel 等来小打小闹,但是生态一旦形成,没有革命性的项目是无法取代 webpack 的,而且 webpack 也在进化.\n个人认为前面五年是前端生产力提高的五年,工程化使得前端的生产力得到了极大提升,但是现在也基本上是在已有的格局中修修补补了\n我谈谈我对前端未来几年的发展方向的看法。\n看未来的发展方向，无非就是看现在的解决方案所存在的痛点。\n1. 浏览器的性能问题 做 web 前端的同学都知道，和原生的 App 相比，性能一直一个致命的痛点，如果要追求性能，肯定得用原生 App。那么在性能上，未来几年可能是一个方向。\n①前端代码编译为字节码\n浏览器这几年在 Chrome 的带动下，性能飞速发展，但毕竟其核心原理没有变化，性能始终难以达到原生 App 的水平，这部分是很有可能出现大的变化的，一个可能的方向就是浏览器变成虚拟机，前端代码编译为字节码，通过这种方式来将性能提升一个等级，虽然还是难以达到原生App的水平，但已经能够满足绝大部分应用的性能需求，类似于Java对比C/C++一样。 \u0026ndash;李运华\n因为 js 是边解释边执行的，这肯定是要比编译型语言要慢，为了解决解释器的低效问题，大概在 2008 年的时候，提出了 JIT 的概念，它是使 JavaScript 运行更快的一种手段（JIT，内联缓存和隐藏类）之一，通过监视代码的运行状态，把 hot 代码（重复执行多次的代码）进行优化。通过这种方式，可以使 JavaScript 应用的性能提升很多倍。\n但是时至今日，还是觉得不够快，所以各大浏览器厂商开始支持 WebAssembly。WebAssembly 是一种新的字节码格式，主流浏览器都已经支持 WebAssembly。\n和 JS 需要解释执行不同的是，WebAssembly 字节码和底层机器码很相似可快速装载运行，因此性能相对于 JS 解释执行大大提升。\n也就是说 WebAssembly 并不是一门编程语言，而是一份字节码标准，需要用高级编程语言编译出字节码放到 WebAssembly 虚拟机中才能运行.\n他的优点就是：\n体积小：由于浏览器运行时只加载编译成的字节码，一样的逻辑比用字符串描述的 JS 文件体积要小很多； 加载快：由于文件体积小，再加上无需解释执行，WebAssembly 能更快的加载并实例化，减少运行前的等待时间； 目前可以编译成为 WebAssembly 字节码有 ：AssemblyScript(语法跟 TS 差不多，)、c\\c++、Rust、Kotlin。","title":"浅谈未来几年前端的发展方向"},{"content":"JavaScript ES6 带来了新的语法和新的强大功能，使您的代码更现代，更易读。它允许您编写更少的代码并执行更多操作。 ES6 向我们介绍了许多强大的功能，如箭头函数，模板字符串，对象结构，模块等，让我们来看看。\nconst and let const 是 ES6 中用于声明变量的新关键字。 const 比 var 更强大。使用后，无法重新分配变量。换句话说，它是一个不可变的变量，除非它与对象一起使用。\n这对于定位选择器非常有用。例如，当我们有一个触发事件的按钮时，或者当您想在 JavaScript 中选择 HTML 元素时，请使用 const 而不是 var。这是因为 var 会被提升，当不想重新分配变量时，最好使用 const。\n// ES5 var MyBtn = document.getElementId(\u0026#39;mybtn\u0026#39;); // ES6 const MyBtn = document.getElementById(\u0026#39;mybtn\u0026#39;); 在上面的代码中，const 不会更改，也不能重新分配。如果您尝试为其赋予新值，则会返回错误。\nlet name = \u0026#34;Said\u0026#34;; name = \u0026#34;Rick\u0026#34;; console.log(name); // Rick let 可以重新分配并获得新的价值。它创建了一个可变变量。\nlet 与 const 相同，因为两者都是块级作用域，这意味着该变量仅在其块级范围内可用。\n箭头函数 箭头函数非常棒，使您的代码更具可读性，更具结构性，并且看起来像现代代码，而不是使用这个：\n// ES5 function myFunc(name) { return \u0026#39;Hello \u0026#39; + name; } console.log(myFunc(\u0026#39;said\u0026#39;)); // Hello said 而使用 ES6 的写法：\n// ES6 Arrow function const myFunc = name =\u0026gt; { return `Hi ${name}`; } console.log(myFunc(\u0026#39;Said\u0026#39;)); // Hi Said // 或者不要 return 关键字 const myFunc = name =\u0026gt; `Hi ${name}`; console.log(myFunc(\u0026#39;Said\u0026#39;));// Hi Said 如您所见，箭头功能似乎更具可读性和清洁性！您将不再需要使用旧语法。\n此外，您可以使用箭头功能与 map，filter 和 reduce 内置函数。\nconst myArray = [\u0026#39;tony\u0026#39;, \u0026#39;Sara\u0026#39;, \u0026#39;Said\u0026#39;, 5]; // ES5 let Arr1 = myArray.map(function(item) { return item; }); console.log(Arr1);// [\u0026#34;tony\u0026#34;, \u0026#34;Sara\u0026#34;, \u0026#34;Said\u0026#34;, 5] // ES6 let Arr2 = myArray.map(item =\u0026gt; item); console.log(Arr2);// [\u0026#34;tony\u0026#34;, \u0026#34;Sara\u0026#34;, \u0026#34;Said\u0026#34;, 5] 带箭头的 map 函数看起来比 ES5 中的 map 更清晰可读。使用 ES6，您可以编写更短的代码，你也可以用相同的方法使用 reduce 和 filter。\n模板字符串 模板字符串非常酷，当我们想在字符串中使用变量时我们不必使用加号（+）运算符来连接字符串。\n旧语法：\n// ES5 function myFunc1(name, age) { return \u0026#39;Hi \u0026#39; + name + \u0026#39; Your age is \u0026#39; + age + \u0026#39; year old\u0026#39;; } console.log(myFunc(\u0026#39;Said\u0026#39;, 22)); // Hi Said, Your age is 22 year old 用 ES6 新语法：\n// ES6 const myFunc = (name, age) =\u0026gt; { return `Hi ${name}, Your age is ${age} year old`; } // or const myFunc = (name, age) =\u0026gt; `Hi ${name}, Your age is ${age} year old`; console.log(myFunc1(\u0026#39;Said\u0026#39;, 22)); // Hi Said, Your age is 22 year old 很简单！这是旧语法和 ES6 之间的巨大差异。使用字符串时，ES6 中的文字字符串看起来比 ES5 更有条理，结构更好。\n默认参数 当您忘记编写参数时，它不会返回未定义的错误，因为该参数已在默认值中定义。因此，当您使用遗漏参数运行函数时，它将采用默认参数的值，并且不会返回错误！\n看看这个例子：\nconst myFunc = (name, age) =\u0026gt; `Hi ${name}, Your age is ${age} year old`; console.log(myFunc(\u0026#39;Said\u0026#39;)); // Hi Said, Your age is undefined year old 上面的函数返回 undefined，因为我们忘了给它第二个参数 age。\n但是如果我们使用默认参数，当我们忘记分配参数时,它将使用它的默认值，将不会返回 undefined！\nconst myFunc = (name, age = 22) =\u0026gt; `Hi ${name}, Your age is ${age} year old`; console.log(myFunc(\u0026#39;Said\u0026#39;)); // Hi Said, Your age is 22 year old 如您所见，即使我们错过了第二个参数，该函数也会返回一个值。现在使用默认参数我们可以提前处理错误。\n数组和对象解构 解构使得将数组或对象的值分配给新变量更容易。\n旧语法：\nconst contacts = { name: \u0026#39;said\u0026#39;, famillyName: \u0026#39;Hayani\u0026#39;, age: 22 }; let name = contacts.name; let famillyName = contacts.famillyName; let myAge = contacts.age; console.log(name); // said console.log(famillyName); // Hayani console.log(myAge); // 22 ES6 新语法：\nconst contacts = { name: \u0026#39;said\u0026#39;, famillyName: \u0026#39;Hayani\u0026#39;, age: 22 }; let {name, famillyName, age} = contacts; console.log(name); // said console.log(famillyName); // Hayani console.log(age); // 22 使用 ES5，我们必须为每个变量分配每个值。使用 ES6，我们只需将我们的值放在大括号中以获取对象的任何属性。\n注意：如果指定的变量与属性名称不同，则返回 undefined。例如，如果属性的名称是 name，我们将其分配给 username变量，它将返回undefined。\n我们总是必须将变量命名为与属性名称相同。但是如果我们想要重命名变量，我们可以使用冒号：代替。\nconst contacts = { name: \u0026#39;said\u0026#39;, famillyName: \u0026#39;Hayani\u0026#39;, age: 22 }; let {name:otherName, famillyName, myAge} = contacts; console.log(otherName);// said 对于数组，我们使用与对象相同的语法。我们只需用方括号替换花括号。\nconst Arr = [\u0026#39;Lionel\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Layla\u0026#39;, 20]; let [value1, value2, value3] = Arr; console.log(value1); // Lionel console.log(value2); // John console.log(value3); // Layla Import and export 在 JavaScript 应用程序中使用 import 和 export 使其更强大。它们允许您创建单独的可重用组件。\n如果您熟悉任何 JavaScript MVC 框架，您将看到他们使用 import 和 export 出来在大多数时间处理组件。那么它们如何真正起作用呢？\n很简单！ export 允许您导出要在另一个 JavaScript 组件中使用的模块。我们使用 import 导入该模块以在我们的组件中使用它。\n例如，我们有两个文件。第一个名为 detailComponent.js，第二个名为 homeComponent.js。\n在 detailComponent.js 中，我们将导出 detail 函数。\n// ES6 export default function detail(name, age) { return `Hello ${name}, your age is ${age} year old!`; } 如果我们想在 homeComponent.js 中使用此函数，我们将只使用 import\nimport { detail } from \u0026#39;./detailComponent\u0026#39;; console.log(detail(\u0026#39;Said\u0026#39;, 20)); // Hello Said, your age is 20 year old! 如果我们要导入多个模块，我们只需将它们放在大括号内。\nimport {detail, userProfile, getPosts} from \u0026#39;./detailComponent\u0026#39;; console.log(detail(\u0026#39;Said\u0026#39;, 20)); console.log(userProfile); console.log(getPosts)); Promise Promise 是 ES6 的新功能。这是编写异步代码的方法。例如，当我们想要从 API 获取数据时，可以使用它，或者当我们有一个需要时间执行的函数时。Promise 使解决问题更容易，所以让我们创建我们的第一个 Promise！\nconst myPromise = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { resolve(\u0026#39;Hi the Promise execute successfully\u0026#39;); }) } console.log(myPromise()); // Promise {\u0026lt;resolved\u0026gt;: \u0026#34;Hi the Promise execute successfully\u0026#34;} 如果您登录控制台，它将返回一个 Promise。因此，如果我们想在获取数据后执行一个函数，我们将使用 Promise。 Promise有两个参数： resolve 和 reject 来处理预期的错误。\n注意：fetch函数返回一个Promise本身！\nconst url=\u0026#39;https://jsonplaceholder.typicode.com/posts\u0026#39;;\rconst getData=(url)=\u0026gt;{\rreturn fetch(url);\r}\rgetData(url).\rthen(data=\u0026gt; data.json()).\rthen(result=\u0026gt; console.log(result)); 现在，如果您登录控制台，它将返回一个数据数组。\nRest 参数和 Spread 运算符 Rest 参数用于获取数组的参数，并返回一个新数组。\nconst arr = [\u0026#39;said\u0026#39;, 20, \u0026#39;Javascript enthusiast\u0026#39;, \u0026#39;Hi\u0026#39;, \u0026#39;Said\u0026#39;, \u0026#39;How are you?\u0026#39;]; // 通过解构获取值 const [val1, val2, val3, ...rest] = arr; const Func = (restOfArr) =\u0026gt; { return restOfArr.filter(item =\u0026gt; {return item}).join(\u0026#34; \u0026#34;); } console.log(Func(rest)); // Hi Said How are you? const arr = [\u0026#39;said\u0026#39;, 20, \u0026#39;Javascript enthusiast\u0026#39;, \u0026#39;Hi\u0026#39;, \u0026#39;Said\u0026#39;, \u0026#39;How are you?\u0026#39;]; const Func = (...anArray) =\u0026gt; anArray; console.log(Func(arr)); // [\u0026#39;said\u0026#39;, 20, \u0026#39;Javascript enthusiast\u0026#39;, \u0026#39;Hi\u0026#39;, \u0026#39;Said\u0026#39;, \u0026#39;How are you?\u0026#39;] spread 运算符与 rest 参数具有相同的语法，但是 spread 运算符采用数组本身而不仅仅是参数。我们可以使用 Spread 参数来获取数组的值，而不是使用 for 循环或任何其他方法。\nconst arr=[\u0026#39;said\u0026#39;,20,\u0026#39;JavaScript enthusiast\u0026#39;,\u0026#39;Hi\u0026#39;,\u0026#39;Said\u0026#39;,\u0026#39;How are you?\u0026#39;];\rconst Func=(...anArray)=\u0026gt;{\rreturn anArray;\r}\rconsole.log(Func(arr)); //[\u0026#34;said\u0026#34;, 20, \u0026#34;JavaScript enthusiast\u0026#34;, \u0026#34;Hi\u0026#34;, \u0026#34;Said\u0026#34;, \u0026#34;How are you?\u0026#34; Class 类是面向对象编程（OOP）的核心。它们使您的代码更安全和封装。使用类可以为代码提供一个很好的结构并使其保持面向对象。\nclass myClass { constructor() { } } 要创建一个类，请使用 class 关键字，后跟带有两个大括号的类的名称。\nclass myClass { constructor(name, age) { this.name = name; this.age = age; } } const user = new myClass(\u0026#39;Said\u0026#39;, 22); console.log(user.name); // Said cosnole.log(user.age); // 22 现在我们可以使用 new 关键字访问类方法和属性。\nclass myClass{ constructor(name,age){ this.name=name; this.age=age; } } const Home= new myClass(\u0026#34;said\u0026#34;,20); console.log(Home.name)// said 要从其他类继承，请使用 extends 关键字，后跟要继承的类的名称。\nclass myClass { constructor(name, age) { this.name = name; this.age = age; } sayHello() { cosnole.log(`Hi ${this.name} your age is ${this.age} `); } } // 继承 myClass 方法和属性 class UserProfile extends myClass { username() { console.log(this.name); } } const profile = new UserProfile(\u0026#39;Said\u0026#39;, 22); profile.sayHello();// Hi Said your age is 22; profile.username();// Said ","permalink":"/posts/%E6%8A%80%E6%9C%AF/115/","summary":"JavaScript ES6 带来了新的语法和新的强大功能，使您的代码更现代，更易读。它允许您编写更少的代码并执行更多操作。 ES6 向我们介绍了许多强大的功能，如箭头函数，模板字符串，对象结构，模块等，让我们来看看。\nconst and let const 是 ES6 中用于声明变量的新关键字。 const 比 var 更强大。使用后，无法重新分配变量。换句话说，它是一个不可变的变量，除非它与对象一起使用。\n这对于定位选择器非常有用。例如，当我们有一个触发事件的按钮时，或者当您想在 JavaScript 中选择 HTML 元素时，请使用 const 而不是 var。这是因为 var 会被提升，当不想重新分配变量时，最好使用 const。\n// ES5 var MyBtn = document.getElementId(\u0026#39;mybtn\u0026#39;); // ES6 const MyBtn = document.getElementById(\u0026#39;mybtn\u0026#39;); 在上面的代码中，const 不会更改，也不能重新分配。如果您尝试为其赋予新值，则会返回错误。\nlet name = \u0026#34;Said\u0026#34;; name = \u0026#34;Rick\u0026#34;; console.log(name); // Rick let 可以重新分配并获得新的价值。它创建了一个可变变量。\nlet 与 const 相同，因为两者都是块级作用域，这意味着该变量仅在其块级范围内可用。\n箭头函数 箭头函数非常棒，使您的代码更具可读性，更具结构性，并且看起来像现代代码，而不是使用这个：\n// ES5 function myFunc(name) { return \u0026#39;Hello \u0026#39; + name; } console.","title":"一篇文章搞定 ES6"},{"content":" 桃翁桃翁，问个问题呢，据说 js 里面有个执行上下文，这个概念是个什么东东哦？据说挺重要的，给我科普科普呗。\nEmm… 这个概念非常的抽象，简单来说呢，就是 JS 在执行某段代码的时候做的一些事情。\n具体做的事情就是定义了变量或函数有权访问的其他数据决定了它们各自的行为(作用域链)。每个执行环境都有一个与之关联的变量对象（variable object),环境中定义的所有变量和函数都保存在这个对象中(变量包括 this、arguments)。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。\n哇，还是好抽象啊，你能不能画个图举个栗子呢？\n在之前说的执行上下文就是解释器在执行 JS 某段代码的时候做的一些事，那么首先我们把代码分个类。\nGlobal 代码：代码第一次执行时默认的环境。 Function 代码：执行到一个函数中。 Eval 代码：文本在eval函数内部执行。 看到这个图相信现在分清楚各种类型的代码，每种类型代码会都会产生执行上下文，我们把 Global 代码产生的执行环境叫**「全局执行上下文」,把 Function 代码产生的执行环境叫「执行上下文」**吧，Eval 代码不考虑。\n那我看这个图似乎有很多执行上下文(execution context)，这个具体是怎么来的呢？\n全局执行上下文只有一个，而执行环境的话是每次函数调用都会产生一个执行上下文。注意要调用才会产生哦，不调用是不会产生的。\n那这个执行上下文基本知道是个什么东西了，那执行上下文栈又是啥呢？\n见名知意，执行上下文栈就是执行上下文（包含全局执行上下文）形成的栈嘛。\n那为什么要有这个执行上下文栈呢？\n浏览器中 JavaScript 解释器是单线程的，这就是说同一时间代码只会做一件事，那么创建这么多执行上下文，又不能同一时间执行多个上下文，所以就必须要有个顺序，这个顺序就是就是先进后出，这很明显就是一个栈结构嘛。\n那我就疑惑了，为啥要先进后出，不先进先出呢？\n我们分析一下图一的代码，结合上图，首先我们看图 1，解释代码的时候首先创建的就是全局上下文，然后再创建 person 的执行上下文，然后再创建 firstName 的上下文，然后再执行完毕 firstName ，就把 firstName 的上下文弹出，再 创建 lastName 的上下文，然后执行完毕，再弹出 lastName 的上下文，然后执行完 person 的上下文，再弹出 person 的上下文，再执行全局上下文，然后全局上下文弹出。\n如下是一张经典的执行上下文栈的图。\n默认进入全局上下文。如果你的全局代码中调用了一个函数，那么程序将会进入这个被调用函数的上下文，创建一个新的执行上下文，并把当前上下文放到栈顶。浏览器总是会把当前执行上下文放到栈的顶部，一旦函数执行完成，这个执行上下文就会从栈中移除，返回到栈中的下一个上下文。\n这些大概明白了，不过你说在创建执行上下文做的那些事儿，我还是有点迷糊，能再详细说说吗？\n那我们首先看点代码：\n// 例1 console.log(a); // 报错，a is not defined // 例2 console.log(a); // undefined var a; // 例 3\rconsole.log(a); // undefined\rvar a = 666; // 例 4 console.log(this); // window 对象 // 例 5\rfunction foo(x) {\rconsole.log(arguments); // [666]\rconsole.log(x); // 666\r}\rfoo(666); // 例 6 // 函数表达式 console.log(foo); // undefined var foo = function foo() {} // 例 7 // 函数声明 console.log(foo); // function() {} function foo() {} 这 7 个例子相信大家对这些答案都是没有疑惑的，最基础的东西，例 1 报错，a 未定义，很正常。例 2、例 3 输出都是 undefined，说明浏览器在执行 console.log(a) 时，已经知道了 a 是 undefined，但却不知道 a 是 666（例 3）。\n看例 4 就知道，当执行这条语句的时候 this 已经被赋值了。\n在例 5 中展示了在函数体的语句执行之前，arguments 变量和函数的参数都已经被赋值。从这里可以看出，函数每被调用一次，都会产生一个新的执行上下文环境。因为不同的调用可能就会有不同的参数。\n然后就是例 6，例 7 中可以看出函数表达式跟变量声明一样，只是给变量赋值成 undefined，而函数声明会将会把函数整个赋值了。\n总结在执行上下文做的赋值事情\n变量、函数表达式——变量声明，默认赋值为undefined； this——赋值； 函数声明——赋值； 执行上下文就介绍到这里，如果你对相关知识还是感到迷惑，比如当在创建执行上下文的时候还有作用域，以及变量对象等概念，后面再一一介绍，不要担心，跟着我的文章走，这块一定能啃动。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/316/","summary":"桃翁桃翁，问个问题呢，据说 js 里面有个执行上下文，这个概念是个什么东东哦？据说挺重要的，给我科普科普呗。\nEmm… 这个概念非常的抽象，简单来说呢，就是 JS 在执行某段代码的时候做的一些事情。\n具体做的事情就是定义了变量或函数有权访问的其他数据决定了它们各自的行为(作用域链)。每个执行环境都有一个与之关联的变量对象（variable object),环境中定义的所有变量和函数都保存在这个对象中(变量包括 this、arguments)。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。\n哇，还是好抽象啊，你能不能画个图举个栗子呢？\n在之前说的执行上下文就是解释器在执行 JS 某段代码的时候做的一些事，那么首先我们把代码分个类。\nGlobal 代码：代码第一次执行时默认的环境。 Function 代码：执行到一个函数中。 Eval 代码：文本在eval函数内部执行。 看到这个图相信现在分清楚各种类型的代码，每种类型代码会都会产生执行上下文，我们把 Global 代码产生的执行环境叫**「全局执行上下文」,把 Function 代码产生的执行环境叫「执行上下文」**吧，Eval 代码不考虑。\n那我看这个图似乎有很多执行上下文(execution context)，这个具体是怎么来的呢？\n全局执行上下文只有一个，而执行环境的话是每次函数调用都会产生一个执行上下文。注意要调用才会产生哦，不调用是不会产生的。\n那这个执行上下文基本知道是个什么东西了，那执行上下文栈又是啥呢？\n见名知意，执行上下文栈就是执行上下文（包含全局执行上下文）形成的栈嘛。\n那为什么要有这个执行上下文栈呢？\n浏览器中 JavaScript 解释器是单线程的，这就是说同一时间代码只会做一件事，那么创建这么多执行上下文，又不能同一时间执行多个上下文，所以就必须要有个顺序，这个顺序就是就是先进后出，这很明显就是一个栈结构嘛。\n那我就疑惑了，为啥要先进后出，不先进先出呢？\n我们分析一下图一的代码，结合上图，首先我们看图 1，解释代码的时候首先创建的就是全局上下文，然后再创建 person 的执行上下文，然后再创建 firstName 的上下文，然后再执行完毕 firstName ，就把 firstName 的上下文弹出，再 创建 lastName 的上下文，然后执行完毕，再弹出 lastName 的上下文，然后执行完 person 的上下文，再弹出 person 的上下文，再执行全局上下文，然后全局上下文弹出。\n如下是一张经典的执行上下文栈的图。\n默认进入全局上下文。如果你的全局代码中调用了一个函数，那么程序将会进入这个被调用函数的上下文，创建一个新的执行上下文，并把当前上下文放到栈顶。浏览器总是会把当前执行上下文放到栈的顶部，一旦函数执行完成，这个执行上下文就会从栈中移除，返回到栈中的下一个上下文。\n这些大概明白了，不过你说在创建执行上下文做的那些事儿，我还是有点迷糊，能再详细说说吗？\n那我们首先看点代码：\n// 例1 console.log(a); // 报错，a is not defined // 例2 console.","title":"JavaScript核心概念之执行上下文和栈"},{"content":" 看到这个是不是有一种想打人的感觉，垃圾 JavaScript，这特么都什么鬼，相信很多人不管是笔试还是面试，都被 JS 的类型转换难道过，相信认真看完我这篇文章，妈妈再也不用担心类型转换的问题了。\n原始值到原始值的转换 原始值转化为布尔值\n所有的假值(undefined、null、0、-0、NaN、””)会被转化为 false，其他都会被转为 true\n原始值转化为字符串 都相当于 原始值 + \u0026quot;\u0026quot;\n原始值转为数字\n布尔转数字：true -\u0026gt; 1, false -\u0026gt; 0 字符串转数字：以数字表示的字符串可以直接会转为字符串，如果字符串头尾有空格会忽略，但是空格在中间，转换结果就是 NaN。 +\u0026#34; 66\u0026#34; // 66 +\u0026#34; 6 7 \u0026#34; // NaN 原始值到对象的转换 null 和 undefined 转对象直接抛异常 原始值通过调用 String()、Number()、Boolean()构造函数，转换为他们各自的包装对象 对象到原始值的转换 对象转为布尔都为 true 对象到字符串 如果对象有 toString() 方法，就调用 toString() 方法。如果该方法返回原始值，就讲这个值转化为字符串。 如果对象没有 toString() 方法或者 该方法返回的不是原始值，就会调用该对象的 valueOf() 方法。如果存在就调用这个方法，如果返回值是原始值，就转化为字符串。 否则就报错 对象到数字 对象转化为数字做了跟对象转化为字符串做了想同的事儿，不同的是后者是先调用 valueOf 方法，如果调用失败或者返回不是原始值，就调用 toString 方法。 补充。一些常用内置对象 toString 方法和 valueOf 的转换规则 toString 相关 valueOf 相关 == 运算符如何进行类型转换 如果一个值是null，另一个值是undefined，则相等 如果一个是字符串，另一个值是数字，则把字符串转换成数字，进行比较 如果任意值是true，则把true转换成1再进行比较；如果任意值是false，则把false转换成0再进行比较 如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的 toString 或者 valueOf 方法。 js 核心内置类，会尝试 valueOf 先于 toString（可以理解为对象优先转换成数字）；例外的是 Date，Date 利用的是 toString 转换。非 js 核心的对象，通过自己的实现中定义的方法转换成原始值。 + 运算符如何进行类型转化 如果作为一元运算符就是转化为数字，常常用来将字符串转化为数字 +\u0026ldquo;2\u0026rdquo; // 2 2+false // 0 ```\n如果作为二元运算符就有两种转换方式 两边如果有字符串，另一边一会转化为字符串进行相加 如果没有字符串，两边都会转化为数字进行相加，对象也根据前面的方法转化为原始值数字。 如果其中的一个操作数是对象,则将对象转换成原始值，日期对象会通过 toString() 方法进行转换，其他对象通过 valueOf（）方法进行转换，但是大多数方法都是不具备可用的 valueOf() 方法，所以还是会通过 toString() 方法执行转换。 流程图如下： 实战分析 []+[] // \u0026quot;\u0026quot; _1. 首先运算符是 + 运算符而且很明显是二元运算符，并且有对象，所以选择最后一点，操作数是对象，将对象转换为原始值。 _2. 两边对象都是数组，左边的数组先调用 valueOf() 方法无果，然后去调用 toString(), 方法，在 toString() 的转化规则里面有『将数组转化为字符串，用逗号分隔』，由于没有其他元素，所以直接是空字符串 “”。 _3. 因为加号有一边是字符串了，所以另外一边也转为 字符串，所以两边都是空字符串 “”。 _4. 所以加起来也是空字符串 “”。\n(! + [] + [] + ![]).length // 9\n这个题我看球友在做作业的时候理解还是有点误差，所以再单独说一说。 _1. 首先我们会看到挺多一元运算符，「+」、「！」，对于一元运算符是右结合性，所以可以画出以下运算顺序。 _2. 对于·+[]，数组是会被转化为数字的而不是字符串，可见「+ 运算符如何进行类型转化」的第一条，所以经过第一步就会转化为 (!0 + [] + \u0026quot;false\u0026quot;).length _3. 第二步比较简单，0 转化为布尔值就是 false，所以经过第二步就转化为 (true + [] + \u0026quot;false\u0026quot;).length _4. 第三步中间的 []会转为空字符串，在「+ 运算符如何进行类型转化」第二条的第三点，对象会被转转化为原始值，就是空字符，所以经过第三步之后就会变成 (\u0026quot;true\u0026quot; + \u0026quot;false\u0026quot;).length _5. 第五步就比较简单啦，最终就是 \u0026quot;truefalse\u0026quot;.length // 9\n附录： 《JavaScript权威指南》中类型转换表格\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/105/","summary":"看到这个是不是有一种想打人的感觉，垃圾 JavaScript，这特么都什么鬼，相信很多人不管是笔试还是面试，都被 JS 的类型转换难道过，相信认真看完我这篇文章，妈妈再也不用担心类型转换的问题了。\n原始值到原始值的转换 原始值转化为布尔值\n所有的假值(undefined、null、0、-0、NaN、””)会被转化为 false，其他都会被转为 true\n原始值转化为字符串 都相当于 原始值 + \u0026quot;\u0026quot;\n原始值转为数字\n布尔转数字：true -\u0026gt; 1, false -\u0026gt; 0 字符串转数字：以数字表示的字符串可以直接会转为字符串，如果字符串头尾有空格会忽略，但是空格在中间，转换结果就是 NaN。 +\u0026#34; 66\u0026#34; // 66 +\u0026#34; 6 7 \u0026#34; // NaN 原始值到对象的转换 null 和 undefined 转对象直接抛异常 原始值通过调用 String()、Number()、Boolean()构造函数，转换为他们各自的包装对象 对象到原始值的转换 对象转为布尔都为 true 对象到字符串 如果对象有 toString() 方法，就调用 toString() 方法。如果该方法返回原始值，就讲这个值转化为字符串。 如果对象没有 toString() 方法或者 该方法返回的不是原始值，就会调用该对象的 valueOf() 方法。如果存在就调用这个方法，如果返回值是原始值，就转化为字符串。 否则就报错 对象到数字 对象转化为数字做了跟对象转化为字符串做了想同的事儿，不同的是后者是先调用 valueOf 方法，如果调用失败或者返回不是原始值，就调用 toString 方法。 补充。一些常用内置对象 toString 方法和 valueOf 的转换规则 toString 相关 valueOf 相关 == 运算符如何进行类型转换 如果一个值是null，另一个值是undefined，则相等 如果一个是字符串，另一个值是数字，则把字符串转换成数字，进行比较 如果任意值是true，则把true转换成1再进行比较；如果任意值是false，则把false转换成0再进行比较 如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的 toString 或者 valueOf 方法。 js 核心内置类，会尝试 valueOf 先于 toString（可以理解为对象优先转换成数字）；例外的是 Date，Date 利用的是 toString 转换。非 js 核心的对象，通过自己的实现中定义的方法转换成原始值。 + 运算符如何进行类型转化 如果作为一元运算符就是转化为数字，常常用来将字符串转化为数字 +\u0026ldquo;2\u0026rdquo; // 2 2+false // 0 ```","title":"JavaScript核心概念(1):类型转换"},{"content":"前言 最近在星球里群里都有小伙伴说道自己对未来的路比较迷茫，一旦闲下来就不知道自己改干啥，今天我这篇文章就是让你觉得一天给你 25 个小时你都不够用，觉得睡觉都是浪费时间。 今天我谈的就是关于【构建知识体系，形成自己解决问题的方法论】，这个话题以前我在给在校准备找工作的同学的几个建议这篇文章中谈到过，但是没有将如何去构建自己的知识体系，这次将深入这个话题进行探讨。\n什么是知识体系 无论是大到一个星系还是小至一个原子，其本质都是一个个的系统。 那我们如何来掌握这个系统呢？通过“框架”来简化对系统构成元素以及元素间有机联系。因此有目的地运用“框架”来思考、学习，能够让我们更全面、更快速、更深入地分析、解决问题，以及更高效地学习新知识和技能。\n简单来说，知识体系就是一个系统构成元素以及元素之间的有机联系的简化体现。\n知识体系的重要性 没有完整的个人知识体系框架，即使你在学习单个知识点的时候理解力和速度高于一般人，但你整体的学习效率依然会很低。原因如下：\n对知识的理解就不深。大部分知识点之间是有联系的，缺少了完整的知识体系框架，你就好似失去了知识间联系的地图，对知识的理解就不深。平时我们在遇到问题的时候不知道怎么解决，然后问了下大佬给你说用啥，然后怎么用之后，你就发现我知道这个知识点，但是没想到可以这么用。 比如以前刚去实习的时候，遇到一个跨域问题，因为后端的数据是早就稳定了的，我只是要去拿几个接口的数据来做点东西，那么我本地调试的时候由于域名是是 locahost，而后端是 xxx.duokan.com, 所以就会有跨域问题，当时我就问我老大我要用代理来解决这个问题吗?他就跟我说你加一条 host ，把 xxx.duokan.com 绑定到 127.0.0.1 就行了，因为我当时知道 host 这个东西，所以就 get 到他的点了，但是由于知识点没有成系统，是散的，就根本想不到 host 和跨域有关系。\n**陷入在被动学习当中。**没有完整的个人知识体系框架，你只能是碰到什么问题就被动地去学什么，零散而无系统，从而不自觉地陷入在了被动学习当中。这就跟我在文章的开头提到的小伙伴一样，刚开始还能被动学习，然后就不知道学什么了。 一旦你形成了知识体系，你就知道自己那些地方要补，那些地方暂时可以不补，就可以主动学习去查漏补缺，就不会再迷茫了，因为你会发现你有太多太多遗漏的东西，根本学不完。\n**知识整体积累的速度下降。**知识之间是相关联的，不同的人在经历同一段工作或上同一堂课时会因为知识体系框架的不同，从而导致了不同数量级的经验吸收。 知识体系的好处 知识体系 可以方便地 给出所学知识的 地图全貌。在学习过程中给人进度反馈。 梳理知识体系，可以提炼出知识的主干网络，方便知识的调用。 知识体系提供了可拓展性。新学知识可以有规律地添加在原有体系之中。 知识体系为知识的关联提供的指导，发掘知识点之间的关联，正是创新的核心。 把孤立的知识点关联起来，是避免遗忘的重要手段。 其实知识体系和解决问题的方法论是相辅相成的，在自己解决问题的时候，会用到知识体系的东西，知识体系的形成，也有部分是通过解决问题来添砖加瓦的。\n怎么构建自己的知识体系 对于构建知识体系和很多方法论差不多，收集、整理、输出（即思考过程）。\n**收集知识点。**现在是互联网很发达的时代，收集知识点，已经完全不是一个问题了，可以通过微信公众号、得到、视频网站、博客、社区等各种路径获取知识，你可以讲这些知识点收集起来后面进行整理，但是我提倡是先看再收藏，而不是收藏了等有空再去看，不然就会造成收藏栏里发现自己收藏了一大堆，然而由于太多就不知道看哪个，最后就不看了。 **整理知识。**整理知识是一个为输出做准备的，在整理的过程你已经有一定的思考了，会建立自己的知识分区，将你认为相似的知识点归为一类，慢慢你也会将你的知识库变得更加丰富。 **输出。**输出是来巩固知识的最佳方法，也许你通过自己的大脑想，觉得很简单，感觉自己会了，其实想通过头脑去想，去检验是否已经掌握了，对于绝大部分人来说都是不可能的，因为一般人的大脑都是无法深入到很多层以及思考全面，但是可以通过训练去让自己思考得越来越深入，越来越全面。 这话可能说得有点抽象，咱们举个例子来说，大家都知道围棋很难吧，难的是什么，下完每一步棋之后可能的结果太多了，而那些大师就是可以预测下别人下一步，甚至下好几步别人会下的棋子来推测自己下的这步棋下在哪里比较好，而新手是往往做不到的，而像柯洁这种20就拿世界冠军的，也许就是因为他对围棋的天赋，天生对围棋就有很好的大局观，加上自己努力。\n这上面只是谈到了为什么我们不能用大脑来检验自己掌握知识的程度。所以我们可以通过自己的嘴，来给别人讲明白；或者通过写文章站在读者的角度，把自己讲明白。只有能给别人讲明白的东西，才是你真正掌握的东西。\n通过画思维导图来把知识体系形象化。 选择思维导图的软件可以从知乎这个问答里面选择自己喜欢的，合适自己软件。有什么免费的思维导图软件可以推荐？ - 知乎 这是以前流传的一篇 WEB 前端工程师的一篇思维导图，也可以说是作者的知识体系，我在这里不评价好与不好，因为每个人的技术栈都不同，但是我们还可以针对这个进行细化。 比如我们针对我们前端重要的一块 JavaScript，就可以再进行细分， Javascript 需要掌握基本类型、函数、对象、内置对象、DOM、BOM等知识，然后函数要掌握闭包、作用域、this等，对象要掌握原型、new这些等等。\n我就不再扩展了，根据自己的知识形成一个知识体系，然后再解决问题的时候就很容易根据自己的知识体系来解决问题，比如可能你遇到了跨域的问题，你从你的大脑搜索整个知识体系的时候，就可以知道跨域有哪几种方法，然后每种方法的适用场景是什么。\n在形成自己的知识体系的过程中，你就知道自己对哪些知识了解，哪些知识不了解，然后你就会花时间去补充自己不了解的知识，渐渐完善自己的知识体系。\n在形成自己的知识体系之后，你面试就比较胸有成竹，兵来将挡水来土掩。\n你的知识体系就像一张网，面试的过程就是来检验你这张网漏洞有多大的过程，而学习的过程就是就像是给这张网空隙给编织细一点，你的最终目的就是使你这张网的空隙越来越小。\n一些小要求 需要有一颗爱学习的心。 需要做一个善于总结的人。 需要是一个有执行力的人，不然列了很多知识点，不去查漏补缺，没鸟用。 关注桃翁，关注前端桃园，有问题随时跟我交流。（最后一条纯属扯淡） ","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/104/","summary":"前言 最近在星球里群里都有小伙伴说道自己对未来的路比较迷茫，一旦闲下来就不知道自己改干啥，今天我这篇文章就是让你觉得一天给你 25 个小时你都不够用，觉得睡觉都是浪费时间。 今天我谈的就是关于【构建知识体系，形成自己解决问题的方法论】，这个话题以前我在给在校准备找工作的同学的几个建议这篇文章中谈到过，但是没有将如何去构建自己的知识体系，这次将深入这个话题进行探讨。\n什么是知识体系 无论是大到一个星系还是小至一个原子，其本质都是一个个的系统。 那我们如何来掌握这个系统呢？通过“框架”来简化对系统构成元素以及元素间有机联系。因此有目的地运用“框架”来思考、学习，能够让我们更全面、更快速、更深入地分析、解决问题，以及更高效地学习新知识和技能。\n简单来说，知识体系就是一个系统构成元素以及元素之间的有机联系的简化体现。\n知识体系的重要性 没有完整的个人知识体系框架，即使你在学习单个知识点的时候理解力和速度高于一般人，但你整体的学习效率依然会很低。原因如下：\n对知识的理解就不深。大部分知识点之间是有联系的，缺少了完整的知识体系框架，你就好似失去了知识间联系的地图，对知识的理解就不深。平时我们在遇到问题的时候不知道怎么解决，然后问了下大佬给你说用啥，然后怎么用之后，你就发现我知道这个知识点，但是没想到可以这么用。 比如以前刚去实习的时候，遇到一个跨域问题，因为后端的数据是早就稳定了的，我只是要去拿几个接口的数据来做点东西，那么我本地调试的时候由于域名是是 locahost，而后端是 xxx.duokan.com, 所以就会有跨域问题，当时我就问我老大我要用代理来解决这个问题吗?他就跟我说你加一条 host ，把 xxx.duokan.com 绑定到 127.0.0.1 就行了，因为我当时知道 host 这个东西，所以就 get 到他的点了，但是由于知识点没有成系统，是散的，就根本想不到 host 和跨域有关系。\n**陷入在被动学习当中。**没有完整的个人知识体系框架，你只能是碰到什么问题就被动地去学什么，零散而无系统，从而不自觉地陷入在了被动学习当中。这就跟我在文章的开头提到的小伙伴一样，刚开始还能被动学习，然后就不知道学什么了。 一旦你形成了知识体系，你就知道自己那些地方要补，那些地方暂时可以不补，就可以主动学习去查漏补缺，就不会再迷茫了，因为你会发现你有太多太多遗漏的东西，根本学不完。\n**知识整体积累的速度下降。**知识之间是相关联的，不同的人在经历同一段工作或上同一堂课时会因为知识体系框架的不同，从而导致了不同数量级的经验吸收。 知识体系的好处 知识体系 可以方便地 给出所学知识的 地图全貌。在学习过程中给人进度反馈。 梳理知识体系，可以提炼出知识的主干网络，方便知识的调用。 知识体系提供了可拓展性。新学知识可以有规律地添加在原有体系之中。 知识体系为知识的关联提供的指导，发掘知识点之间的关联，正是创新的核心。 把孤立的知识点关联起来，是避免遗忘的重要手段。 其实知识体系和解决问题的方法论是相辅相成的，在自己解决问题的时候，会用到知识体系的东西，知识体系的形成，也有部分是通过解决问题来添砖加瓦的。\n怎么构建自己的知识体系 对于构建知识体系和很多方法论差不多，收集、整理、输出（即思考过程）。\n**收集知识点。**现在是互联网很发达的时代，收集知识点，已经完全不是一个问题了，可以通过微信公众号、得到、视频网站、博客、社区等各种路径获取知识，你可以讲这些知识点收集起来后面进行整理，但是我提倡是先看再收藏，而不是收藏了等有空再去看，不然就会造成收藏栏里发现自己收藏了一大堆，然而由于太多就不知道看哪个，最后就不看了。 **整理知识。**整理知识是一个为输出做准备的，在整理的过程你已经有一定的思考了，会建立自己的知识分区，将你认为相似的知识点归为一类，慢慢你也会将你的知识库变得更加丰富。 **输出。**输出是来巩固知识的最佳方法，也许你通过自己的大脑想，觉得很简单，感觉自己会了，其实想通过头脑去想，去检验是否已经掌握了，对于绝大部分人来说都是不可能的，因为一般人的大脑都是无法深入到很多层以及思考全面，但是可以通过训练去让自己思考得越来越深入，越来越全面。 这话可能说得有点抽象，咱们举个例子来说，大家都知道围棋很难吧，难的是什么，下完每一步棋之后可能的结果太多了，而那些大师就是可以预测下别人下一步，甚至下好几步别人会下的棋子来推测自己下的这步棋下在哪里比较好，而新手是往往做不到的，而像柯洁这种20就拿世界冠军的，也许就是因为他对围棋的天赋，天生对围棋就有很好的大局观，加上自己努力。\n这上面只是谈到了为什么我们不能用大脑来检验自己掌握知识的程度。所以我们可以通过自己的嘴，来给别人讲明白；或者通过写文章站在读者的角度，把自己讲明白。只有能给别人讲明白的东西，才是你真正掌握的东西。\n通过画思维导图来把知识体系形象化。 选择思维导图的软件可以从知乎这个问答里面选择自己喜欢的，合适自己软件。有什么免费的思维导图软件可以推荐？ - 知乎 这是以前流传的一篇 WEB 前端工程师的一篇思维导图，也可以说是作者的知识体系，我在这里不评价好与不好，因为每个人的技术栈都不同，但是我们还可以针对这个进行细化。 比如我们针对我们前端重要的一块 JavaScript，就可以再进行细分， Javascript 需要掌握基本类型、函数、对象、内置对象、DOM、BOM等知识，然后函数要掌握闭包、作用域、this等，对象要掌握原型、new这些等等。\n我就不再扩展了，根据自己的知识形成一个知识体系，然后再解决问题的时候就很容易根据自己的知识体系来解决问题，比如可能你遇到了跨域的问题，你从你的大脑搜索整个知识体系的时候，就可以知道跨域有哪几种方法，然后每种方法的适用场景是什么。\n在形成自己的知识体系的过程中，你就知道自己对哪些知识了解，哪些知识不了解，然后你就会花时间去补充自己不了解的知识，渐渐完善自己的知识体系。\n在形成自己的知识体系之后，你面试就比较胸有成竹，兵来将挡水来土掩。\n你的知识体系就像一张网，面试的过程就是来检验你这张网漏洞有多大的过程，而学习的过程就是就像是给这张网空隙给编织细一点，你的最终目的就是使你这张网的空隙越来越小。\n一些小要求 需要有一颗爱学习的心。 需要做一个善于总结的人。 需要是一个有执行力的人，不然列了很多知识点，不去查漏补缺，没鸟用。 关注桃翁，关注前端桃园，有问题随时跟我交流。（最后一条纯属扯淡） ","title":"拥有自己的知识体系，形成自己解决问题的方法论"},{"content":" 如果玩抖音的同学，我相信对上面这个图片并不陌生，在六月份的时候疯狂刷这个，但是当时并没有任何感觉，直到我那毕业的那天，提起背包离开学校的那天，我才真正的感受到，我要离开学校了。\n自己已经不是一个学生了，熟悉的学校，熟悉的班级，熟悉的同学，熟悉的老师，这次，真的说再见了。\n还没来得及跟给我传授过知识老师，陪了我四年的大学同学，以及实验室的学弟学妹们好好的说再见，就提着行李，背着书包离开了学校。\n在走的那天，突然想到，那些给我传道受业解惑的老师，那些跟我一起学习上课的同学，那些跟我在实验室辛苦奋斗的都学弟学妹们，也许我们以后就见不到了，莫名的一股泪意席卷而来，包括我现在写这篇文章也是这样，这也行就是人与动物之间感情的差别吧。\n天下无不散之筵席，想给那些没有好好道别的人说，咱们有缘再见，以后我帮得上忙的随便找我。\n之所以在题目取【我的大学无憾了】，主要是因为三件事儿。\n**找到了一份满意的工作。**虽然我没能去得了我最想去的腾讯，也因为个人原因没有去实习了半年的小米，但是在现在的蘑菇街工作我还是挺开心，很满意这里的工作氛围以及人文环境。 在大学中找到了心爱的女朋友。 都说程序员比较宅，很难找到女朋友，还好我运气好，在毕业之前找到了心爱的她。 拿到驾照。 大学有时间真的建议把驾照考了，以后工作了时间成本很高。 夸夸自己 我在学习上说是一个学霸呢，但是自我感觉并没有怎么花时间去学习上课的内容，大多数时间都花在专业课上，准确的说是花在敲代码上。\n为啥又说是个学霸呢？因为拿的奖状还是挺多的，四年里，拿了两次甲等、一次乙等(跟甲等的最后一个绩点只差 0.1)，大四由于没课，只有一个实习，不知道老师咋打的分，后来没有拿到。\n然后在其他方面参加的比赛比较多，各种程序设计大赛，数据库设计大赛，以及优秀班干部等等，估计 20 多张奖状，最后毕业前还去申请了校级的优秀毕业生和市级的优秀毕业生，没想到都通过了，市级优秀毕业生咱们一个院也才 5 个名额，这个时候只想对自己说【优秀】。\n吐槽下自己 在这里想吐槽自己的主要是体重，总结下来就是【肥了】。\n刚入大学的时候我只有 114 斤，作为一个 174 的男生来说，那还是比较瘦的了，想想那个时候自己肚子稍微硬一下，还能看到几块肌肉呢，大一的时候比较闲，没事儿就出去大大篮球，然后对新事物比较好奇，到处跑啥的，运动的比较多。\n到了大二的时候，涨到了 122 左右，因为大二进了学院的创新实验室，从此没有了双休，没有正常的节假日，没有了没有课就是玩的时间。如果早上没有课 8 点 40 之前就得到实验室，晚上一直要干到 10 点 40 才能回寝室，每周要上六天班。每天三点一线，寝室、教室、实验室，周末休息的那天就想着要好好打打游戏，放松下，也没有出去玩，导致体重增加，肚子肥肉增多。\n到了大三同样也如此，绝大部分除了睡觉的时间都是在实验室，很少出去运动，只要在体育课的时候才能好好的运动，直到大三结束的那个暑假，已经 126 了，但是还是没有意识到问题的严重性，感觉还是很正常，也不胖。\n大三结束的那个暑假，我去小米实习了，虽然在北京消费很高，但是总是吃得很饱，几个玩得好的每周都要出去吃好的，结果越吃越胖，直到有一次去吃完火锅回来在旁边的称称了一下，把自己下了一跳，已经 135 了，那个时候才来北京两个月，竟然涨了 9 斤，准备开始减肥了，然而并没有坚持下来，但是尽量在注意，直到我实习半年再回学校 138 了。\n回到学校已经是大四了嘛，就在学校做毕业设计，在学校吃的稍微差点，我也尽量控制自己的食量，现在以及只有 132 了。\n结语 希望自己离开了社会，该变的要变，不该变的别变。比如不要忘记初心而随波逐流，既然选择了做程序员这个行业，目前这几年就应该有工匠精神，把技术专研深，专研透，以后看自己的意愿或者社会的发展再看应该干什么。\n要该变的是该变自己还是学生的身份，作为一个工作人，应该对工作精益求精，尽量不要犯错误，大学的时候犯点错误还能接受，在公司里犯了错可是要付很大的代价的。\n最后感谢大学陪我走过的这些人，可能有些人只是我人生中的过客，但是也给我的人生增添了一份色彩，感谢你们。\n那些在大学里面给过我帮助的人，我会永远记住的，【滴水之恩，涌泉相报】。\n我希望今天我以学校为荣，以后学校以我为荣。\n致我的大学以及青春。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/100/","summary":"如果玩抖音的同学，我相信对上面这个图片并不陌生，在六月份的时候疯狂刷这个，但是当时并没有任何感觉，直到我那毕业的那天，提起背包离开学校的那天，我才真正的感受到，我要离开学校了。\n自己已经不是一个学生了，熟悉的学校，熟悉的班级，熟悉的同学，熟悉的老师，这次，真的说再见了。\n还没来得及跟给我传授过知识老师，陪了我四年的大学同学，以及实验室的学弟学妹们好好的说再见，就提着行李，背着书包离开了学校。\n在走的那天，突然想到，那些给我传道受业解惑的老师，那些跟我一起学习上课的同学，那些跟我在实验室辛苦奋斗的都学弟学妹们，也许我们以后就见不到了，莫名的一股泪意席卷而来，包括我现在写这篇文章也是这样，这也行就是人与动物之间感情的差别吧。\n天下无不散之筵席，想给那些没有好好道别的人说，咱们有缘再见，以后我帮得上忙的随便找我。\n之所以在题目取【我的大学无憾了】，主要是因为三件事儿。\n**找到了一份满意的工作。**虽然我没能去得了我最想去的腾讯，也因为个人原因没有去实习了半年的小米，但是在现在的蘑菇街工作我还是挺开心，很满意这里的工作氛围以及人文环境。 在大学中找到了心爱的女朋友。 都说程序员比较宅，很难找到女朋友，还好我运气好，在毕业之前找到了心爱的她。 拿到驾照。 大学有时间真的建议把驾照考了，以后工作了时间成本很高。 夸夸自己 我在学习上说是一个学霸呢，但是自我感觉并没有怎么花时间去学习上课的内容，大多数时间都花在专业课上，准确的说是花在敲代码上。\n为啥又说是个学霸呢？因为拿的奖状还是挺多的，四年里，拿了两次甲等、一次乙等(跟甲等的最后一个绩点只差 0.1)，大四由于没课，只有一个实习，不知道老师咋打的分，后来没有拿到。\n然后在其他方面参加的比赛比较多，各种程序设计大赛，数据库设计大赛，以及优秀班干部等等，估计 20 多张奖状，最后毕业前还去申请了校级的优秀毕业生和市级的优秀毕业生，没想到都通过了，市级优秀毕业生咱们一个院也才 5 个名额，这个时候只想对自己说【优秀】。\n吐槽下自己 在这里想吐槽自己的主要是体重，总结下来就是【肥了】。\n刚入大学的时候我只有 114 斤，作为一个 174 的男生来说，那还是比较瘦的了，想想那个时候自己肚子稍微硬一下，还能看到几块肌肉呢，大一的时候比较闲，没事儿就出去大大篮球，然后对新事物比较好奇，到处跑啥的，运动的比较多。\n到了大二的时候，涨到了 122 左右，因为大二进了学院的创新实验室，从此没有了双休，没有正常的节假日，没有了没有课就是玩的时间。如果早上没有课 8 点 40 之前就得到实验室，晚上一直要干到 10 点 40 才能回寝室，每周要上六天班。每天三点一线，寝室、教室、实验室，周末休息的那天就想着要好好打打游戏，放松下，也没有出去玩，导致体重增加，肚子肥肉增多。\n到了大三同样也如此，绝大部分除了睡觉的时间都是在实验室，很少出去运动，只要在体育课的时候才能好好的运动，直到大三结束的那个暑假，已经 126 了，但是还是没有意识到问题的严重性，感觉还是很正常，也不胖。\n大三结束的那个暑假，我去小米实习了，虽然在北京消费很高，但是总是吃得很饱，几个玩得好的每周都要出去吃好的，结果越吃越胖，直到有一次去吃完火锅回来在旁边的称称了一下，把自己下了一跳，已经 135 了，那个时候才来北京两个月，竟然涨了 9 斤，准备开始减肥了，然而并没有坚持下来，但是尽量在注意，直到我实习半年再回学校 138 了。\n回到学校已经是大四了嘛，就在学校做毕业设计，在学校吃的稍微差点，我也尽量控制自己的食量，现在以及只有 132 了。\n结语 希望自己离开了社会，该变的要变，不该变的别变。比如不要忘记初心而随波逐流，既然选择了做程序员这个行业，目前这几年就应该有工匠精神，把技术专研深，专研透，以后看自己的意愿或者社会的发展再看应该干什么。\n要该变的是该变自己还是学生的身份，作为一个工作人，应该对工作精益求精，尽量不要犯错误，大学的时候犯点错误还能接受，在公司里犯了错可是要付很大的代价的。\n最后感谢大学陪我走过的这些人，可能有些人只是我人生中的过客，但是也给我的人生增添了一份色彩，感谢你们。\n那些在大学里面给过我帮助的人，我会永远记住的，【滴水之恩，涌泉相报】。\n我希望今天我以学校为荣，以后学校以我为荣。\n致我的大学以及青春。","title":"毕业记—我的大学无憾了"},{"content":"看到这个标题相信很多人就要开始跟我争论了，PHP 才是最好的语言，那就请原谅下，你说是就是，我们来看看就知道了。\n有一条 Atwood 定律：any application that can be written in JavaScript, will eventually be written in JavaScript\n翻译一下就是：任何可以用 JavaScript 来写的应用，最终都将用 JavaScript 来写\n要是没看到过这句话的人可能又要开始说了，Atwood 是谁，他说最终会就会啊。\n那我们来了解一下他，说那些多少年的编程经验啊，这些都没啥用，只要说一点，就能知道这个人也不是等闲之辈，他是 stack overflow 的联合创始人，还是牛逼吧，如果你说你不知道 stackoverflow，那么对不起，那么我们不能做朋友了（开玩笑的，不知道的去了解下吧）\nJavascript 可以做什么 1. Web 前端 相信这个这个是毫无疑问的，在 Web 前端的地位目前是没有任何语言能撼动它的霸主地位。 2. 后端 Nodejs Node.js 是一个 Javascript 运行环境(runtime environment)，发布于2009年5月，由Ryan Dahl 开发，实质是对 Chrome V8 引擎进行了封装。Node.js 对一些特殊用例进行优化，提供替代的 API，使得V8在非浏览器环境下运行得更好。\n使 Javascript 走向了服务端，这使得 Web 应用仅用一种语言即可完成。\n3. 桌面应用 代表 Electron ，还有 Node-webkit 、heX\nElectron 是由 Github 开发，用 HTML，CSS 和 JavaScript 来构建跨平台桌面应用程序的一个开源库。 Electron 通过将 Chromium 和 Node.js 合并到同一个运行时环境中，并将其打包为 Mac，Windows 和 Linux 系统下的应用来实现这一目的。\n4. 移动端应用 代表 React Native，Weex 生态还不完善\nReact Native (简称RN) 是 Facebook 于 2015 年 4 月开源的跨平台移动应用开发框架，是 Facebook 早先开源的 JS 框架 React 在原生移动应用平台的衍生产物，目前支持 iOS 和安卓两大平台。RN 使用 Javascript 语言，类似于 HTML 的 JSX，以及CSS 来开发移动应用，因此熟悉 Web 前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。做到了一套代码可以运行在 Web、安卓和 IOS 上。\n5. 游戏 代表 Cocos2d-js 和 Unity 3D，还有 Pomelo、Bearcat\n世界上最流行的 2D 游戏引擎之一 Cocos2d 和最流行的 3D 游戏引擎之一均支持 JS 开发游戏。\nCocos2d 主要开发中小型的 2D 游戏而 Unity 3D 主要用于开发大型的 3D 游戏。\nCocos2d-JS Cocos2d-JS 是跨全平台的游戏引擎，采用原生 JavaScript 语言，可发布到包括 Web 平台，iOS，Android，Windows Phone8，Mac，Windows 等平台，引擎基于MIT 开源协议，完全开源，免费，易学易用，拥有活跃的社区支持。Cocos2d-JS 让2D 的游戏编程门槛更低，使用更加容易和高效。和其他类似游戏框架相比，它定义了更加清晰的2D游戏编程的基本组件，采用易学易用的 API 设计，并采用全球领先、具备原生性能的脚本绑定解决方案实现游戏的跨原生平台发布，开发效率更高，使用上最简单。\nUnity 3D Unity 3D 可以用 javascript 开发，也可以用 C# 开发。\n6. 物联网 代表 Cylon.js，还有 IoT.js\nCylon.js 是一个为机器人学和物联网服务的开发的 Javascript 框架。它支持 19 种不同硬件软件平台。我们的目标，是将开发软件装置变得和开发网页一样简单。\n这是 2017 年 Github 最流行的 15 种语言排行榜，可以看到 Javascript 的项目数是第二名的两倍，Javascript 之所以这么流行，我想原因之一也是因为这门语言所涉及的范围太广了。\n看到这里，我只想说 将你擅长的语言编译为JavaScript 看到 Javascript 无孔不入，啥都能做，是不是在担心现在不会怎么办，不要担心，现在有很多工具帮你将你擅长的语言编译成 Javascript\n将 Java 编译成 Javascript BicaVM：一个使用JavaScript实现的JVM，可以运行60%的Java字节码\nCeylon：一个可编译为JavaScript的、模块化的、静态类型JVM语言\nDoppio：一个使用 Coffeescript 实现的JVM，使得 Java 程序可以运行在任何 JavaScript 引擎上\n将 C/C++ 代码编译为 JavaScript C/C++ 如今也可以用来编写Web应用程序，同样可以将它们编译为 JavaScript。一些工具如下。\nEmscripten：Mozilla 开发的 LLVM 后端，可以将任何通过 LLVM 前端（比如 C/C++ Clang）生成的 LLVMIR 中间码编译成 JavaScript 代码。\nmala：可以将 vala 代码（vala代码在编译时，首先会编译为 C 代码）编译为 JavaScript\nMandreel：可以将 C++ 和 Objective-C 代码编译为高度优化的JavaScript源码\nClue：一个 C 语言编译器，可以将 C 语言代码编译为高质量的 Lua、Javascript 或 Perl 代码。\n将Python代码编译为JavaScript 可以使用如下工具将 Python 代码编译为 JavaScript 代码。\nBrython：用于替换网页上的 JavaScript 代码，允许使用 Python 来编写脚本，并直接在网页上执行\nPYXC-PJ：可以将 Python 转换为JavaScript，并会产生一个行/列号映射文件\nPyjaco：可以将 Python 转换为 JavaScript\nPyjamas：Python to JS转换器\nPyjs：Python to JS转换器\n将Ruby代码编译为JavaScript 在Ruby领域，有一个使用JavaScript实现的Ruby标准库—— RubyJS，它实现了Ruby中的所有方法，如Array、Numbers、Time等。Ruby之父松本行弘称“如果我必须编写JavaScript代码，我会使用RubyJS”。\n另外，你也可以使用如下工具将Ruby代码编译为JavaScript代码。\n8ball：一个可以将Ruby（或Ruby子集）的源码转换为JavaScript源码的编译器\nColdRuby：一个Ruby 1.9 MRI字节码编译器和JS运行时，包括一个C++运行时以及用于本地执行的V8引擎\nHotRuby：可以在浏览器内部或Flash平台上运行由YARV编译的Ruby操作码\nOpal： 一个Ruby to JavaScript编译器，可用于任何JS环境\nrb2js：一个Ruby to JavaScript编译器\nRed：允许你以 Ruby 的方式编写代码，然后以 JavaScript 的方式运行代码\n将 .NET 代码编译为 JavaScript 你可以使用如下工具将 C# 、.NET 代码编译为 JavaScript 代码。\nBlade：一个 Visual Studio 扩展，可以将 C# 代码转换为 JavaScript\njsc：可将 .NET 程序重新编译为 JavaScript、ActionScript、PHP 或 Java 程序\nJSIL：可将MSIL（.NET字节码）转换为 JavaScript\nSaltarelle：可将 C# 代码编译为 Javascript\nSharpKit（商业工具）：可将 C# 代码编译为 Javascript\nScript#： 可将 C# 代码编译为 Javascript\n可能这篇文章被吐槽的比较多，特别是标题，我只想说，你说的都对，我只是个标题党。\n每种语言都有自己的适用场景，没有任何一种语言能啥都做得好，根据自己的需要选择就行，我这里知识做一个类似科普，万万没想到 Javascript 这么强大。\n下面是我公众号，欢迎来辩\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/95/","summary":"看到这个标题相信很多人就要开始跟我争论了，PHP 才是最好的语言，那就请原谅下，你说是就是，我们来看看就知道了。\n有一条 Atwood 定律：any application that can be written in JavaScript, will eventually be written in JavaScript\n翻译一下就是：任何可以用 JavaScript 来写的应用，最终都将用 JavaScript 来写\n要是没看到过这句话的人可能又要开始说了，Atwood 是谁，他说最终会就会啊。\n那我们来了解一下他，说那些多少年的编程经验啊，这些都没啥用，只要说一点，就能知道这个人也不是等闲之辈，他是 stack overflow 的联合创始人，还是牛逼吧，如果你说你不知道 stackoverflow，那么对不起，那么我们不能做朋友了（开玩笑的，不知道的去了解下吧）\nJavascript 可以做什么 1. Web 前端 相信这个这个是毫无疑问的，在 Web 前端的地位目前是没有任何语言能撼动它的霸主地位。 2. 后端 Nodejs Node.js 是一个 Javascript 运行环境(runtime environment)，发布于2009年5月，由Ryan Dahl 开发，实质是对 Chrome V8 引擎进行了封装。Node.js 对一些特殊用例进行优化，提供替代的 API，使得V8在非浏览器环境下运行得更好。\n使 Javascript 走向了服务端，这使得 Web 应用仅用一种语言即可完成。\n3. 桌面应用 代表 Electron ，还有 Node-webkit 、heX\nElectron 是由 Github 开发，用 HTML，CSS 和 JavaScript 来构建跨平台桌面应用程序的一个开源库。 Electron 通过将 Chromium 和 Node.","title":"Javascript 是最好的语言，不服来辩"},{"content":" 了解 vim 养成 git 规范 学深比学广更重要 拥有自己的知识体系，形成解决问题的方法论 了解 vim Vim 被誉为\u0026quot;编辑器之神\u0026quot;，这可不是虚的。\n在我用了 vim 半年之后，我建议我身边的每一位程序员都去学习 vim 。\n因为一旦你学会了 vim 的操作，你就像中了毒一样，你会讨厌鼠标，讨厌在你敲着敲着键盘，突然又要去移动光标，因为把手从键盘移动到鼠标上的时间远远大于手指在键盘按键的切换。\n而且你会希望在所有的编辑器上都装有 vim 插件，不管是 vscode，还是 idea，还是 emacs；不管是自己的电脑还是别人的电脑；不管是敲代码的编辑器还是用来看网页的浏览器。\n还好，所希望的都有，每一个可以装插件的编辑器都有 vim 插件，甚至浏览器也有 vimum。\n当你真正习惯上了 vim 以后，你会迫不及待的想要一个机械键盘，因为你敲代码大部分时间都用在了键盘上，鼠标已经不再那么重要了。\n机械键盘推荐红轴，青轴和茶轴虽然自己敲着很舒服，手感很好，但是比较影响其他人，键盘声太吵了，黑轴就不考虑了，码字太累了，不适合程序员。\n我个人用过青轴和红轴，青轴给我的感觉就是码代码是一颗一颗的，听着那声音自己觉得很舒服，敲代码很有感觉。\n而红轴给我的感觉就是敲代码的时候你会忘记你手上的键盘，给我一种手、键盘合一的感觉，把精力完全集中在码代码上，感受不到敲键盘的感觉。\n最后说的就是先学 vim 的基本操作，然后装个插件在你现在的编辑器上练习就行了，不需要直接用 vim 编辑器。\n因为你直接用 vim 编辑器，作为一个新手，不会配置插件，快捷键等，没有提示，没有高亮。你在写项目的时候会很痛苦，你就用你熟悉的编辑器高亮，代码提示这些是你以前搞好了的，所以实际应用起来难度小很多。\n为了推荐更多人程序员学习 vim ，我还自己写了一篇入门文章，有兴趣的可以看看。\n我周围的人，只要是用 vim 敲过代码的，从没有人说过用 vim 敲代码不好用而放弃用的，只会对 vim 爱得越来越深。\nGit 规范 Git 作为我认为最优秀的版本管理工具，那是程序员的利器，必须用得游刃有余。\n而我今天要说的不是怎么用好 git，如果需要可以留言给我，我后面写一篇或者一个系列。\n我想说的是规范，不要以为 commit 随便写就行了，其实 commit 的规范程度一部分体现了你这个人做事的态度，是否端正，严谨。\n我拿我在 某米工作的时候举个例子，我有个朋友那组的有个学姐，她的 commit 很随意，完全不能体现她提交代码的内容，比如，哈哈；放假了，好开心；bug；也不说是什么 bug，导致我那个同学根本不知道她提交了什么代码。\n也不知道她做了那些事儿，在一个团队中，这是一件很蛋疼的事儿。\n特别要是老大或者同事想做 review 的时候，看到这么糟糕的 commit 定会对你的印象大打折扣。\n如果你是个实习生，估计就不容易转正了，因为会觉得你是一个很随便的人。\n我平常所用的规范来自于阮老师的规范。 链接： http://www.ruanyifeng.com/blog/2016-01-commit_message_change_log.html\n深度比广度重要 现在还在学校的同学，可能经常听学长们这么说，在面试的时候既要考你的深度，也要考你的广度，所谓深度简单点说就是对某个知识点的掌握程度，而广度就是你知道多少个知识点。\n举个例子，也许你会经常听到那些面试过的人回来这么说，那个面试官一直抓住一个问题不放，知道他打不出来为止，这就是在探究掌握的深度。\n然后也会有这种问题，你会什么什么吗？你了解什么什么？你用过什么什么？这就是在看你的广度。\n所以一些在校学生就不知道自己应该去扩展自己的宽度，应该去学新知识，还是挖掘深度，再去研究以前的知识。\n我也面试过不少大厂，也拿了几个 offer，以及自己实习的时候跟一些工作多年的老司机谈过话。\n最后给出的答案是深度比广度重要。\n我来以我的角度谈谈为什么深度比广度重要。\n不知道你身边有没有这样的事儿发生，有个人（A 同学）拿到了一个好点的 offer，但和他一起的（B 同学）可能你觉得技术比他还厉害的没有拿到，然后你问那个拿到 offer 的同学，他说他是运气好。\n分析一下这个事儿，会发现，其实有可能确实运气原因，比如\n他们俩不是同一个面试官，然后导致两个面试官问的题不同，以及面试官的判断标准不同。\n他们俩是同一个面试官，但是 A 同学和 B 同学的技术不同，A 同学技术栈跟面试官的技术栈重合性比较多，因为经统计，那些面试官更喜欢找跟自己更相似的人，因为面试官觉得自己比较优秀，跟他相似度越高，会认为这个面试者也比较优秀。\n前面这两种基于运气的情况下，当然肯定 A 同学有实力的，基础不扎实，运气来了也抓不住。\n那我们怎么才能让运气来了就能抓住呢？\n我的建议就是先深度再广度，深度可以体现一个人对知识「打破砂锅问到底」的精神，，对于不知道的问题喜欢探索，也许你就精通了一门框架（前端比如 React），对于其他框架只是了解，但是这样也比熟练使用好几个框架面试成功几率大得多，因为如果你遇到 React 技术栈的面试官，你是大概率能过的。对于熟练使用好几个框架而不精通的，就是这种，面试官问你会什么什么吗？答，我会啊，然后问深一点就不知道了，这种过的几率就要小很多。\n所以为了运气来了的时候你就能抓住，好好挖掘你的深度很重要。\n如果你在考虑我是应该把以前的东西巩固一下，还是该去学新知识，你仔细思考一下，你对以前熟悉的知识深度够不够，够了再去学新知识，不要啥都会，被面试官问的时候，啥都不会（这是我昨天晚上跟我们班一个培训出来的同学聊的时候的出来的，他说培训的时候学了很多东西，然后我一问他框架原理，都答不上来，得出的结论就是只会用 API）。\n然后我说的是深度比广度更重要对于在校生来说，而不是广度不重要，给你说这个的目的是在你不知道应该学新东西，还是巩固以前知识的建议。\n拥有自己的知识体系，形成解决问题的方法论 巩固基础，拥有自己的知识体系，形成解决问题的方法论，这个要求是我去小米实习我老大第一周给我说的东西。\n当时我其实很不理解，所谓的知识体系是什么，还要谈到方法论这种东西，感觉一脸懵逼，经过我这么久的思考实践，我谈谈我的理解。\n其实知识体系和解决问题的方法论是相辅相成的，在自己解决问题的时候，会用到知识体系的东西，知识体系的形成，也有部分是通过解决问题来添砖加瓦的。\n什么是知识体系呢？\n可以说是一个思维导图，这个思维导图就是你所掌握的知识的一个汇总，或者没掌握，你觉得需要应该掌握的知识。比如作为一个前端工程师，你应该会 HTML、CSS、Javascript、前端框架、HTTP 相关知识、web 安全相关知识等等。\n关于 Javascript 需要掌握基本类型、函数、对象、内置对象、等知识，\n然后函数要掌握闭包、作用域、this等，对象要掌握原型、new这些等等。\n我就不再扩展了，根据自己的知识形成一个知识体系，然后再解决问题的时候就很容易根据自己的知识体系来解决问题，比如可能你遇到了跨域的问题，你从你的大脑搜索整个知识体系的时候，就可以知道跨域有哪几种方法，然后每种方法的适用场景是什么。\n在形成自己的知识体系的过程中，你就知道自己对哪些知识了解，哪些知识不了解，然后你就会花时间去补充自己不了解的知识，渐渐完善自己的知识体系。\n在形成自己的知识体系之后，你面试就比较胸有成竹，兵来将挡水来土掩。\n你的知识体系就像一张网，面试的过程就是来检验你这张网漏洞有多大的过程，而学习的过程就是就像是给这张网空隙给编织细一点，你的最终目的就是使你这张网的空隙越来越小。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/91/","summary":"了解 vim 养成 git 规范 学深比学广更重要 拥有自己的知识体系，形成解决问题的方法论 了解 vim Vim 被誉为\u0026quot;编辑器之神\u0026quot;，这可不是虚的。\n在我用了 vim 半年之后，我建议我身边的每一位程序员都去学习 vim 。\n因为一旦你学会了 vim 的操作，你就像中了毒一样，你会讨厌鼠标，讨厌在你敲着敲着键盘，突然又要去移动光标，因为把手从键盘移动到鼠标上的时间远远大于手指在键盘按键的切换。\n而且你会希望在所有的编辑器上都装有 vim 插件，不管是 vscode，还是 idea，还是 emacs；不管是自己的电脑还是别人的电脑；不管是敲代码的编辑器还是用来看网页的浏览器。\n还好，所希望的都有，每一个可以装插件的编辑器都有 vim 插件，甚至浏览器也有 vimum。\n当你真正习惯上了 vim 以后，你会迫不及待的想要一个机械键盘，因为你敲代码大部分时间都用在了键盘上，鼠标已经不再那么重要了。\n机械键盘推荐红轴，青轴和茶轴虽然自己敲着很舒服，手感很好，但是比较影响其他人，键盘声太吵了，黑轴就不考虑了，码字太累了，不适合程序员。\n我个人用过青轴和红轴，青轴给我的感觉就是码代码是一颗一颗的，听着那声音自己觉得很舒服，敲代码很有感觉。\n而红轴给我的感觉就是敲代码的时候你会忘记你手上的键盘，给我一种手、键盘合一的感觉，把精力完全集中在码代码上，感受不到敲键盘的感觉。\n最后说的就是先学 vim 的基本操作，然后装个插件在你现在的编辑器上练习就行了，不需要直接用 vim 编辑器。\n因为你直接用 vim 编辑器，作为一个新手，不会配置插件，快捷键等，没有提示，没有高亮。你在写项目的时候会很痛苦，你就用你熟悉的编辑器高亮，代码提示这些是你以前搞好了的，所以实际应用起来难度小很多。\n为了推荐更多人程序员学习 vim ，我还自己写了一篇入门文章，有兴趣的可以看看。\n我周围的人，只要是用 vim 敲过代码的，从没有人说过用 vim 敲代码不好用而放弃用的，只会对 vim 爱得越来越深。\nGit 规范 Git 作为我认为最优秀的版本管理工具，那是程序员的利器，必须用得游刃有余。\n而我今天要说的不是怎么用好 git，如果需要可以留言给我，我后面写一篇或者一个系列。\n我想说的是规范，不要以为 commit 随便写就行了，其实 commit 的规范程度一部分体现了你这个人做事的态度，是否端正，严谨。\n我拿我在 某米工作的时候举个例子，我有个朋友那组的有个学姐，她的 commit 很随意，完全不能体现她提交代码的内容，比如，哈哈；放假了，好开心；bug；也不说是什么 bug，导致我那个同学根本不知道她提交了什么代码。","title":"给在校准备找工作的同学的几个建议"},{"content":"简介 何为模块 一个模块只不过是一个写在文件中的 JavaScript 代码块。\n模块中的函数或变量不可用，除非模块文件导出它们。\n简单地说，这些模块可以帮助你在你的模块中编写代码，并且只公开应该被你的代码的其他部分访问的代码部分。\n为什么要使用模块 增加可维护性：由于每个模块都是独立的，每个人写的代码是不会相互影响的，在维护代码的时候很好排查是哪个模块出错。 可复用性：在日常的开发中，特别是大点的项目，代码的可复用性就更重要了，也许你会用复制粘贴的形式，但是直接一个 import 命令就可以搞定，岂不快哉。 避免命名污染：在 javascript 脚本中，所有的 js 文件的顶级作用域创建的变量，会被添加到共享的全局作用域，这就会导致不同的人开发的代码可能会有相同的变量名，导致变量名污染。 如何使用 导出模块 导出模块所用的命令是 export。\n前面也提到一个模块就是一个 javascript 文件，在这个模块中定义的变量，外部是无法获取到的，只有通过 export 导出的变量其他模块才可以用\n最简单的导出方式就是在声明的变量、函数、类前面加一个 export\n// export1.js // 导出变量 export let name = \u0026#39;桃翁\u0026#39;; // 导出函数 export function print() { console.log(\u0026#34;欢迎关注公众号：前端桃园\u0026#34;); } // 导出类 export class Person { constructor(name) { this.name = name; } } // 私有函数 function privateFunction () { console.log(\u0026#39;我是私有函数，外部访问不了我\u0026#39;); } 注意：\n被导出的函数或者类，都必须要有名称，意思就是说不能用这种方式导出匿名函数或者匿名类。 privateFunction 函数，没有加 export 命令，被当做这个模块的私有变量，其他模块是访问不到的。 除了上面那种导出方式，还有另外一种\n// export2.js // 导出变量 let name = \u0026#39;桃翁\u0026#39;； // 导出函数 function print() { return \u0026#39;欢迎关注公众号：前端桃园\u0026#39;; } // 导出类 class Person { constructor(newName) { this.name = newName; } } // 私有函数 function privateFunction () { return \u0026#39;我是私有函数，外部访问不了我\u0026#39;; } export { name, print, Person } 上面这种写法导入一组变量，与 export1.js 是等价的。\n导入模块 导入的模块可以理解为是生产者（或者服务的提供者），而使用导入的模块的模块就是消费者。\n导入模块的命令是 import, import 的基本形式如下：\nimport { var1, var2 } from \u0026#39;./example.js\u0026#39; import 语句包含两部分：一是导入需要的标识符，二是模块的来源。\n注意：浏览器中模块来源要以「/」或者 「./」 或者 「../」开头 或者 url 形式，不然会报错。\n例如我们导入 export1.js 模块，可以这么导入\n// import1.js import { name, print, Person } from \u0026#39;./export1.js\u0026#39;; console.log(name); // 桃翁 console.log(print()); // 欢迎关注公众号：前端桃园 // 报错, 不能定义相同名字变量 let name = 2333; // 报错，不能重新赋值 name = \u0026#34;小猪\u0026#34;; 可以看到导入绑定(这里不理解绑定，文章后面会解释)时，形式类似于对象解构，但实际上并无关联。\n当导入绑定的时候，绑定类似于使用了 const 定义，意味着不能定义相同的变量名，但是没有暂时性死区特性(但是在 深入理解ES6 这本书里面说是有暂时性死区限制，我在 chrome 上测试了的，读者希望也去试下，到底受不受限制)。\nlet name = 2333; 上面这行代码会报错。\n命名空间导入 这种导入方式是把整个生产者模块当做单一对象导入，所有的导出被当做对象的属性。\n// import2.js import * as namespace from \u0026#39;./export1.js\u0026#39; console.log(namespace.name); // 桃翁 console.log(namespace.print()); // 欢迎关注公众号：前端桃园 重命名导入导出 有时候你并不想导出变量的原名称，需要重新命名,这个时候只需要使用 as 关键字来制定新的名字即可。\n重命名导出 // export3.js function print() { return \u0026#39;欢迎关注公众号：前端桃园\u0026#39;; } export { print as advertising } 导重命名入 拿上面导出的举例子\n// import3.js import { advertising as print } from \u0026#39;./export3.js\u0026#39; console.log(typeof advertising); // \u0026#34;undefined\u0026#34; console.log(print()); // 欢迎关注公众号：前端桃园 此代码导入 advertising 函数并重命名为了 print ，这意味着此模块中 advertising 标识符不存在了。\ndefault 关键字 default 关键字是用来做默认导入导出的。\n默认导出 // defaultExport.js // 第一种默认导出方式 export default function print() { return \u0026#39;欢迎关注公众号：前端桃园\u0026#39;; } // 第二种默认导出方式 function print() { return \u0026#39;欢迎关注公众号：前端桃园\u0026#39;; } export default print; // 第三种默认导出方式 function print() { return \u0026#39;欢迎关注公众号：前端桃园\u0026#39;; } export { print as default } default 这个关键字在 JS 中具有特殊含义，既可以作为同命名导出，又标明了模块需要使用默认值。\n注意： 一个模块中只能有一个默认导出。\n默认导入 默认导入和一般的导入不同之处就是不需要写大括号了，看起来更简洁。\n把上面 defaultExport.js 模块导出的作为例子\nimport print from \u0026#39;./defaultExport.js\u0026#39; console.log(print()); // 欢迎关注公众号：前端桃园 那如果既有默认的又有非默认的怎么导入呢？看例子就明白了\n// defaultImport1.js let name = \u0026#39;桃翁\u0026#39;; function print() { return \u0026#39;欢迎关注公众号：前端桃园\u0026#39;; } export { name, print as default } // defaultImport2.js import print, { name } from \u0026#39;./defaultImport1.js\u0026#39; console.log(print()); // 欢迎关注公众号：前端桃园 console.log(name); // 桃翁 混合导入需要把默认导入的名称放在最前面，然后用逗号和后面非默认导出的分割开。\n思考了很久是否应该加上进阶内容，本来是想写入门级系列的，但是想了想，还是都写进来吧，入门的看入门前面基础，深入理解的看进阶。\n进阶 进阶部分主要介绍 模块的几个特性\n静态执行 动态关联 模块不会重复执行 静态执行 所谓静态执行其实就是在编译阶段就需要确定模块的依赖关系，那么就会出现 import 命令会优先于模块其他内容的执行，会提前到编译阶段执行。\n// static1.js console.log(\u0026#39;佩奇\u0026#39;); import { nouse } from \u0026#39;./static2.js\u0026#39; // static2.js export function nouse() { return \u0026#39;我是不需要的\u0026#39;; } console.log(\u0026#39;小猪\u0026#39;); 可以看到最后输出的应该是「小猪」先输出，而「佩奇」后输出，可以得出虽然 static2.js 在后面引入，但是会被提升到模块的最前面先执行。\n这也是我前面所说的不受暂时性死区原因之一，在这里可以写一个例子试试：\n// static3.js console.log(nouse()); import { nouse } from \u0026#39;./static2.js\u0026#39; // 结果： // 小猪 // 我是不需要的 经检验确实是可以在 import 之前使用导入的绑定。\n静态执行还会导致一个问题，那就是不能动态导入模块。\n// 报错 if (flag) { import { nouse } from \u0026#39;./static3.js\u0026#39; } // 报错 import { \u0026#39;no\u0026#39; + \u0026#39;use\u0026#39; } from \u0026#39;./static3.js\u0026#39; 因为 import 是静态执行的，所以在静态(词法)分析阶段，是没法得到表达式或者变量的值的。\n但是为了解决这个问题，因为了 import() 这个函数，这个算扩展内容吧，写太多了我怕没人看完了，后面会有扩展阅读链接。\n动态关联 所谓的动态关联，其实就是一种绑定关系, 这是 ES6 非常重要的特性，一定仔细阅读。\n在 ES6 的模块中，输出的不是对象的拷贝，不管是引用类型还是基本类型, 都是动态关联模块中的值，。\n// dynamic1.js export let name = \u0026#39;桃翁\u0026#39;; export function setName(newName) { name = newName; } // dynamic2.js import { name, setName } from \u0026#39;./dynamic1.js\u0026#39; console.log(name); // 桃翁 setName(\u0026#39;不要脸\u0026#39;); console.log(name); // 不要脸 奇迹般的发现在 dynamic2.js 模块中可以修改 dynamic1.js 模块里面的值, 并且反应到 name 绑定上（这个是重点，这个反应到了消费者模块）, 所以我们把导入的变量叫做绑定。\n在生产者模块导出的变量与消费者模块导入的变量会有一个绑定关系，无论前者或者后者发生改变，都会互相影响。\n注意区分在一个文件或模块中基本类型的赋值，两者是互不影响的。\n模块不会重复执行 这个特性比较好理解，就是如果从一个生产者模块中分别导入绑定，而不是一次性导入，生产者模块不会执行多次。\n// noRepeat1.js export let name = \u0026#39;桃翁\u0026#39;; export let age = \u0026#39;22\u0026#39;; console.log(\u0026#39;我正在执行。。。\u0026#39;); // noRepeat2.js import { name } from \u0026#39;./noRepeat1.js\u0026#39;; import { age } from \u0026#39;./noRepeat1.js\u0026#39;; console.log(name); console.log(age); // 结果 // 我正在执行。。。 // 桃翁 // 22 虽然导入了两次，但是 noRepeat1.js 只有执行一次。若同一个应用（注意是同一个应用不是模块）中导入同一个模块，则那些模块都会使用一个模块实例，意思就是说是一个单例。\n后记 码字不易，写技术文章是真的累，作者花的时间至少是读者读的时间的十倍。在此想到阮老师写了那么多文章，不知道是花了多少时间，竟然还有人这么恨他，攻击他的网站。\n我在文章中给我公众号打了很多广告，在此抱个歉，刚运营的公众号，需要拉点粉丝，不喜欢的注重内容就好。\n拓展 原生ECMAScript模块： 动态 import()\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/88/","summary":"简介 何为模块 一个模块只不过是一个写在文件中的 JavaScript 代码块。\n模块中的函数或变量不可用，除非模块文件导出它们。\n简单地说，这些模块可以帮助你在你的模块中编写代码，并且只公开应该被你的代码的其他部分访问的代码部分。\n为什么要使用模块 增加可维护性：由于每个模块都是独立的，每个人写的代码是不会相互影响的，在维护代码的时候很好排查是哪个模块出错。 可复用性：在日常的开发中，特别是大点的项目，代码的可复用性就更重要了，也许你会用复制粘贴的形式，但是直接一个 import 命令就可以搞定，岂不快哉。 避免命名污染：在 javascript 脚本中，所有的 js 文件的顶级作用域创建的变量，会被添加到共享的全局作用域，这就会导致不同的人开发的代码可能会有相同的变量名，导致变量名污染。 如何使用 导出模块 导出模块所用的命令是 export。\n前面也提到一个模块就是一个 javascript 文件，在这个模块中定义的变量，外部是无法获取到的，只有通过 export 导出的变量其他模块才可以用\n最简单的导出方式就是在声明的变量、函数、类前面加一个 export\n// export1.js // 导出变量 export let name = \u0026#39;桃翁\u0026#39;; // 导出函数 export function print() { console.log(\u0026#34;欢迎关注公众号：前端桃园\u0026#34;); } // 导出类 export class Person { constructor(name) { this.name = name; } } // 私有函数 function privateFunction () { console.log(\u0026#39;我是私有函数，外部访问不了我\u0026#39;); } 注意：\n被导出的函数或者类，都必须要有名称，意思就是说不能用这种方式导出匿名函数或者匿名类。 privateFunction 函数，没有加 export 命令，被当做这个模块的私有变量，其他模块是访问不到的。 除了上面那种导出方式，还有另外一种","title":"ES6之路之模块详解"},{"content":"如何更好的编写 async 函数 虽然 async/await 方式来处理异步请求，已经是比较非常好的方式了，但是有时候新手会乱用导致性能堪忧，这篇文章作者总结了他在项目迁移中更好的编写 aysnc 函数的方法。\n实现双向绑定 Proxy 比 defineproperty 优劣如何? 双向绑定其实已经是一个老掉牙的问题了,只要涉及到 MVVM 框架就不得不谈的知识点。\n可以实现双向绑定的方法有很多, KnockoutJS 基于观察者模式的双向绑定, Ember 基于数据模型的双向绑定, Angular 基于脏检查的双向绑定,本篇文章我们重点讲面试中常见的基于数据劫持的双向绑定。\n深度剖析：如何实现一个 Virtual DOM 算法 本文会在教你怎么用 300~400 行代码实现一个基本的 Virtual DOM 算法，并且尝试尽量把 Virtual DOM 的算法思路阐述清楚。希望在阅读本文后，能让你深入理解 Virtual DOM 算法，给你现有前端的编程提供一些新的思考。\n","permalink":"/posts/%E6%A1%83%E5%9B%AD%E5%91%A8%E5%88%8A/87/","summary":"如何更好的编写 async 函数 虽然 async/await 方式来处理异步请求，已经是比较非常好的方式了，但是有时候新手会乱用导致性能堪忧，这篇文章作者总结了他在项目迁移中更好的编写 aysnc 函数的方法。\n实现双向绑定 Proxy 比 defineproperty 优劣如何? 双向绑定其实已经是一个老掉牙的问题了,只要涉及到 MVVM 框架就不得不谈的知识点。\n可以实现双向绑定的方法有很多, KnockoutJS 基于观察者模式的双向绑定, Ember 基于数据模型的双向绑定, Angular 基于脏检查的双向绑定,本篇文章我们重点讲面试中常见的基于数据劫持的双向绑定。\n深度剖析：如何实现一个 Virtual DOM 算法 本文会在教你怎么用 300~400 行代码实现一个基本的 Virtual DOM 算法，并且尝试尽量把 Virtual DOM 的算法思路阐述清楚。希望在阅读本文后，能让你深入理解 Virtual DOM 算法，给你现有前端的编程提供一些新的思考。","title":"桃园周刊 2018-5-14"},{"content":"在我目前的认知里，我觉得未来有三个技能是需要掌握的，分别是：写作、编程、理财。我相信如果这三个技能都掌握了，我相信你里财富自由之路已经不远了。\n想要走上财富自由，主要看你的「睡后」收入，就是在你睡觉的时候还有的输入，比如你录视频卖、写书、做自媒体写文章、理财等等，程序员如果增加「睡后」输入，请看 Stromzhang 的 这篇文章 。这些都会让你在你睡觉了之后还有收入，跟你上班出售自己的时间相比，你花在这些能增加「睡后」收入的时间可以重复卖这些时间。\n比如一个作家花一年的时间写了一本书，可以畅销十年；那些做自媒体的写出一款爆文，到处转发，也可以流行好多天。\n所以如何增加「睡后」收入，才是通往财富自由之路的关键。\n第一板斧：写作 在那么多的只能加睡后收入的方法里面，为什么我选择了写作？\n因为写作是大多数人都可以参与进来的，不需要有太多的专业性技能，而且操作方便，在任何地方都可以写，没有时间空间的限制。\n李笑来在他的财富自由之路里面也说过，写作是通往财富自由的必备技能。\n下面简单介绍几种写作的好处：\n1. 表达能力 写作可以锻炼你的表达能力，因为写作其实就是在把自己所想的用文字表达出来，如果你能通过文字清晰的表达出来，那么我相信通过语言表达出来也不成问题了。\n一旦你的表达能力得以提升，那么在人际交往的时候可以清楚的表达自己的观点。与老板沟通的时候可以清楚的把自己所干的活表达出来，让老板知道你的工作量，你用你的时间和工作能力，减少了老板的时间，他才会感激你；与同事交流清楚表达自己的观点，可以让同事们觉得你是一个有条理，很理性的人，等等例子，一旦你表达能力提升了，你的人际关系不会差。\n2. 记录世界记录你 「记录世界记录你」是快手的广告，在这里借用一下，很适合给写作打广告。\n快手也是日活上亿的一款APP，快手用视频可以记下你生活的点点滴滴，并且与其他人分享。我们用写作可以记录下生活的点滴，可以记录你的日记，以后可以留给你老了之后回忆；可以记录你的随想，让你可能会忘记的东西持久化；可以记录下你学习的笔记或者举一反三的知识，来加深你对知识点的理解……\n你可以用写作记录下整个你所出的世界，以及你整个人生所经历的事儿，所想的想法，所学到的知识。这不就是记录世界记录你吗？想想是不是一件很酷的事儿\n别想了，开始写吧！\n3. 钱，快到兜里来 对于赚钱我相信大家都特别感兴趣吧。\n很多人也许误以为只有作家才能通过写作来赚钱吧！那么你就少知道了一个赚钱之道。\n你可以通过运营公众号来赚钱，说说三种运营公众号赚钱的方式：\n流量主 当你的公众号达到 5000 关注人数的时候，就可以开通广告服务，广告大概一次点击 1 块钱，原创能达到 1.5 元 软文推文 当你的公众号有一定影响力之后，一般就会有一些培训机构来让你帮他写软文打广告。希望大家看到喜欢的公众号有这种广告，不要抵触，有收入才有动力输出。 营销 如果你有一些付费专栏，或者知识星球，或者付费的视频课之类的，也可以做营销。 当然还有很多理由驱使我写作，我就列了几个我觉得对我影响比较大的方面，希望大家早早加入这个圈子，早点财富自由。\n第二板斧：编程 作为一个程序员的我，肯定编程对于我来说至关重要，但是为什么鼓励全民学编程呢？\n我鼓励大家学编程，但是没鼓励大家都去当程序员。外面都说程序员是『钱多人傻死得早』，可见程序员是多么辛苦的一门职业，其实无论哪门职业，只要你想赚更多的钱，就得花更多的时间。\n但是我觉得每个人都应该学点编程，理由如下：\n1. 学会一种思考方式 编程可以帮我们完成工作，但没有明确的实用性，重要的是我们把它看做思考的镜子，学习如何思考，你思考的问题清晰与否，对错与否，把代码敲出来运行一下就知道了。\n学习编程会叫你如何思考，就像学法律一样，学法律的人未必都成为律师，但法律教你一种思考方式。\n2. 编程可以培养冷静和逻辑化思维 要知道程序行为的对错，都是计算机运行错误，不会被个人意志左右，这让你冷静下来思考你赋予给计算机的算法是哪里错了。\n在软件的世界里，每个细节都是环环相扣，不可能出现没有原因的问题，没有无因之果，锻炼你的逻辑化思维。\n第三板斧：理财 在文章的开头，已经提到了「睡后」收入，理财就是一种很好的方式来增加睡后收入。\n因为整个社会是存在着通货膨胀的，也就是说如果你把现金放在家里，甚至是存在银行，你的钱是会贬值的。\n据统计，每年的通货膨胀是 6%~12%，根据上表，5 年利率最高的定期存款也才 4%，所以说存银行是没办法跑赢通货膨胀的。\n由此可以看到我们就算为了跑赢通货膨胀也要学理财，让钱生钱。\n理财的种类有很多种：储蓄、炒金、基金、炒股、国债、债券、外汇、保险、P2P。\n每种理财不是每个人都适合，一般风险高的收益高，风险低的收益低，怎么来取舍这就是我们需要学习的。\n提示：理财的前提是你本金越多，赚的才有可能更多，所以应该先努力赚钱，赚取更多的本金，然后一边学习理财。在我目前掌握的理财知识来看，指数基金是一种相对适合大多数人的一种理财方式。\n最后，如果想获取写作的资料（包括书籍、视频），可以关注公众号 前端桃园，回复「写作」免费领取，或者加微信 lijian1076629390 免费领取。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/81/","summary":"在我目前的认知里，我觉得未来有三个技能是需要掌握的，分别是：写作、编程、理财。我相信如果这三个技能都掌握了，我相信你里财富自由之路已经不远了。\n想要走上财富自由，主要看你的「睡后」收入，就是在你睡觉的时候还有的输入，比如你录视频卖、写书、做自媒体写文章、理财等等，程序员如果增加「睡后」输入，请看 Stromzhang 的 这篇文章 。这些都会让你在你睡觉了之后还有收入，跟你上班出售自己的时间相比，你花在这些能增加「睡后」收入的时间可以重复卖这些时间。\n比如一个作家花一年的时间写了一本书，可以畅销十年；那些做自媒体的写出一款爆文，到处转发，也可以流行好多天。\n所以如何增加「睡后」收入，才是通往财富自由之路的关键。\n第一板斧：写作 在那么多的只能加睡后收入的方法里面，为什么我选择了写作？\n因为写作是大多数人都可以参与进来的，不需要有太多的专业性技能，而且操作方便，在任何地方都可以写，没有时间空间的限制。\n李笑来在他的财富自由之路里面也说过，写作是通往财富自由的必备技能。\n下面简单介绍几种写作的好处：\n1. 表达能力 写作可以锻炼你的表达能力，因为写作其实就是在把自己所想的用文字表达出来，如果你能通过文字清晰的表达出来，那么我相信通过语言表达出来也不成问题了。\n一旦你的表达能力得以提升，那么在人际交往的时候可以清楚的表达自己的观点。与老板沟通的时候可以清楚的把自己所干的活表达出来，让老板知道你的工作量，你用你的时间和工作能力，减少了老板的时间，他才会感激你；与同事交流清楚表达自己的观点，可以让同事们觉得你是一个有条理，很理性的人，等等例子，一旦你表达能力提升了，你的人际关系不会差。\n2. 记录世界记录你 「记录世界记录你」是快手的广告，在这里借用一下，很适合给写作打广告。\n快手也是日活上亿的一款APP，快手用视频可以记下你生活的点点滴滴，并且与其他人分享。我们用写作可以记录下生活的点滴，可以记录你的日记，以后可以留给你老了之后回忆；可以记录你的随想，让你可能会忘记的东西持久化；可以记录下你学习的笔记或者举一反三的知识，来加深你对知识点的理解……\n你可以用写作记录下整个你所出的世界，以及你整个人生所经历的事儿，所想的想法，所学到的知识。这不就是记录世界记录你吗？想想是不是一件很酷的事儿\n别想了，开始写吧！\n3. 钱，快到兜里来 对于赚钱我相信大家都特别感兴趣吧。\n很多人也许误以为只有作家才能通过写作来赚钱吧！那么你就少知道了一个赚钱之道。\n你可以通过运营公众号来赚钱，说说三种运营公众号赚钱的方式：\n流量主 当你的公众号达到 5000 关注人数的时候，就可以开通广告服务，广告大概一次点击 1 块钱，原创能达到 1.5 元 软文推文 当你的公众号有一定影响力之后，一般就会有一些培训机构来让你帮他写软文打广告。希望大家看到喜欢的公众号有这种广告，不要抵触，有收入才有动力输出。 营销 如果你有一些付费专栏，或者知识星球，或者付费的视频课之类的，也可以做营销。 当然还有很多理由驱使我写作，我就列了几个我觉得对我影响比较大的方面，希望大家早早加入这个圈子，早点财富自由。\n第二板斧：编程 作为一个程序员的我，肯定编程对于我来说至关重要，但是为什么鼓励全民学编程呢？\n我鼓励大家学编程，但是没鼓励大家都去当程序员。外面都说程序员是『钱多人傻死得早』，可见程序员是多么辛苦的一门职业，其实无论哪门职业，只要你想赚更多的钱，就得花更多的时间。\n但是我觉得每个人都应该学点编程，理由如下：\n1. 学会一种思考方式 编程可以帮我们完成工作，但没有明确的实用性，重要的是我们把它看做思考的镜子，学习如何思考，你思考的问题清晰与否，对错与否，把代码敲出来运行一下就知道了。\n学习编程会叫你如何思考，就像学法律一样，学法律的人未必都成为律师，但法律教你一种思考方式。\n2. 编程可以培养冷静和逻辑化思维 要知道程序行为的对错，都是计算机运行错误，不会被个人意志左右，这让你冷静下来思考你赋予给计算机的算法是哪里错了。\n在软件的世界里，每个细节都是环环相扣，不可能出现没有原因的问题，没有无因之果，锻炼你的逻辑化思维。\n第三板斧：理财 在文章的开头，已经提到了「睡后」收入，理财就是一种很好的方式来增加睡后收入。\n因为整个社会是存在着通货膨胀的，也就是说如果你把现金放在家里，甚至是存在银行，你的钱是会贬值的。\n据统计，每年的通货膨胀是 6%~12%，根据上表，5 年利率最高的定期存款也才 4%，所以说存银行是没办法跑赢通货膨胀的。\n由此可以看到我们就算为了跑赢通货膨胀也要学理财，让钱生钱。\n理财的种类有很多种：储蓄、炒金、基金、炒股、国债、债券、外汇、保险、P2P。\n每种理财不是每个人都适合，一般风险高的收益高，风险低的收益低，怎么来取舍这就是我们需要学习的。\n提示：理财的前提是你本金越多，赚的才有可能更多，所以应该先努力赚钱，赚取更多的本金，然后一边学习理财。在我目前掌握的理财知识来看，指数基金是一种相对适合大多数人的一种理财方式。\n最后，如果想获取写作的资料（包括书籍、视频），可以关注公众号 前端桃园，回复「写作」免费领取，或者加微信 lijian1076629390 免费领取。","title":"三板斧使你走上人生巅峰"},{"content":"### Mvvm 前端数据流框架精讲 带大家了解什么是 mvvm，mvvm 的原理，以及近几年产生了哪些演变。\n同时借 mvvm 这个话题拓展到对各类前端数据流方案的思考，形成对前端数据流整体认知，帮助大家在团队中更好的做技术选型。\n译-RxJS 游戏之贪吃蛇 众所周知，Web 发展的很快。如今，响应式编程和 Angular 或 React 这样的框架一样，已经是 Web 开发领域中最热门的话题之一。响应式编程变得越来越流行，尤其是在当今的 JavaScript 世界。从命令式编程范式到响应式编程范式，社区已经发生了巨大的变化。然而，许多开发者还是十分纠结，常常因为响应式编程的复杂度(大量 API)、思维转换(从命令式到响应式)和众多概念而畏缩。\n该应用使用 HTML5、JavaScript 和 RxJS 来将编程事件循环 (programmatic-event-loop) 的应用转变成响应事件驱动 (reactive-event-driven) 的应用。\n前端性能优化之浏览器渲染优化 —— 打造60FPS页面 该文仅针对高性能渲染进行分析。详细的讲解了 CSS 优化 和 Javascript 的优化，一篇非常深入的文章\n","permalink":"/posts/%E6%A1%83%E5%9B%AD%E5%91%A8%E5%88%8A/74/","summary":"### Mvvm 前端数据流框架精讲 带大家了解什么是 mvvm，mvvm 的原理，以及近几年产生了哪些演变。\n同时借 mvvm 这个话题拓展到对各类前端数据流方案的思考，形成对前端数据流整体认知，帮助大家在团队中更好的做技术选型。\n译-RxJS 游戏之贪吃蛇 众所周知，Web 发展的很快。如今，响应式编程和 Angular 或 React 这样的框架一样，已经是 Web 开发领域中最热门的话题之一。响应式编程变得越来越流行，尤其是在当今的 JavaScript 世界。从命令式编程范式到响应式编程范式，社区已经发生了巨大的变化。然而，许多开发者还是十分纠结，常常因为响应式编程的复杂度(大量 API)、思维转换(从命令式到响应式)和众多概念而畏缩。\n该应用使用 HTML5、JavaScript 和 RxJS 来将编程事件循环 (programmatic-event-loop) 的应用转变成响应事件驱动 (reactive-event-driven) 的应用。\n前端性能优化之浏览器渲染优化 —— 打造60FPS页面 该文仅针对高性能渲染进行分析。详细的讲解了 CSS 优化 和 Javascript 的优化，一篇非常深入的文章","title":"桃园周刊 2018-5-5"},{"content":"作用域 作用域指变量所作用的范围，在 Javascript 中有两种作用域：\n全局作用域 函数作用域 变量提升 变量提升（Hoisting）被认为是， Javascript 中执行上下文 （特别是创建和执行阶段）工作方式的一种认识。具体表现就是所有通过 var 声明的变量会提升到当前作用域的最前面。\nfunction foo() { console.log(temp); } function bar() { console.log(temp); var temp; } foo(); // ReferenceError: temp is not defined bar(); // undefined 可以看到用 var 声明了的并不会报错。因为其实函数 bar 等同于\nfunction bar() { var temp; console.log(temp); } 大多数类 C 语言语法的语言都拥有块级作用域。在一个代码块（括在一对花括号中的一组语句）中定义的所有变量在代码块的外部是不可见的。定义在代码块中的变量在代码块被执行结束后会变释放掉。这是件好事。\n糟糕的是，尽管 Javascript 的代码貌似支持块级作用域，但实际上 Javascript 并不支持（就是因为有变量提升）。这个混淆之处可能成为错误之源。\n所以在 ES6 中规定了 let 和 const 来支持块级作用域。但是，是不是真的提升就不存在了呢，可以看下面暂时性死区这部分。\nlet let 可以理解为『更完美的 var』，使用方法很简单；\nlet foo = 3; 使用方法基本和 var 相同，而且声明的变量只在其块和子块中可用，这点也与 var 相同。 二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。\nfunction foo() { if(true) { var temp = 5; console.log(temp); } console.log(temp); } function bar(） { if(true) { let temp = 5; console.log(temp); } console.log(temp); } foo(); // 5 和 5 bar(); // 5 和 \u0026#34;ReferenceError: temp is not defined let 声明的变量的作用域只是外层块，而不是整个外层函数。\n我们可以利用这个特性来替代立即执行函数（IIFE）。\n// IIFE (function(){ var temp = xxx; /* other code */ }()) // 块级 { let temp = xxx; /* other code */ } const const 的用法跟 let 差不多，但是 const 一定要初始化, 不初始化是会报错的。\nconst temp = 4; // 没有初始化报错 const t; // SyntaxError: Missing initializer in const declaration const 是块级作用域，const 跟 let 的语义相似，就是用来声明常量的，一旦声明了就不能更改。值得注意的是 const 声明的变量记录的是指针，不可更改的是指针,如果 const 所声明的是对象，对象的内容还是可以修改的。\n// 重新赋值声明导致报错 const PI = 3.14; PI = 3.1415926; // TypeError: Assignment to constant variable. // 给对象增加属性不会导致 obj 的指针变化，所以不会报错 const obj = { foo: 2 }; obj.bar = 3; console.log(obj); // {foo: 2, bar: 3} 暂时性死区 使用 let 或 const 声明的变量，在声明没有到达之前，访问该变量都会导致报错，就连一直以为安全的 typeof 也不再安全。\n// TDZ1 function foo() { // TDZ 开始 console.log(typeof temp); let temp = 5; // TDZ 结束 } foo(); // ReferenceError: temp is not defined 报的错是 ReferenceError，如果使用 var 声明的话，temp 输出应该是 undefined，从 let 声明的变量的块的第一行，到声明变量之间的这个区域被称作暂时性死区（TDZ）。凡是在这个区域使用这些变量都会报错。\n// TDZ2 function bar() { console.log(typeof temp); } bar(); // undefined 看到上面两个例子仔细思考有没有觉得想到点什么？\n在函数里没有用 let 声明 temp 的时候，temp 是 undefined，讲道理在 let 声明前也应该是 temp，然而 foo 函数却报了错，证明了就算是在未到达 let 声明的地方，但是在用 let 之前已经起到了作用。这是不是说明其实 let 也有提升，只是在 TDZ 使用的时候报错了，而不是 undefined。\n事实上，当 JS 引擎检视下面的代码块有变量声明时，对于 var 声明的变量，会将声明提升到函数或全局作用域的顶部，而对 let 或 const 的时候会将声明放在暂时性死区内。任何在暂时性死区内访问变量的企图都会导致“运行时”错误（runtime error）。只有执行到变量的声明语句时，该变量才会从暂时性死区内被移除并可以安全使用。\n禁止重复声明 在同一个块内，let 和 const 不能声明相同的标识符。禁止的情况包括：\nlet 或 const 和 let 或 const var 和 let 或者 const 函数参数与 let 或 const // let 和 let let foo = 1; let foo = 2; // let 和 const let foo = 1; const foo = 1; // var 与 let var foo = 1; let foo = 1; // 函数参数与 let function bar(foo) { let foo = 1; } 以上情况都是会报 SyntaxError。但是在嵌套的作用域内使用 let 声明同一变量是被允许的。\nvar foo = 1; { // 不会报错 let = 2; // other code } 同时因为是 let 和 const 是块级作用域，声明的变量在当前块使用完之后就会被释放，所以就算使用相同的标识符也不会覆盖外部作用域的变量, 而 var 是会覆盖外部作用域的变量的。\nfunction foo() { var bar = 1; { let bar = 2; } console.log(bar); } function zoo() { var bar = 1; { var bar = 2; } console.log(bar); } foo(); // 1 zoo(); // 2 最佳实践 在 ES6 的发展阶段，被广泛认可的变量声明方式是：默认情况下应当使用 let 而不是 var 。对于多数 JS 开发者来说， let 的行为方式正是 var 本应有的方式，因此直接用 let 替代 var 更符合逻辑。在这种情况下，你应当对需要受到保护的变量使用 const 。\n在默认情况下使用 const ，而只在你知道变量值需要被更改的情况下才使用 let 。这在代码中能确保基本层次的不可变性，有助于防止某些类型的错误。\n思考题 两个思考题，我会把答案放在评论中。\n// 思考题 1 switch (x) { case 0: let foo; break; case 1: let foo; // TypeError for redeclaration. break; } // 思考题 2 function bar(){ var foo = 1; if (true) { let foo = (foo + 2); } } bar(); ","permalink":"/posts/%E6%8A%80%E6%9C%AF/70/","summary":"作用域 作用域指变量所作用的范围，在 Javascript 中有两种作用域：\n全局作用域 函数作用域 变量提升 变量提升（Hoisting）被认为是， Javascript 中执行上下文 （特别是创建和执行阶段）工作方式的一种认识。具体表现就是所有通过 var 声明的变量会提升到当前作用域的最前面。\nfunction foo() { console.log(temp); } function bar() { console.log(temp); var temp; } foo(); // ReferenceError: temp is not defined bar(); // undefined 可以看到用 var 声明了的并不会报错。因为其实函数 bar 等同于\nfunction bar() { var temp; console.log(temp); } 大多数类 C 语言语法的语言都拥有块级作用域。在一个代码块（括在一对花括号中的一组语句）中定义的所有变量在代码块的外部是不可见的。定义在代码块中的变量在代码块被执行结束后会变释放掉。这是件好事。\n糟糕的是，尽管 Javascript 的代码貌似支持块级作用域，但实际上 Javascript 并不支持（就是因为有变量提升）。这个混淆之处可能成为错误之源。\n所以在 ES6 中规定了 let 和 const 来支持块级作用域。但是，是不是真的提升就不存在了呢，可以看下面暂时性死区这部分。\nlet let 可以理解为『更完美的 var』，使用方法很简单；\nlet foo = 3; 使用方法基本和 var 相同，而且声明的变量只在其块和子块中可用，这点也与 var 相同。 二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。","title":"ES6之路之块级作用域"},{"content":"前言 我相信大家对于『黑客』这个词并不陌生，特别是对我们搞计算机的人来说，那是相当的熟悉。\n在一般人的眼里『黑客』（hacker）就是入侵计算机的人，就是『计算机犯罪』的同义词。但是，它的原意并非如此。\n起源 在 20 世纪 60 年代初，麻省理工学院有一个学生团体叫做『铁路模型技术俱乐部』，他们把难题的解决方法称为 hack。\n这里，hack作为名词有两个意思，既可以指很巧妙或很便捷的解决方法，也可以指比较笨拙、不那么优雅的解决方法。两者都能称为hack，不同的是，前者是漂亮的解决方法（cool hack 或 neat hack），后者是丑陋的解决方法（ugly hack 或 quick hack）。hack 的字典解释是砍（木头），在这些学生看来，解决一个计算机难题就好像砍倒一棵大树。那么相应地，完成这种 hack 的过程就被称为 hacking，而从事 hacking 的人就是 hacker，也就是黑客。\n所以在 20 世纪 60 年代，『黑客』这个词是一种能力的象征，而且自称黑客的人他们比如包含着高度的革新、独树一帜的风格、精湛的技艺，也就是说在其他人的眼中，他们就是大佬。\n自由软件基金会创始人理查德·斯托尔曼认为黑客的行为必须同时满足，好玩、高智商、探索精神三个特点才是真正的黑客。这也是黑客所追求的三种价值，而不是实用性或金钱。\n从这个意思出发，我们有时也会用到这个，比如我平时在实现某一个功能的时候，用常规的方法解决不了（或者说当时想不到科学的解决方法），用了一半不是那么科学的方法(或者不知道为什么这种方法就可以解决这个问题)的时候，我们也许会说我们用了一种 hack 的方式来解决了这个问题，并且会在这个方法写上一个注释标识是 hack，因为有可能其他人不知道为什么要这么用。\n黑客精神 在史蒂文·利维出版的黑客著作 \u0026mdash;- 《黑客：计算机革命的英雄》中，将黑客的价值观总结为六条『黑客伦理』：\n使用计算机以及所有有助于了解这个世界本质的食物都不应该收到任何限制。任何事情都应该亲手尝试。 信息应该全部免费 不信任权威，提倡去中心化 判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或地位等其他标准 你可以用计算机创造美和艺术 计算机使生活更美好 根据这六条『黑客理论』，黑客价值的核心原则可以概括为：分享、开放、民主、计算机的自由使用、进步。\n历史上一些最优秀的程序员都是『黑客』。包括 Unix 创始人丹尼斯·里奇和肯·汤普森，Linux 创始人莱纳斯·托瓦兹，『开源运动』创始人埃里克·雷蒙德，微软公司创始人比尔·盖茨等等。正式黑客把计算机推向了更高的高度。\n『黑客』被误解的原因 根据『黑客伦理』，黑客就是不服从管教，具有叛逆精神，根据史蒂文·利维描述的就是：“对于黑客来说，关着门就是一种挑衅，而锁着门就是一种侮辱。 ······ 黑客相信，只有有助于改进现状、探索未知，人们就应该被允许自由地使用各种工具和信息。当一个黑客需要一样东西来帮助自己创造、探索或者改正某种设备时，他不会自找麻烦，不会接受那些财产专有权的荒谬概念。”\n他们侵入计算机系统的原因不是为了自己利益，而是为了自由，跟那些计算机罪犯是不同的。\n然而，在 20 世纪 80年代初，一帮青少年黑客入侵了美国和加拿大的一些计算机系统，被《新闻周刊》封面报道的标题就是『小心：黑客在行动』，这件事被广泛报道，在报道时媒体就把黑客的行为注意在一个很窄的方面：入侵系统。同时，那些入侵计算机的程序员也自称『黑客』，从此黑客在大众心中就成了有害人群。\n结语 真正的黑客致力于改变世界，让世界运转得更好。\n我们把传统意义上的黑客称之为 hacker，而那些而已入侵计算机系统的人应该称为 cracker（入侵者）。\n作为程序员的我们都应该以传统意义的黑客为目标努力，也许你就是下一个黑客，下一个改变世界的人。\n整篇文章大部分内容来自于《黑客与画家》，可以推荐给大家都去看下这本书，感受一下那个时代正真的黑客精神。 ** 最后，大家可以在评论里面留言，你心目中最伟大的黑客都有谁。**\n大家好，我是桃翁，我为自己代言！\n个人微信公众号 ","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/68/","summary":"前言 我相信大家对于『黑客』这个词并不陌生，特别是对我们搞计算机的人来说，那是相当的熟悉。\n在一般人的眼里『黑客』（hacker）就是入侵计算机的人，就是『计算机犯罪』的同义词。但是，它的原意并非如此。\n起源 在 20 世纪 60 年代初，麻省理工学院有一个学生团体叫做『铁路模型技术俱乐部』，他们把难题的解决方法称为 hack。\n这里，hack作为名词有两个意思，既可以指很巧妙或很便捷的解决方法，也可以指比较笨拙、不那么优雅的解决方法。两者都能称为hack，不同的是，前者是漂亮的解决方法（cool hack 或 neat hack），后者是丑陋的解决方法（ugly hack 或 quick hack）。hack 的字典解释是砍（木头），在这些学生看来，解决一个计算机难题就好像砍倒一棵大树。那么相应地，完成这种 hack 的过程就被称为 hacking，而从事 hacking 的人就是 hacker，也就是黑客。\n所以在 20 世纪 60 年代，『黑客』这个词是一种能力的象征，而且自称黑客的人他们比如包含着高度的革新、独树一帜的风格、精湛的技艺，也就是说在其他人的眼中，他们就是大佬。\n自由软件基金会创始人理查德·斯托尔曼认为黑客的行为必须同时满足，好玩、高智商、探索精神三个特点才是真正的黑客。这也是黑客所追求的三种价值，而不是实用性或金钱。\n从这个意思出发，我们有时也会用到这个，比如我平时在实现某一个功能的时候，用常规的方法解决不了（或者说当时想不到科学的解决方法），用了一半不是那么科学的方法(或者不知道为什么这种方法就可以解决这个问题)的时候，我们也许会说我们用了一种 hack 的方式来解决了这个问题，并且会在这个方法写上一个注释标识是 hack，因为有可能其他人不知道为什么要这么用。\n黑客精神 在史蒂文·利维出版的黑客著作 \u0026mdash;- 《黑客：计算机革命的英雄》中，将黑客的价值观总结为六条『黑客伦理』：\n使用计算机以及所有有助于了解这个世界本质的食物都不应该收到任何限制。任何事情都应该亲手尝试。 信息应该全部免费 不信任权威，提倡去中心化 判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或地位等其他标准 你可以用计算机创造美和艺术 计算机使生活更美好 根据这六条『黑客理论』，黑客价值的核心原则可以概括为：分享、开放、民主、计算机的自由使用、进步。\n历史上一些最优秀的程序员都是『黑客』。包括 Unix 创始人丹尼斯·里奇和肯·汤普森，Linux 创始人莱纳斯·托瓦兹，『开源运动』创始人埃里克·雷蒙德，微软公司创始人比尔·盖茨等等。正式黑客把计算机推向了更高的高度。\n『黑客』被误解的原因 根据『黑客伦理』，黑客就是不服从管教，具有叛逆精神，根据史蒂文·利维描述的就是：“对于黑客来说，关着门就是一种挑衅，而锁着门就是一种侮辱。 ······ 黑客相信，只有有助于改进现状、探索未知，人们就应该被允许自由地使用各种工具和信息。当一个黑客需要一样东西来帮助自己创造、探索或者改正某种设备时，他不会自找麻烦，不会接受那些财产专有权的荒谬概念。”\n他们侵入计算机系统的原因不是为了自己利益，而是为了自由，跟那些计算机罪犯是不同的。\n然而，在 20 世纪 80年代初，一帮青少年黑客入侵了美国和加拿大的一些计算机系统，被《新闻周刊》封面报道的标题就是『小心：黑客在行动』，这件事被广泛报道，在报道时媒体就把黑客的行为注意在一个很窄的方面：入侵系统。同时，那些入侵计算机的程序员也自称『黑客』，从此黑客在大众心中就成了有害人群。\n结语 真正的黑客致力于改变世界，让世界运转得更好。\n我们把传统意义上的黑客称之为 hacker，而那些而已入侵计算机系统的人应该称为 cracker（入侵者）。\n作为程序员的我们都应该以传统意义的黑客为目标努力，也许你就是下一个黑客，下一个改变世界的人。\n整篇文章大部分内容来自于《黑客与画家》，可以推荐给大家都去看下这本书，感受一下那个时代正真的黑客精神。 ** 最后，大家可以在评论里面留言，你心目中最伟大的黑客都有谁。**\n大家好，我是桃翁，我为自己代言！","title":"你不知道的黑客"},{"content":" 欢迎访问我的个人站点\n前言 我相信对于像素，英文「pixel」，缩写「px」，这个概念并不陌生吧，不管是设计师设计图片用的单位 px，还是前端工程师在 css 里面的单位 px等等，很多领域都会用到这个单位，但是当我问他们一些问题的时候，基本上都答得不好。\n比如：\niPhone 6 的分辨率是 750 x 1334 像素，然而我们我们在写 css 的时候是以 375 x 667 来调的； 为什么我们做的一个网页在 pc 端可以正常显示，在移动端也可以正常显示，但是有时候又不正常显示； 我们如果在 pc 端把浏览器的宽度调到只有 200px 宽，里面写一个 100px 宽的 div ，然后再调整浏览器的放大为 200%，然后这个 div 可以充满整个显示器。 如果都能答上来，已经很不错了哦！\n像素 定义：是指在由一个数字序列表示的图像中的一个最小单位，称为像素。 \u0026mdash;- 百度百科\n注意: 我觉得这里最关键的是『单位』，像素是一个单位，而不是一个点，我认为理解为一个长度单位比较好理解，后面我会解释为什么我会觉得是一个长度单位比较好理解。\n我在很多文章里看到的定义是，像素就是组成图像的一个一个的点，这会让人感觉像素是个面积单位，我觉得这样有点不妥，并不是不对，要根据上下文而定。\n比如 设备像素比(device pixels ratio)，简称 DPR，DPR = 设备像素 / 设备独立像素。现在我们就拿 iPhone 6 来做例子，我们可以通过 window.devicePixelRatio 获取设备的 DPR 为 2，设备独立像素，在这里可以认为是 css 像素，整个 iPhone 6 的像素点就有 375 * 667 个。\n然后根据上面的公式得出： 总设备像素 = 总 css 像素 * 2 = 375 x 667 x 2 。然而实际上总的设备像素是 750 x 1334 个像素点。 如果我们把像素理解为一个长度单位，那么这个 2 就是 水平的总设备像素 = 2 * 水平的 css 像素 = 2 x 375，垂直的总设备像素 = 2 x 667. 所以总的像素点的个数就等于 = 4 x 375 x 667 = 750 x 1334. 前面这个例子有可能现在还看不懂，不明白设备像素、设备独立像素这些概念，后面介绍了再来理解可能容易点，现在就是想带着它是个长度单位来理解。其实 DPR = 设备像素 / 设备独立像 （是在同一个方向，一维的）\n设备像素（DP） 定义： 设备像素又称物理像素，其尺寸大小是不会变的，从显示屏从工厂出来的那刻起，物理像素点就不会变了。\n实例： iPhone 6 的分辨率是750 x 1334 ，那么这个 750 就是代表 750 的物理像素，是从手机出厂的那刻起，就不会变了，750 表示的就是手机的宽是 750px。这个应该比较好理解。\n设备独立像素（DIP） 定义：设备独立像素又称逻辑像素，其尺寸大小是相对的。是一种物理测量单位，基于计算机控制的坐标系统和抽象像素。\n其实这个也很好理解，逻辑像素嘛，不就是我们平时用的 CSS 像素么，在 Android 中交设备独立像素。所以 设备独立像素 = CSS 像素。\n设备像素比（DPR） 设备像素比 DPR(devicePixelRatio) 是默认缩放为100%的情况下，设备像素和CSS像素的比值。 DPR = 设备像素 / 设备独立像素（是在同一个方向，一维的）\n这个概念主要是为了移动设备提出来的，最开始没有 DPR 的概念。但是随着技术的发展，从 iPhone 4 开始，苹果公司将 iPhone 4 的分辨率提高了一倍，但是尺寸没有变化，这意味着大小相同的屏幕上，像素多了一倍(一个方向上，像素点其实是 4 倍)，但是屏幕的尺寸没有变化，因为以前设备像素与逻辑像素的比例一直是 1 ： 1，都没人去关心这个，而 iPhone 4 的 DPR 为 2 了，所以就有了 DPR 的概念。这也诞生了 retina视网膜屏幕，后面讲 PPI 的时候再具体说。\nDPI 和 PPI 前方高能，这两个概念比较容易搞混，新手常常难以区分，包括百度百科所给的概念都互相矛盾，属于难点。 在百度百科上，PPI 定义是每英寸（英寸是个长度单位）所包含的像素数目。而后面又说单位面积的像素数目跟多，图像越清晰。一会儿又说是单位长度，一会儿又说是单位面积。因为英寸是长度单位，就是用来描述线段的，那么所包含的像素数目，此时像素我所理解的是长度单位；而后者说单位面积像素数量，此时我只能理解成像素是一个面积单位。这会让没有真正理解像素或者 PPI 的人迷惑。\n现在我还是拿 iPhone 6 的例子来说明到底 PPI 应该是个啥。\n我们都知道 iPhone 6 的分辨率是 750 x 1344，对角线长度是 4.7 英寸，PPI 是 326（不知道这些的自己查），但是这个 326 是怎么来的呢？现在我们就来计算下\n~~ 因为我们并不知道手机的长宽的尺寸，一般厂商只会给对角线的尺寸。 设：长尺寸为 x 英寸，宽的尺寸为 y 英寸，那么就可以得到手机面积 s为： s = x^2 + y^2 (1)， 根据勾股定理可以得到 （4.7 英寸）^2 = x^2 + y^2 (2) 根据 （1）（2）可得 s = x^2 + y^2 = （4.7 英寸）^2\n现在我们把总面积算出来了，然后再来算总的像素个数。一般像素点是正方形，所以一个点为一个像素平方。所以有：\n750 px * 1344 px = 750 x 1344 px^2（注意单位是像素平方）\n此时就有 PPI = 750 x 1344 px^2 / （4.7 英寸）^2 = √ 750 x 1344 px / 4.7 英寸~~\n所以就有 PPI 等于每平方英寸的像素点个数（1 个像素点为 1 平方像素），单位是 px^2/ 英寸^2 ; 也等于每英寸多少像素。\n所以说其实百度百科那个解释说错也有错，说没错也没错，只是说比较容易让人误解。看到这里我相信应该大家都明白 PPI 道理是什么了吧。\nDPI（Dots Per Inch）和 PPI（Pixels Per Inch）都描述了图像的分辨率（或清晰度），但它们不是同一件事。PPI 描述了一英寸数字屏幕上显示的正方形像素的数量（通常在 67-300 之间）。另一方面，DPI 是指打印文档中墨水物理点的数量的打印术语。它们俩其实是差不多的，只是在使用的范围不一样，因为「点」这个还是比较抽象的，当使用电脑屏幕的时候，就是像素点；而当你打印或者印刷东西的时候，就是喷墨点。或者你可以把我们刚推出来来的等式，如果是每平方英寸像素点个数就可以理解为 DPI，每英寸像素理解有 PPI。\nPPI 越高，看起来越清晰。\nRetina 显示屏 Retina 显示屏是苹果公司首先提出来的，具备足够高像素密度（指的是 PPI 大于 300 的）而使得人体肉眼无法分辨其中单独像素点的液晶屏。最初采用该种屏幕的产品是 iPhone 4，其屏幕分辨率为 640 x 960（每英寸像素数为 326 ppi）。这种分辨率在正常观看距离下足以使人肉眼无法分辨其中的单独像素。\n注意：Retina 不是分辨率，也不是单独指PPI，而是指视觉效果。retin屏幕指在正常视线距离内，肉眼很难看到像素的的屏幕。脱离视线距离谈retina就是流氓，50寸的1080P电视，你50CM内看大果粒，50米外看就是retina屏幕。\n后言 下一篇文章也是跟这相关的，谈 移动端的适配问题(ppi 适配、resolution 适配、 dpr 适配)，理解移动端的三种 viewport 。\n大家好，我是桃翁，我为自己代言！\n个人微信公众号，尽量坚持每周一篇干货 参考文章： PPI vs. DPI: what’s the difference?\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/146/","summary":"欢迎访问我的个人站点\n前言 我相信对于像素，英文「pixel」，缩写「px」，这个概念并不陌生吧，不管是设计师设计图片用的单位 px，还是前端工程师在 css 里面的单位 px等等，很多领域都会用到这个单位，但是当我问他们一些问题的时候，基本上都答得不好。\n比如：\niPhone 6 的分辨率是 750 x 1334 像素，然而我们我们在写 css 的时候是以 375 x 667 来调的； 为什么我们做的一个网页在 pc 端可以正常显示，在移动端也可以正常显示，但是有时候又不正常显示； 我们如果在 pc 端把浏览器的宽度调到只有 200px 宽，里面写一个 100px 宽的 div ，然后再调整浏览器的放大为 200%，然后这个 div 可以充满整个显示器。 如果都能答上来，已经很不错了哦！\n像素 定义：是指在由一个数字序列表示的图像中的一个最小单位，称为像素。 \u0026mdash;- 百度百科\n注意: 我觉得这里最关键的是『单位』，像素是一个单位，而不是一个点，我认为理解为一个长度单位比较好理解，后面我会解释为什么我会觉得是一个长度单位比较好理解。\n我在很多文章里看到的定义是，像素就是组成图像的一个一个的点，这会让人感觉像素是个面积单位，我觉得这样有点不妥，并不是不对，要根据上下文而定。\n比如 设备像素比(device pixels ratio)，简称 DPR，DPR = 设备像素 / 设备独立像素。现在我们就拿 iPhone 6 来做例子，我们可以通过 window.devicePixelRatio 获取设备的 DPR 为 2，设备独立像素，在这里可以认为是 css 像素，整个 iPhone 6 的像素点就有 375 * 667 个。","title":"像素相关概念：PPI、DPI、设备像素、独立像素"},{"content":"简介 在我们一个人采用微服务构架的时候，我们会创建很多个 maven 项目。然后如果从 IDE 里面导入项目就要导入很多次，为了方便统一管理，我们可以将多个 maven 放在一个 项目里统一管理，然后我们导入项目的时候就可以直接导入一个项目就 OK。\n操作方法 在多个项目的父目录建立一个文件夹，创建一个 pox.xml 文件 代码规则 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\r\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001-XMLSchema-instance\u0026#34;\rxsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt;\r\u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt;\r\u0026lt;groupId\u0026gt;com.lxr\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;maiba_be\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt;\r\u0026lt;!-- packaging 把 jar 改成 pox --\u0026gt;\r\u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt;\r\u0026lt;!-- 这里面放每个微服务的 artifactId--\u0026gt;\r\u0026lt;modules\u0026gt;\r\u0026lt;module\u0026gt;goodsService\u0026lt;/module\u0026gt;\r\u0026lt;/modules\u0026gt;\r\u0026lt;!-- 为了解决依赖版本问题 --\u0026gt;\r\u0026lt;dependencyManagement\u0026gt;\r\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;Camden.SR3\u0026lt;/version\u0026gt;\r\u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt;\r\u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt;\r\u0026lt;/dependencyManagement\u0026gt;\r\u0026lt;properties\u0026gt;\r\u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt;\r\u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt;\r\u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt;\r\u0026lt;/properties\u0026gt;\r\u0026lt;parent\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.4.2.RELEASE\u0026lt;/version\u0026gt;\r\u0026lt;/parent\u0026gt;\r\u0026lt;build\u0026gt;\r\u0026lt;plugins\u0026gt;\r\u0026lt;plugin\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt;\r\u0026lt;/plugin\u0026gt;\r\u0026lt;/plugins\u0026gt;\r\u0026lt;/build\u0026gt;\r\u0026lt;/project\u0026gt; 每个微服务项目的 pox.xml 更改 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\r\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001-XMLSchema-instance\u0026#34;\rxsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt;\r\u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt;\r\u0026lt;artifactId\u0026gt;goodsService\u0026lt;/artifactId\u0026gt;\r\u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt;\r\u0026lt;!-- 这里的 artifactId 更改为父 pox.xml 的 artifactId --\u0026gt;\r\u0026lt;parent\u0026gt;\r\u0026lt;groupId\u0026gt;com.lxr\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;maiba_be\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt;\r\u0026lt;/parent\u0026gt;\r\u0026lt;properties\u0026gt;\r\u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt;\r\u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt;\r\u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt;\r\u0026lt;/properties\u0026gt;\r\u0026lt;!-- 下面的依赖 根据需求 --\u0026gt;\r\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt;\r\u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt;\r\u0026lt;/project\u0026gt; ","permalink":"/posts/%E6%8A%80%E6%9C%AF/51/","summary":"简介 在我们一个人采用微服务构架的时候，我们会创建很多个 maven 项目。然后如果从 IDE 里面导入项目就要导入很多次，为了方便统一管理，我们可以将多个 maven 放在一个 项目里统一管理，然后我们导入项目的时候就可以直接导入一个项目就 OK。\n操作方法 在多个项目的父目录建立一个文件夹，创建一个 pox.xml 文件 代码规则 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\r\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001-XMLSchema-instance\u0026#34;\rxsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt;\r\u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt;\r\u0026lt;groupId\u0026gt;com.lxr\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;maiba_be\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt;\r\u0026lt;!-- packaging 把 jar 改成 pox --\u0026gt;\r\u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt;\r\u0026lt;!-- 这里面放每个微服务的 artifactId--\u0026gt;\r\u0026lt;modules\u0026gt;\r\u0026lt;module\u0026gt;goodsService\u0026lt;/module\u0026gt;\r\u0026lt;/modules\u0026gt;\r\u0026lt;!-- 为了解决依赖版本问题 --\u0026gt;\r\u0026lt;dependencyManagement\u0026gt;\r\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;Camden.SR3\u0026lt;/version\u0026gt;\r\u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt;\r\u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt;\r\u0026lt;/dependencyManagement\u0026gt;\r\u0026lt;properties\u0026gt;\r\u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt;\r\u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt;\r\u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt;\r\u0026lt;/properties\u0026gt;\r\u0026lt;parent\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.4.2.RELEASE\u0026lt;/version\u0026gt;\r\u0026lt;/parent\u0026gt;\r\u0026lt;build\u0026gt;\r\u0026lt;plugins\u0026gt;\r\u0026lt;plugin\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt;\r\u0026lt;/plugin\u0026gt;\r\u0026lt;/plugins\u0026gt;\r\u0026lt;/build\u0026gt;\r\u0026lt;/project\u0026gt; 每个微服务项目的 pox.","title":"如何将多个 maven 项目统一管理"},{"content":" 个人站点：桃园\n0. 前言 0.1 简介 vim 被誉为『编辑器之神』，与之同时代的 emacs 被誉为『神之编辑器』。可以看得出 vim 在编辑器的地位是很高的，得益于 vim 的指法，敲起代码来如行云流水。特别膜拜创始人创始出这么方便的敲代码的指法，这篇文章就是来带你入坑 vim 指法操作。\n0.2 前端的我为什么要学习 vim 在当今前端开发工具百花齐放的时代（VS Code、Sublime、Atom 以及 IDE Webstorm），我为什么还要介绍 20 多年前开发的一个老古董呢？在这里我想说的是出身虽然老，但是所带来的价值并没有减,一旦习惯了 vim 的指法之后，你会觉得不用 vim 操作写代码会觉得很不习惯，甚至不知道怎么操作。然而用在支持 vim 指法的编辑上写代码你会觉得如行云流水，如果再配个机械键盘，简直是享受，特别符合极客的风格。\n一旦学会了 vim 的指法，会让你终身受益，至少在你敲代码的年代会收益，毫无夸张, 它会让你摆脱烦人的，在敲代码的时候频繁的移动鼠标，这也是 vim 的设计理念之一 \u0026ndash; 脱离鼠标。\n0.3 文章适用读者 本篇文章比较适合前端开发者，因为我也只是用 vim 在前端领域做过一些开发，其他领域我没有发言权。\n0.4 Q\u0026amp;A Q：你推荐 vim 是要我们完全放弃以前的编辑器而投入 vim 的怀抱吗？\nA：当然不是。首先 vim 的学习成本还是很高的，因为他跟平时我们用的编辑器敲代码的方式根本不同，因为它是不用鼠标的，纯键盘操作。你想想如果你在你的 vs code 上不用鼠标操作，你上下左右全靠方向键，那敲代码的速度得有多慢。而且初学者想把 vim 打造成一个自己的 IDE 还是很有难度的。所以我这里推荐的是，不管是你的 vs code、sublime等，装一个 vim 插件。我在 vs code 上试过，很爽，只不过现在投身到 emacs 的怀抱了。\n虽然我用 emacs 了，我还是会装 vim 插件（Evil）。如果有兴趣，下次可以推荐一下 spacemacs 。\n开题说了这么多，就是想吸引一下大家，觉得 vim 的指法是值得去学习的，接下来进入正题。\n1 助记符 vim 上的所有定义的快捷键都是有一定的意义的，在这里我先把常用的一些列出来。\n1.1 正则表达式相关 $ ： 移动光标到行尾 ^ : 移动光标到当前行的第一个字母位置。 1.2 移动类（motion） h（左）、l（右）、j（上）、k（下）、f（front）、b（back）、u（up）\n1.3 操作类（operator） d（delete）、i（insert）、a（append）、c（change）、y（copy）、p（paste）\n1.4 一般的缩写 w（word）、s（sentence）\n2 理解 vim 中三种常用模式 vim 里面有好几种模式，但是因为我这里介绍的是在目前的编辑器里面装 插件，所以像命令模式这种用来保存文件、退出文件的就不介绍了。\nNomal mode（默认模式，因为使用该模式场景最多，所有定为默认模式）。 Insert mode （插入模式\u0026ndash;少用，用了它 vim 就成 「哑巴」了）。 Visual mode（可视模式，取名叫光标模式或者选择模式可能还比较好理解） 2.1 三种模式之间的转换关系 3 教程篇 当我们记住上面的助记符之后，我们就可以像写英文短语一样操作了。\nvim 快捷键语法：[operator][count][motion]，例如 删两个单词就是 d2w，operator 和 motion 我已经在前面给出来一些了。\n3.1 移动光标 3.1.1 最基本的 h、j、k、l 最基本的上下左右移动（跟键盘上下左右的键盘效果相同，但是往往方向键在键盘的右下方，离主键盘区较远，这个也相对比较有优势）：\nh：光标向左移动 j：光标向下移动 k：光标向上移动 l：光标向右移动 移动属于 motion，所以在前面加上「count」就可以移动多行了，比如向上移动 10 行，就可以 10k。往往编辑器会有行号，定位需要做个加减法，如果采用的是相对行号，用这个就比较方便。不懂相对行号的同学看下图就懂了。 3.1.2 快速移动 w：光标往前移动一个词 b：光标向后移动一个词 0：移动光标到当前行首 ^：移动光标到当前行的第一个字母位置(注意与 0 的区别) $：移动光标到行尾 fx：移动光标到当前行的下一个 x 处（x为任意字母） tx：和上面一个命令类似，移动到 x 的左边一个位置 )：移动光标到下一个句子 ( ：移动光标到上一个句子 {：移动光标到上一段 }：移动光标到下一段\n3.1.3 快速定位 在刚才介绍了通过相对行号来进行移动到行的光标，还有采用绝对定位来移动的。那就是 gg。 语法： [num]gg\n2gg : 光标移动到第 2 行 gg： 光标移动到文件首部 G：移动到文件胃部 H：移动到屏幕上面 M：移动到屏幕中间 L：移动到屏幕下面 书签功能：这个功能也是很方便，很少有编辑器有的功能，单独列出来讲，强烈推荐。\nm\u0026lt;x\u0026gt;：给当前行加入书签，x 为任意字母（m 是 mark ） \u0026lt;x\u0026gt;： 单引号加上刚才 m 之后的字母，就会调整到刚才标记的那一行 3.1.3 屏幕滚动 Ctrl + b：向上移动一屏（Foward首字母小写） Ctrl + f：向下移动一屏（Backward首字母小写） Ctrl + d：向下滚动半屏内容（Down首字母小写） Ctrl + u：向上滚动半屏内容（Up首字母小写） 3.2 剪切、复制、粘贴 d[n]w：剪切后面 n 个单词的内容，dw 是剪切当前单词 [n]dd：剪切n行的内容, dd 为剪切当前行 D：剪切光标后到行尾的内容 yy/Y：复制当前行的内容 p：粘贴到光标后 P：粘贴到光标前 在 normal 模式下是没有删除操作的，d 这种删除也是剪切。\n以上全是 normal 模式\n3.3 编辑模式 在前面也说了，进入编辑模式也就变成了「哑巴」vim 了，就跟一般的编辑器没什么区别了。很多人就知道用 i 可以进入，还有很多命令可以让你聪明的进入。\ni：在光标处插入（insert首字母小写） I：在行首插入（insert首字母大写） a：在光标处后一个字符插入（append首字母小写） A：在行尾插入（append首字母大写） o：在上一行插入 O：在下一行插入 s：清除当前字符并进入插入模式 cc/S：清除当前行并进入插入模式 cw: 清除当前单词并进入插入模式 3.4 可视模式 要是前面都学会了，可视模式就比较简单了，而且你将会经常用到这个模式。我会把这个模式称做「选择模式」，接下来我们就来探索一下是如果选择的。\n其实也就两个关键的点：v（字符选择）、V（行选择）\n3.4.1 v（小写 v） 在 normal 模式下，按一下 v，然后可以按 l，重复按 l，你会发现右边的在一直被选中（高亮的部分）。同样的操作，按了 v，然后再练习一下按 h、j、k。\n选中的目的是什么呢？就是为了进行一些编辑操作，比如删除 d (实质是剪切)、复制 y。\n小提示，常常选中之后用 c 也是比较好的选择哦，剪切并进入插入模式。\n3.4.2 V（大写 V） V 就是选中行，也很简单。按了 V 之后，然后按 j、k，就可以上下选择行了，然后一次性删除 d、复制 y，就比较方便。\n3.5 组合操作 这个功能就比较强悍了，很适用，强烈推荐。 先来记公式：operator + i|a + scope\noperator 就是我们前面提到的插入（c）、剪切（d）、复制（y）以及选择（v），i 表示 scope 范围内，a 表示包含 scope 标签，scope 就是操作的范围了。\n实例： 以下如果将 i 换成 a，则会将符号也包含进去\nvib（选中小括号内的内容） viB（选中大括号内的内容） vi\u0026quot;（选中双引号内的内容） vi\u0026rsquo;（选中单引号内的内容） vi\u0026lt;（选中尖括号内的内容） 3.6 撤回、查找、替换 u： 撤回上次操作(效果跟 command + z 效果一样) /|?xxx：表示在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示向上查找.其中xxx可以是正规表达式。查找到以后, 再输入 n 查找下一个匹配处, 输入 N 反方向查找. :%s/original/replacement：检索第一个 “original” 字符串并将其替换成 “replacement” :%s/original/replacement/g： 检索并将所有的 “original” 替换为 “replacement” :%s/original/replacement/gc：检索出所有的 “original” 字符串，但在替换成 “replacement” 前，先询问是否替换 这些操作一般编辑器都自带有很好的快捷键，记不住也没啥。\n4 结束语 我写这篇文章的目的不是为了总结什么知识点（其实当你 vim 用熟了，这些命令完全形成肌肉记忆了，根本不用记下来），或者说想发篇文章之类的，仅仅是想给 vim 做一个宣传，让更多的人接触 vim，让更多的开发者在开发上效率更高。如果你觉得这篇文章对你有帮助，请转发给更多的人让他们都了解了解。\n最后想提醒的就是，对于这些快捷键，死记是很难记完的，根据我总结的一些语义话的方式去记，有公式的记公式，可能要快一点，然后就是多实践，敲多了自己就记住了。我刚开始学的时候，还不知道有那些助记符，基本完全靠死记硬背，我就是用一张纸，然后把命令手写抄到纸上，放在我的电脑旁，忘了就马上拿来看看，别说，效果还挺好的。\n祝你们好运！\n大家好，我是桃翁，我为自己代言！\n个人微信公众号 参考文章： VIM 百度百科 如何用Vim提高开发效率\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/50/","summary":"个人站点：桃园\n0. 前言 0.1 简介 vim 被誉为『编辑器之神』，与之同时代的 emacs 被誉为『神之编辑器』。可以看得出 vim 在编辑器的地位是很高的，得益于 vim 的指法，敲起代码来如行云流水。特别膜拜创始人创始出这么方便的敲代码的指法，这篇文章就是来带你入坑 vim 指法操作。\n0.2 前端的我为什么要学习 vim 在当今前端开发工具百花齐放的时代（VS Code、Sublime、Atom 以及 IDE Webstorm），我为什么还要介绍 20 多年前开发的一个老古董呢？在这里我想说的是出身虽然老，但是所带来的价值并没有减,一旦习惯了 vim 的指法之后，你会觉得不用 vim 操作写代码会觉得很不习惯，甚至不知道怎么操作。然而用在支持 vim 指法的编辑上写代码你会觉得如行云流水，如果再配个机械键盘，简直是享受，特别符合极客的风格。\n一旦学会了 vim 的指法，会让你终身受益，至少在你敲代码的年代会收益，毫无夸张, 它会让你摆脱烦人的，在敲代码的时候频繁的移动鼠标，这也是 vim 的设计理念之一 \u0026ndash; 脱离鼠标。\n0.3 文章适用读者 本篇文章比较适合前端开发者，因为我也只是用 vim 在前端领域做过一些开发，其他领域我没有发言权。\n0.4 Q\u0026amp;A Q：你推荐 vim 是要我们完全放弃以前的编辑器而投入 vim 的怀抱吗？\nA：当然不是。首先 vim 的学习成本还是很高的，因为他跟平时我们用的编辑器敲代码的方式根本不同，因为它是不用鼠标的，纯键盘操作。你想想如果你在你的 vs code 上不用鼠标操作，你上下左右全靠方向键，那敲代码的速度得有多慢。而且初学者想把 vim 打造成一个自己的 IDE 还是很有难度的。所以我这里推荐的是，不管是你的 vs code、sublime等，装一个 vim 插件。我在 vs code 上试过，很爽，只不过现在投身到 emacs 的怀抱了。","title":"vim 入门指南"},{"content":"1. 数组 数组是平时使用最常用的数据结构，在JavaScript中数组是动态的分配大小,在这里我不会介绍JavaScript里面数组的所有的方法，而是针对数据结构这个方向谈谈所用到的方法。\n1.1 创建和初始化数组 //创建空数组\rvar array = new Array();\r//[]\r//初始化数组\rvar array = new Array(1,2,3); var array = Array.of(1,2,3);//ES6的方法\r//[1,2,3]\r//创建大小为5的数组\rvar array = new Array();//ES6的方法\r//[undefined,undefined,undefined,undefined,undefined]\r//给数组赋值\rvar array = new Array();\rarray[0] = 1 ;\rarray[1] = 2 ;\rarray[2] = 3 ;\r//[1,2,3] 1.2 添加元素 1.2.1往数组后添加元素 var number = [1,2,3];\rnumber[number.length] = 4;\r//[1,2,3,4]\r//或者\rvar number = [1,2,3];\rnumber.push(4);\r//[1,2,3,4] 1.2.2往数组前面添加元素 var number = [1,2,3];\rnumber.unshift(0);\r//[0,1,2,3]\rnumber.unshift(-2,-1);\r//[-2,-1,0,1,2,3] 1.2.3往数组的任意位置插入元素 运用splice方法\n//在索引1后面添加2，3，4\rvar number = [1,5,6];\rnumber.splice(1,0,2,3,4);\r//[1,2,3,4,5,6] 1.3 删除元素 1.3.1 删除第一位 var number = [1,2,3];\rnumber.shift();\r//[2,3] 1.3.2 删除任意位置 使用splice方法删除数组任意位置的元素\nvar numebr = [1,2,3,4,5,6];\r//如果想删除元素3\rnumber.splice(2,1);\r//[1,2,4,5,6]\r//如果想删除元素4，5\rnumber.splice(3,2); 1.4 排序 1.4.1 反序 var number = [3,2,1];\rnumber.reverse();\r//[1,2,3] 1.4.2 自然排序 var numebr = [2,3,4,1,3,7];\rnumber.sort();\r//[1,2,3,3,4,7] 1.4.3 自定义排序 这个自定义排序跟java里面实现comparator接口一个意思。用处可大了。\nvar number = [4,5,6,7,1,2,3,8,9,10,11,12,13];\rnumber.sort();\r//[1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9] 仿佛看起有点不对啊，我们应该想要的是 [1,2,3,4,5,6,7,8,9,10,11,12,13],这个时候我们就用自定义排序来解决这个问题\nvar number = [4,5,6,7,1,2,3,8,9,10,11,12,13];\rfunction compare(a,b){\rif(a \u0026lt; b){\rreturn -1;\r}\rif(a \u0026gt; b){\rreturn 1;\r}\rreturn 0;\r}\rnumber.sort(compare);\r//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] 这还只是最简单的，也可以对任何对象类型进行数组排序。例如，对象Person有名字和年龄属性，我们希望根据年龄排序\nvar friends = [{name:\u0026#39;李晨\u0026#39;,age:40},{name:\u0026#39;范冰冰\u0026#39;,age:35}];\rfunction comparePerson(a,b){\rif(a.age \u0026lt; b.age){\rreturn -1;\r}\rif(a.age \u0026gt; b.age){\rreturn 1;\r}\rreturn 0;\r}\rfriends.sort(comparePerson);\r//[{name:\u0026#39;范冰冰\u0026#39;,age:35},{name:\u0026#39;李晨\u0026#39;,age:40}] 1.5 搜索 搜索有两个方法：indexOf方法返回与参数匹配的第一个元素的索引，lastIndexOf返回与参数匹配的最后一个元素的索引。\nvar number = [1,3,4,3,56,6,7,4];\rnumber.indexOf(3);//1\rnumber.lastIndexOf(3)//3 2. 栈 栈是一种遵循后进先出(LIFO)原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。在JavaScript中变量保存和函数调用都是用栈存储的。\n首先创建一个类来表示一个栈，需要一种数据结构来保存栈里的元素。这里我们就选择刚学的数组：var items = []; 接下来，为我们的栈声明一些方法：\npush(elements(s)):添加一个（或几个）新元素到栈顶 pop():移除栈顶的元素，同时返回被移除的元素 peek():获取栈顶的元素，不对栈做出任何修改 isEmpty():如果栈里没有任何元素就返回true,否则返回false； clear():清空栈 size():返回栈元素的个数 如果上一节数组认真看了，我相信用JavaScript实现一个栈是非常简单的。在这里就直接来代码了，不用一个方法一个方法去解释了。\nfunction Stack(){\rvar items = [];\rthis.push = function(element){\ritems.push(element);\r}\rthis.pop = function(){\rreturn items.pop();\r}\rthis.peek = function(){\rreturn items[items.length-1];\r}\rthis.isEmpty = function(){\rreturn items.length === 0;\r}\rthis.size = function(){\rreturn items.length;\r}\rthis.clear = function(){\ritems = [];\r}\rthis.print = funciton(){\rconsole.log(items.toString());\r}\r} 3. 队列 队列是遵循先来先服务(FIFO)原则的一组有序的项。队列在尾部添加新元素，并从顶部移除元素。最新添加的元素排在队列的末尾。\n在现实生活中常见的例子就是排队。 在计算机科学中，一个常见的例子就是打印队列，先点击打印的文档会被先打印。\n3.1 创建队列 同样先创建一个类来表示一个队列。需要用到的数据结构同样是数组var items = []; 声明可用的方法：\nenqueue(element(s)):向队尾添加一个（或多个）新的项 dequeue():移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。 front():返回队列中第一个元素 isEmpty():如果队列中不包含元素返回true，否则返回false size():返回队列包含元素的个数 完整的Queue类 function Queue(){\rvar items = [];\rthis.enqueue = function(element){\ritems.push(element);\r}\rthis.dequeue = function(){\rreturn items.shift();\r}\rthis.front = function(){\rreturn items[0];\r}\rthis.isEmpty = function(){\rreturn items.length === 0;\r}\rthis.clear = function(){\ritems = [];\r}\rthis.size = funciton(){\rreturn items.length;\r}\rthis.print = function(){\rconsole.log(items.toString());\r}\r} 3.2 优先队列 在优先队列中，元素被赋予优先级。当访问元素的时，具有最高优先级的元素先删除。优先队列具有最高进先出的行为特征。例如：医院的急救室为病人赋予优先级（这个优先级可以指病情严重的成程度），具有最高优先级的病人最先得到治疗。\n实现一个优先队列有两种选项：\n设置优先级，然后在正确的位置添加元素； 用入列操作添加元素，然后按照优先级移除它们。 我们这里采用第一种。\nfunction PriorityQueue(){\rvar items = [];\rfunciton QueueElement(element,priority){\rthis.element = element;\rthis.priority = priority;\r}\rfunction comparePriority(a,b){\rif(a.priority \u0026gt; b.priority){\rreturn 1;\r}\rif(a.priority \u0026lt; b.priority){\rreturn -1;\r}\rreturn 0;\r}\rthis.enqueue = funciton(element,priority){\rvar queueElement = new QueueElement(element,priority);\ritems.push(queueElement);\ritems.sort(comparePriority);\r}\r//其它方法和默认的Queue实现相同\r} 当然，这个enqueue的实现方法很多种，我这效率不是最高的，但是容易理解。将插入的元素根据优先级排个序，那么先出去的就是优先级最高的了。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/42/","summary":"1. 数组 数组是平时使用最常用的数据结构，在JavaScript中数组是动态的分配大小,在这里我不会介绍JavaScript里面数组的所有的方法，而是针对数据结构这个方向谈谈所用到的方法。\n1.1 创建和初始化数组 //创建空数组\rvar array = new Array();\r//[]\r//初始化数组\rvar array = new Array(1,2,3); var array = Array.of(1,2,3);//ES6的方法\r//[1,2,3]\r//创建大小为5的数组\rvar array = new Array();//ES6的方法\r//[undefined,undefined,undefined,undefined,undefined]\r//给数组赋值\rvar array = new Array();\rarray[0] = 1 ;\rarray[1] = 2 ;\rarray[2] = 3 ;\r//[1,2,3] 1.2 添加元素 1.2.1往数组后添加元素 var number = [1,2,3];\rnumber[number.length] = 4;\r//[1,2,3,4]\r//或者\rvar number = [1,2,3];\rnumber.push(4);\r//[1,2,3,4] 1.2.2往数组前面添加元素 var number = [1,2,3];\rnumber.","title":"JavaScript数据结构之数组栈队列"},{"content":" 欢迎访问我的个人站点\n1. 概述 简介 Symbol 是一种特殊的、不可变的数据类型，可以作为对象属性的标识符使用，表示独一无二的值。Symbol 对象是一个 symbol primitive data type 的隐式对象包装器。它是JavaScript语言的第七种数据类型，前6种分别是：Undefined、Null、Boolean、String、Number、Object。\n语法 Symbol([description])\nParameters description : 可选的字符串。可用于调试但不访问符号本身的符号的说明。如果不加参数，在控制台打印的都是Symbol，不利于区分。\ndemo var s1 = Symbol('symbol1');\rs1 //Symbol(symbol1); 因为Symbol函数返回的值都是独一无二的，所以Symbol函数返回的值都是不相等的。\n//无参数\rvar s1 = Symbol();\rvar s2 = Symbol();\rs1 === s2 // false\r//有参数\rvar s1 = Symbol('symbol');\rvar s2 = Symbol('symbol');\rs1 === s2 //false\r2. 作为属性名的Symbol 由于每一个Symbol值都是不相等的，那么作为属性标识符是一种非常好的选择。\n定义方式： let symbolProp = Symbol();\rvar obj = {};\robj[symbolProp] = 'hello Symbol';\r//或者\rvar obj = {\r[symbolProp] : 'hello Symbol';\r}\r//或者\rvar obj = {};\rObject.defineProperty(obj,symbolProp,{value : 'hello Symbol'});\r注意 定义属性的时候只能将Symbol值放在方括号里面，否则属性的键名会当做字符串而不是Symbol值。同理，在访问Symbol属性的时候也不能通过点运算符去访问，点运算符后面总是字符串，不会读取Symbol值作为标识符所指代的值.\nSymbol类型定义常量 常量的使用Symbol值最大的好处就是其他任何值都不可能有相同的值，用来设计switch语句是一种很好的方式。例如：消除魔术字符串（这里留给读者思考，如果有什么疑问，可以给我留言）\n3. Symbol.for(),Symbol.keyFor() Symbol.for() 对于Symbol.for方法需要记住两点:\nSymbol.for()所返回的Symbol值的作用域是==整个代码库==（包括不同的iframe或者service worker），是一个全局的变量,第一次产生的时候就会登记下来。 调用Symbol.for()的时候，如果在全局环境中检索给定的key是否存在，如果不存在才会新建一个值,而Symbol()不会，Symbol()每次返回的都是不同的值。 Symbol.for(\u0026#39;foo\u0026#39;) === Symbol.for(\u0026#39;foo\u0026#39;); //true\rSymbol(\u0026#39;foo\u0026#39;) === Symbol(\u0026#39;foo\u0026#39;); //false Symbol.keyFor() Symbol.keyFor方法返回一个已登记的Symbol类型的值的key。\nvar s1 = Symbol.for(\u0026#39;foo\u0026#39;);\rSymbol.keyFor(s1) //\u0026#34;foo\u0026#34;\rvar s2 = Symbol(\u0026#39;foo\u0026#39;);\rSymbol.keyFor(s2);//undefiend 上面的代码中，变量s2属于未登记的Symbol值，所以返回undefined\n4. 属性名的遍历 Symbol作为属性名，虽然不是私有属性，但是在for\u0026hellip;in,for\u0026hellip;of循环中，Object.keys(),Object.getOwnPropertyNames()都不会获取到。通常通过两种方法达到Symbol属性的遍历。\nObject.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有Symbol值的属性。 Reflect.ownKeys()可以返回所有类型的键名，包括包括常规的键名和Symbol键名. 下面给出一个例子来解释上面所有的。\nvar obj = {};\rvar a = Symbol(\u0026#39;a\u0026#39;);\rvar b = Symbol(\u0026#39;b\u0026#39;);\robj[a] = \u0026#39;hello\u0026#39;;\robj[b] = \u0026#39;world\u0026#39;;\r//获取不到\rfor(var i in obj){\rconsole.log(i); //无输出\r}\rObject.getOwnPropertyNames(obj);//[]\r//可以获取\rvar objectSymbols = Object.getOwnPropertySymbols(obj);\robjectSymbols// [Symbol(a), Symbol(b)]\rReflect.ownKeys(obj);//[Symbol(a), Symbol(b)] 以Symbol值作为名称的属性不会被常规方法遍历所得到。我们可以利用这个特性，为对象定义一些非私有但又希望只用于内部的方法。\nvar size = Symbol(\u0026#39;size\u0026#39;);\rclass Collection {\rconstructor(){\rthis[size] = 0;\r}\radd(item){\rthis[this[size]] = item;\rthis[size]++;\r}\rstatic sizeOf(instance){\rreturn instance[size];\r}\r}\rvar x = new Collection();\rCollection.sizeOf(x); //0\rx.add(\u0026#39;foo\u0026#39;);\rCollection.sizeOf(x); //1\rObject.keys(x)//[\u0026#39;0\u0026#39;]\rObject.getOwnPropertyNames(x) //[\u0026#39;0\u0026#39;]\rObject.getOwnPropertySymbols(x) //[Symbol(size)] 上面的代码中，对象x的size属性是一个Symbol值，所以Object.keys(x)、Object.getOwnPropertyNames(x)都无法获取它。这就造成了一种非私有的内部方法的效果。如果对ES6定义类方面还不清楚的，可以先不看这段，或者自己查查资料，后面的文章我也会分享出来，总的来说现在JavaScript的新标准越来越像Java了，比如新增的const、let块级作用域，class定义类等等。\n内置的Symbol值 除了自己定义的Symbol值外，JavaScript有一些内置的Symbol表示的内部语言行为不在ECMAScript 5及以前暴露给开发者。这些Symbol可以被访问被下列属性:\n1. Symbol.iterator 返回对象的默认迭代器的方法。被for\u0026hellip;of使用\n2. Symbol.math 与字符串匹配的方法，也用于判断对象是否可以用作正则表达式.被 String.prototype.match()使用。\n3. Symbol.replace 一种方法取代匹配字符串的子串。被String.prototype.replace()使用。\n4. Symbol.search 返回与正则表达式匹配的字符串内返回索引的方法。被String.prototype.search()使用。\n5. Symbol.split 在与正则表达式匹配的索引处拆分字符串的方法。被String.prototype.split()使用.\n6. Symbol.hasInstance 确定构造函数对象是否将对象作为实例识别的方法。被instanceof使用\n7. Symbol.isConcatSpreadable 一个布尔值，指示对象是否应该被扁平化为数组元素。被Array.prototype.concat()使用.\n8. Symbol.unscopables 从关联对象的环境绑定中排除其自身和继承的属性名称的对象值。被with使用\n9. Symbol.species 用于创建派生对象的构造函数。\n10. Symbol.toPrimitive 将对象转换为原始值的方法。\n11. Symbol.toStringTag 用于对象的默认描述的字符串值。被Object.prototype.toString()使用.\n我这里没给出具体的例子，针对这11个属性。忘读者自己主动去把这几个属性搞懂，对理解有些方法是非常有用的。\n参考资料： 阮一峰的ES6标准入门\nSymbol|-JavaScript|MDN\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/41/","summary":"欢迎访问我的个人站点\n1. 概述 简介 Symbol 是一种特殊的、不可变的数据类型，可以作为对象属性的标识符使用，表示独一无二的值。Symbol 对象是一个 symbol primitive data type 的隐式对象包装器。它是JavaScript语言的第七种数据类型，前6种分别是：Undefined、Null、Boolean、String、Number、Object。\n语法 Symbol([description])\nParameters description : 可选的字符串。可用于调试但不访问符号本身的符号的说明。如果不加参数，在控制台打印的都是Symbol，不利于区分。\ndemo var s1 = Symbol('symbol1');\rs1 //Symbol(symbol1); 因为Symbol函数返回的值都是独一无二的，所以Symbol函数返回的值都是不相等的。\n//无参数\rvar s1 = Symbol();\rvar s2 = Symbol();\rs1 === s2 // false\r//有参数\rvar s1 = Symbol('symbol');\rvar s2 = Symbol('symbol');\rs1 === s2 //false\r2. 作为属性名的Symbol 由于每一个Symbol值都是不相等的，那么作为属性标识符是一种非常好的选择。\n定义方式： let symbolProp = Symbol();\rvar obj = {};\robj[symbolProp] = 'hello Symbol';\r//或者\rvar obj = {\r[symbolProp] : 'hello Symbol';\r}\r//或者\rvar obj = {};\rObject.","title":"ES6之路--Symbol"},{"content":"editorconfig 是在项目存储库中有一个名为 .editorconfig 的文件，这样参与的开发者的编辑和 ide 可以自动调整。\n有一个 emacs/spacemacs 模式，可以很容易地在以下步骤中进行集成：\n将 editorconfig 添加到 dotspacemacs-additional-packages。 将（editorconfig-mode 1）添加到 dotspacemacs/user-config。 更多的细节记录在插件库的 README。\n源码片段 第一步：添加插件到 additional packages:\ndotspacemacs-additional-packages \u0026#39;( editorconfig ) 第二步：从你的 user-config 激活插件：\n(defun dotspacemacs/user-config () (editorconfig-mode 1) ) ","permalink":"/posts/%E6%8A%80%E6%9C%AF/37/","summary":"editorconfig 是在项目存储库中有一个名为 .editorconfig 的文件，这样参与的开发者的编辑和 ide 可以自动调整。\n有一个 emacs/spacemacs 模式，可以很容易地在以下步骤中进行集成：\n将 editorconfig 添加到 dotspacemacs-additional-packages。 将（editorconfig-mode 1）添加到 dotspacemacs/user-config。 更多的细节记录在插件库的 README。\n源码片段 第一步：添加插件到 additional packages:\ndotspacemacs-additional-packages \u0026#39;( editorconfig ) 第二步：从你的 user-config 激活插件：\n(defun dotspacemacs/user-config () (editorconfig-mode 1) ) ","title":"在spacemacs中支持editorconfig"},{"content":"1. 属性的简洁表示法 ES6允许直接写入变量和函数作为对象的属性和方法。意思就是说允许在对象中只写属性名，不用写属性值。这时，属性值等于属性名称所代表的变量。下面分别举一个例子来说明：\n属性： function getPoint(){ var x = 1 ; var y = 2; return {x,y} } 等同于\nfucntion getPoint(x,y){ var x = 1 ; var y = 2; return {x:x,y:y} } 测试：\ngetPoint();//{x:1,y:10} 函数： var obj = { fun(){ return \u0026#34;simply function\u0026#34;; } }; 等同于\nvar obj = { fun: function(){ return \u0026#34;simply function\u0026#34;; } } 测试：\nobj.fun();//simply function 2. 属性名表达式 ES6里允许定义对象的时候用表达式作为对象的属性名或者方法名，即把表达式放在方括号里。\n属性 let propKey = \u0026#39;foo\u0026#39;; let obj = { [propKey] : true, [\u0026#39;a\u0026#39;+\u0026#39;bc\u0026#39;] : 123 } 测试：\nobj.foo; //true\robj.abc ; //123\r方法 let obj = { [\u0026#39;h\u0026#39;+\u0026#39;ello\u0026#39;](){ return \u0026#34;hello world\u0026#34;; } } 测试：\nobj.hello();//hello world\r注意： 属性名表达式与简介表达式不能同时使用。\n//错误的 var foo = \u0026#39;bar\u0026#39;; var bar = \u0026#39;abc\u0026#39;; var baz = { [foo] }; //正确 var foo = \u0026#39;bar\u0026#39;; var baz = { [foo] : \u0026#39;abc\u0026#39;} 方法的name属性 这个比较容易理解，直接阐述文字。\n函数的name属性返回函数名。对象方法也是函数，因此也有函数名。\n一般情况方法的name属性返回函数名 如果是取值函数会在函数名前加\u0026quot;get\u0026quot; 如果是存值函数会在函数名前加\u0026quot;set\u0026quot; 如果bind方法创建的函数会在函数名前加\u0026quot;bound\u0026quot; 如果是Function构造函数创建的函数，会在函数名前加\u0026quot;anonymous\u0026quot; 如果对象的方法是一个Symbol值，那么name属性返回的是这个Symbol值的描述 Oject.is() Object.is()用来比较两个值yan\u0026rsquo;ge严格相等。与严格比价运算符（===）的行为基本一致。不同之处只有两个：一是 +0 不等于 -0 ，二是NaN等于自身\n+0 === -0 //true\rNaN === NaN //false\rObject.is(+0,-0);//false\rObject.is(NaN,NaN);//true\rOject.assign() Object.assign()方法是用于将源对象的可枚举属性复制到目标对象。它至少需要两个参数，第一是目标对象，后面的全是源对象。\n注意： 每个参数必须是对象，否则会报TypeError错误。 如果目标对象与源对象有同名属性，或多个源对象有同名的属性，则后面的属性会覆盖前面的属性 Object.assign只复制自身属性，不可枚举的属性和继承属性不会被复制 属性名为Symbol值的属性，也会被Object。assign复制。 demo：\nvar target = {a:1,b:2}; var source1 = {a:2,c:5}; var source2 = {a:3,d:6}; Object.assign(target,source1,source2); target//{a:3,b:2,c:5,d:6} Object.assign可用于处理数组，但是会将其视为对象 Object.assign([1,2,3],[4,5]); //[4,5,3] 其他用处 为对象添加属性 为对象添加方法 克隆对象 合并多个对象 为属性指定默认值 具体例子参考阮一峰的ES6标准入门\n属性的可枚举性 对象的没个属性都有一个描述对象(Descriptor)，可通过Object.getOwnPropertyDescriptor(object,prop),object表示对象，prop表示对象的里的一个属性，用的时候需要加上引号。描述对象里面有个enumerable（可枚举性）属性，来描述该属性是否可枚举。\nES5中会忽略enumerable为false的属性\nfor\u0026hellip;in循环：只遍历对象自身和继承的可枚举属性（包含继承） Object.keys():返回对象自身的所有可枚举属性的键名 Json.stringify():只串行化对象自身的可枚举属性 ES6新增的操作\nObject.assign(): 只复制对象自身的可枚举属性 Reflect.enumerate(): 返回所有for\u0026hellip;in循环会遍历的属性（包含继承） 属性的遍历 ES6中一共有6中方法可以遍历对象的属性。\nfor\u0026hellip;in循环遍历对象自身和继承的可枚举的属性（不含Symbol属性） Object.keys(obj)返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性，但是包含不可枚举属性） Object.getOwnPropertySymbols(obj)返回一个数组，包含对象自身的所有Symbol属性。 Relect.ownKeys(obj)返回一个数组，包含对象的所有属性，包含属性名是Symbol或者字符串，也不管是否可枚举。 Reflect.enumerate(obj)返回一个Iterator对象，遍历对象自身的和继承的所有可枚举属性（不含Symbol）,与for\u0026hellip;in相同 以上6种方法遍历对象的属性遵守同样的属性遍历次序规则\n首先遍历所有属性名为数值的属性，按照数字排序\n其次遍历所有属性名为字符串的属性，按照生成时间排序\n最后遍历所有属性名为Symbol值的属性，按照生成时间排序\nReflect.ownkeys({[Symbol()]:0,b:0,10:0,2:0,a:0}) //[\u0026lsquo;2\u0026rsquo;,\u0026lsquo;10\u0026rsquo;,\u0026lsquo;b\u0026rsquo;,\u0026lsquo;a\u0026rsquo;,Symbol()]\nproto 属性，Object.setPrototypeOf(),Object.getPrototypeOf() proto 属性 （前后应该有两个下划线，这里没显示出来）。用来读取或者设置当前对象的prototype对象。但是一般不直接对这个属性进行操作，而是通过Object.setProtortypeOf()（写操作）、Object.getPrototypeOf()（读操作）或者Object.create()（生成操作）代替。\nObject.setProtortypeOf() let proto = {}; let obj = { x : 10}; Object.setProtortypeOf(obj,proto); proto.y = 20; proto.z = 40; obj.x //10 obj.y //20 obj.z //40 Object.getProtortypeOf() function Rectangle(){} var rec = new Rectangle(); Object.getPrototypeOf(rec) === Rectangele.prototype // true 对象的扩展运算符 ES7中提案，将rest参数/扩展运算符（\u0026hellip;）引入对象。\nRest参数 Rest参数用于从一个对象取值，相当于将所有可遍历尚未被读取的属性，分配到制定的对象上。所有的键及其值都会复制到新对象上。需要注意的是rest参数的复制是浅复制，并且也不会复制继承自原型对象的属性。\n简单的demo\nlet {x,y,...k} = {x:2, y:3,z:4,a:5}; x //2 y //3 k //{z:4,a:5} 扩展运算符 扩展运算符用于取出参数对象的所有可遍历属性，复制到当前对象中。\nlet z = {a:3 ,b:4}; let n = {...z}; n //{a:3,b:4} 扩展运算符还可以合并两个对象。\nlet a = { c:5,d:6 }; let b = { e:7,f:8 }; let ab = {...a,...b}; ab //{c:5,d:6,e:7,f:7} 扩展运算符还可以自定义属性，会在新对象中覆盖掉原有参数。\nlet a = {x:1,y:2}; let aWithOverides = {...a,x:3,y:4}; aWithOverides //{x:3,y:4} ","permalink":"/posts/%E6%8A%80%E6%9C%AF/24/","summary":"\u003ch3 id=\"1-属性的简洁表示法\"\u003e1. 属性的简洁表示法\u003c/h3\u003e\n\u003cp\u003eES6允许直接写入变量和函数作为对象的属性和方法。意思就是说允许在对象中只写属性名，不用写属性值。这时，属性值等于属性名称所代表的变量。下面分别举一个例子来说明：\u003c/p\u003e","title":"ES6之对象的扩展"},{"content":"今天我想谈的react的优势有两点：\n声明式写法更符合人性 减少dom操作使性能得以提升 现在我们就写一个最简单的计数例子来比较传统的jquery和react。\njquery方式\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button id=\u0026#34;btn_click\u0026#34; type=\u0026#34;button\u0026#34; name=\u0026#34;button\u0026#34;\u0026gt;click me\u0026lt;/button\u0026gt; \u0026lt;span id=\u0026#34;value\u0026#34;\u0026gt;0\u0026lt;/span\u0026gt; \u0026lt;script src=\u0026#34;./jquery-3.2.1.js\u0026#34; charset=\u0026#34;utf-8\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; $(function(){ $(\u0026#34;#btn_click\u0026#34;).click(function(event) { /* Act on the event */ var clickCounter = $(\u0026#34;#value\u0026#34;); var count = parseInt(clickCounter.text(),10); clickCounter.text(count+1); }); }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; react方式 class App extends Component { constructor(props){ super(props); this.onClickButton = this.onClickButton.bind(this); this.state = {count : 0}; } onClickButton(){ this.setState({ count : this.state.count + 1 }); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;button id=\u0026#34;btn_click\u0026#34; type=\u0026#34;button\u0026#34; onClick={this.onClickButton}\u0026gt;click me\u0026lt;/button\u0026gt; \u0026lt;span id=\u0026#34;value\u0026#34;\u0026gt;{this.state.count}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; ); } } 看懂了上面上个例子，现在我们就开始比较了。\njQuery的工作方式 命令式编程，所谓命令式就是你需要告诉计算机一步一步怎么做。\n在jquery的解决方案中， 找到clickCount的按钮，挂上一个匿名事件处理函数，在事件处理函数汇总， 选中那个需要修改的DOM元素， 读取其中文本值， 加已修改 然后修改这个DOM元素。 其中只有第4步是用js处理，不用跟DOM打交道的，做前端的都知道在性能优化中，重要的一条就是减少DOM操作。\n选中一些DOM元素，然后对这些元素做一些操作，这种模式是一种很容易理解的模式。以至于John Resig一创造出jQuery就被世间普遍认可。但是，对于庞大的项目，代码结构复杂，难以维护，性能也跟不上。\nReact的工作方式 声明式编程，你只需要告诉计算机你需要什么就行了，不需要关心怎么去做的。\n现在用统一通俗的例子来比较jQuery的命令和React的声明式。React是一个聪明的建筑工人，而jQuery是一个比较傻的建筑工人，开发者你是一个建筑工程师，如果是jQuery这个建筑工人为你工作，你不得不事无巨细地告诉jQuery“如何去做”，要告诉他这面墙要拆掉重建，那面墙上要新开一个窗户，反之，如果是React这个建筑工人为你工作，你所要做的就是告诉这个工人“我想要什么样子”，只需要把图纸递给React这个工人，他就会替你搞定一切，当然他不会把整个建筑拆掉重建，而是很聪明地把这次的图纸和上次的图纸做一个对比，发现不同之处，然后只去做适当的修改就完成任务了。\nreact的解决方式 在第一构建出DOM树之后，还会构建出一个Virtual DOM，是对DOM树的抽象，是一个JavaScript对象，重新渲染的时候，会对比这一次产生的Virtual DOM和上一次渲染的Virtual DOM，对比发现差异之后，只需修改真正的DOM树时就只需要触及差别中的部分就行，对于diff算法比较复杂，后面我也会整理出来和大家分享。\n以刚才的例子。其实改变的只有span里的内容数字，所以react对于其他的DOM元素都不需要触及，于是执行类似下面的语句，就完成了任务。\ndocument.getElementByID(\u0026ldquo;value\u0026rdquo;).innerHTML = \u0026ldquo;1\u0026rdquo;; 相对于jQuery还要去访问，操作那么多次DOM，性能是大大的提高了。\n纯属个人愚见，有什么错误的还希望大佬指出来。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/20/","summary":"\u003cp\u003e今天我想谈的react的优势有两点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e声明式写法更符合人性\u003c/li\u003e\n\u003cli\u003e减少dom操作使性能得以提升\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e现在我们就写一个最简单的计数例子来比较传统的jquery和react。\u003c/p\u003e","title":"一个例子来谈react的两大优势"},{"content":"数据库基础知识\n需要掌握一定的商业知识\n建模：程序流程图、数据流程图DFD、时序图、状态图\n软件开发阶段：系统规划、系统分析、系统实施、运行维护、测试阶段\nE-R图:由实体、属性、关系组成\n实体间的关系：基数、元、关联\n使用关联的情况：\n两个实体间的关系存在自身的属性 实体间存在多元关系 表的主键：不能重复而且不能为空。例如 学号、身份证号，如果不能从已有字段中提取出一个字段、可以自己设置一个没有实际意义的字段\n外键 的使用\n约束条件：主键（primary key）约束、外键（foreign key）约束、唯一性（unique）约束、 默认值（default）约束、非空（not NULL）约束、检查（check）约束\n创建表时，先创建父表，再创建字表； 字表的外键字段与父表的主键字段的 数据类型相同\n选数据类型：数据类型越简单越好 尽量用整数代替字符串 所以主键用整数插询效 率较高 存储IP地址时也可以用整数\n为了支持中文简体 字符集设置为gbk 为了支持外键约束 存储引擎设置为InnoDB\n复制表格：\ncreate table 新表名 like 原表； create table 新表名 select *from 原表 修改字段信息：\n删除字段：alter table 表名 drop 字段名 添加字段名：alter table 表名 新字段名数据类型【约束条件】【first|after 就字段名】 修改字段名：alter table 表名 change 旧字段名 新字段名 数据 类型 修改数据类型：alter table 表名 modify 字段名 数据类型 插入新纪录：insert into 表名【（字段列表）】 values（值列表）注意：向char varchar text 以及日期型的字段插入数据时，字段值要用单引号括起来\n批量插入多条记录：insert into 表名【（字段列表）】 values（值列表1）、（值列表2）、\u0026hellip;..；\n修改表记录：update 表名；Set 字段名 1=值1，字段名2=值2\u0026hellip;\u0026hellip;【where条件表达式】（while子句指定了表中的哪些记录需要修改，若省略了where子句，则表示 修改表中的所有记录）\n删除表：delete from 表名【where 条件表达式】Select语句：\nSelect字段列表（“，分隔” 用“as”关键字分隔）From 数据源【where 条件表达式】【group by 分组字段【having 条件表达式】】【order by 排序字段【asc|desc】】（数据源可以是表也可以是视图）（asc升序 desc降序）（多表查询的时候，同名字字段前必须加表名前缀，中间用“.”）\n过滤记录：\ndistinct 过滤结果集中的重复记录；Distinct 字段名 from 数据源 limit查询某几行记录。Select 字段列表 From 数据源 Limit 【start，】length；（limit接受一个或两个整数参数，start表示从第几行记录开始检索，length表示检索多少行记录。表中第一行记录的start值为0（不是1）） 使用from子句指定数据源（两种）\n其中一种语法：From 表名1 【连接类型】 join 表名2 on 表1和表2之间的连接条件 内连接 外链接（左连接，右连接）。例如：左连接 意味着查询结果集中包含表1的全部记录 ，然后表1按指定的连接条件与表2进行连接。若表2中没有满足连接条件的记录，则结果集中表2相应的字段填入NULL 多表连接：from 表1 【连接类型】 join 表1 on 表1和表2之间的连接条件，【连接类型】 join 表3 on 表2和表3的连接条件\nNULL与NULL不能使用等比较运算符比较。可以用 is not 或者not\n逻辑运算符：“and” “or” “！” “【not】..and..” “【not】in 数学集合”\n字符串表达式 【not】 like 模式 （可以理解为一个正则表达式）字符集设置为gbk_chinese_ci或者 gbk2312_chinese_ci 模式匹配时英文字母不区分大小写，而设置为gbk_bin或者gbk_2312_bin时要区分（模式是一个字符串，包括普通字符和通配符）通配符：“%” 匹配零个或多个字符组成的任意字符串_(下划线) 匹配任意一个字符\norder by 字段名1 【asc|desc】 【\u0026hellip;，字段名n 【asc|desc】\nGroup by子句对记录分组统计Group by 字段列表【 - having 条件表达式】 【with rollup】单独用group by意义不大 一般与聚合函数集合 （看例子）\ngroup by子句与having\nHaving用于设置分组或聚合函数的过滤筛选条件 在select语句 先对where进行筛选 接着group by子句对where的输出分组，最后having子句从分组的结果中再进行筛选。语法：Select 字段列表 From 数据源 Where 条件表达式 Group by 分组字段 having 条件表达式 group by子句与group_concat（）\ngroup_concat（）与concat（）有一个功能相同，另外还可以用逗号将字段的值连接起来（看例子） group by\nWith rollup函数 在分组最后添加一条汇总信息 ","permalink":"/posts/%E6%8A%80%E6%9C%AF/19/","summary":"\u003cp\u003e数据库基础知识\u003c/p\u003e","title":"数据库基础知识"},{"content":"过去编程方式主要是以命令式编程为主，什么意思呢？简单说电脑的思维方式和我们人类的思考方式是不一样的。我们人类的大脑擅长的是分析问题，提出一个解决问题的方案，电脑则是生硬的执行指令，命令式编程就像是给电脑下达命令，让电脑去执行一样，现在主要的编程语言（比如：Java，C，C++等）都是由命令式编程构建起来的。 ​ 而函数式编程就不一样了，这是模仿我们人类的思维方式发明出来的。例如：操作某个数组的每一个元素然后返回一个新数组，如果是计算机的思考方式，会这样想：创建一个新数组=\u0026gt;遍历旧数组=\u0026gt;给新数组赋值。如果是人类的思考方式，会这样想：创建一个数组方法，作用在旧数组上，返回新数组。这样此方法可以被重复利用。而这就是函数式编程了。\n高阶函数可以接受函数作为参数，或者返回一个函数结果或者两者同时。 闭包就是一个函数的作用域，这个作用域通过指向改函数的引用保持存活 科里化（参数缓存，延迟执行） 组合函数 马上计算 声明式与命令式 reduce 自己实现数组中的map\nArray.prototype.map=function(arr,func){ var results = []; for(var i = 0,len = a.length;i\u0026lt;leni++){ if(i in a){ results[i] = f.call(null,a[i],i,a); } return results; } } 自己实现数组中的reduce\nArray.prototype.reduce = function(a,f,initial){ var i = 0,len = a.length,accumulator; //以特定的初始值开始，否则第一个取值自a if(arguments.length \u0026gt; 2){ accumulator = initial; }else{//找到数组中第一个已定义的索引 if(len = 0) throw TypeError(); while(i\u0026lt;len){ if(i in a){ accumulator = a[i++]; break; }else i++; } if(i == len) throw TypeError(); } while(i \u0026lt; len){ if(i in a){ accumulator = f.call(undefined,accumulator,a[i],i,a); i++; } return accumulator; } } ","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/18/","summary":"\u003cp\u003e过去编程方式主要是以命令式编程为主，什么意思呢？简单说电脑的思维方式和我们人类的思考方式是不一样的。我们人类的大脑擅长的是分析问题，提出一个解决问题的方案，电脑则是生硬的执行指令，命令式编程就像是给电脑下达命令，让电脑去执行一样，现在主要的编程语言（比如：Java，C，C++等）都是由命令式编程构建起来的。\n​ 而函数式编程就不一样了，这是模仿我们人类的思维方式发明出来的。例如：操作某个数组的每一个元素然后返回一个新数组，如果是计算机的思考方式，会这样想：创建一个新数组=\u0026gt;遍历旧数组=\u0026gt;给新数组赋值。如果是人类的思考方式，会这样想：创建一个数组方法，作用在旧数组上，返回新数组。这样此方法可以被重复利用。而这就是函数式编程了。\u003c/p\u003e","title":"函数式编程笔记"},{"content":"node.js安装 下载源码\ncd /usr/local/src/ wget https://nodejs.org/dist/v8.6.0/node-v8.6.0.tar.gz 解压源码\ntar zxvf node-v8.6.0.tar.gz 编译安装\ncd node-v8.6.0 ./configure --prefix=/usr/local/node/8.6.0 make make install 遇到错误\nmake[1]: g++：命令未找到 make[1]: *** [/usr/local/src/node-v8.6.0/out/Release/obj.target/icuucx/deps/icu-small/source/common/utrie2_builder.o] 错误 127 rm 8f388ce961ec8cc8196f595f16fdcc7694a5fb89.intermediate make[1]: Leaving directory `/usr/local/src/node-v8.6.0/out\u0026rsquo; make: *** [node] 错误 2 执行\nyum install gcc-c++ 配置NODE_HOME，进入profile编辑环境变量\nvim /etc/profile 设置nodejs环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:\n#set for nodejs export NODE_HOME=/usr/local/node/0.10.24 export PATH=$NODE_HOME/bin:$PATH :wq保存并退出，编译/etc/profile 使配置生效\nsource /etc/profile 验证是否安装配置成功\nnode -v npm模块安装路径 /usr/local/node/8.6.0/lib/node_modules/\nmongodb安装 下载安装包 下载地址：https://www.mongodb.com/download-center#community 下载的时候自己根据自己的系统和版本下载 解压tgz安装包\ntar -zxvf mongodb-linux-x86_64-3.4.9.tgz 将解压包拷贝到指定目录\nmv mongodb-linux-x86_64-3.4.9.tgz/ /usr/local/mongodb MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中\n用vi打开profile\nvi /etc/profile classpath添加路径 export CLASSPATH=/usr/local/mongodb/bin;\n使profile生效\nsource /etc/profile 关于linux详细更多的添加环境变量只是点我\n","permalink":"/posts/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/17/","summary":"\u003ch2 id=\"nodejs安装\"\u003enode.js安装\u003c/h2\u003e\n\u003cp\u003e下载源码\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /usr/local/src/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ewget https://nodejs.org/dist/v8.6.0/node-v8.6.0.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"cenos下安装node.js和mongodb"},{"content":"2017年微信收藏的文章\n性能优化 其他 优化浏览器关键渲染路径 - 开启性能优化之旅\n高性能滚动 scroll 及页面渲染优化\n理论 | HTML写法对gzip压缩率的影响\n唯快不破：Web 应用的 13 个优化步骤\n进阶|鹅厂大神用Node直出实现网页\u0026quot;瞬开\u0026quot;\u0026hellip;\nhttp缓存 网页性能管理详解\n写给后端程序员的HTTP缓存原理介绍\n【年底补课】HTTP缓存机制\ncss优化 Web 动画帧率（FPS）计算\n使用浏览器开发者工具检查CSS动画性能\n盒子端 CSS 动画性能提升研究\njs优化 Javascript图片预加载详解\nJavaScript 中 4 种常见的内存泄露陷阱\n深入 JavaScript 数组：进化与性能\nJavaScript 性能优化技巧分享\nJavaScript 的时间消耗\nJavaScript 性能优化的小知识总结\n基本技能 数学 每个程序员都应该知道的基础数论\ngit 看完这篇文章才对GIT有了大彻大悟的认识\nGit提交历史的修改删除合并等实践\nGit的4个阶段的撤销更改\n重新组织git本地提交\nchrome、google、浏览器 前端开发者应知必会：浏览器是如何渲染网页的\nChrome开发者工具的小技巧\n从Chrome源码看JS Array的实现\n浏览器的工作原理：新式网络浏览器幕后揭秘（上））\n浏览器渲染原理及流程\n基础 | 深入核心，详解事件循环机制\n认识 V8 引擎\nV8 内存分配与垃圾回收\n加快构建 DOM: 使用预解析, async, defer 以及 preload\n程序员的基础生存技能：高效用Google\nChrome 浏览器 必知必会的小技巧\n探究 CSS 解析原理\n浅析前端页面渲染机制\n原来 Google 还可以这么用，每个程序员都应该学会这些技巧\n其他 深入理解JSON\n奇舞周刊第 206 期：如何让博客速度快到哭\n从输入url到页面展示到底发生了什么\nGitHub 项目徽章的添加和设置\n如何写出好的 JavaScript —— 浅谈 API 设计\n如何用人类的方式进行 Code Review\nGraphQL 技术栈揭秘\nHTML5 前端本地文件操作与上传 一篇真正教会你开发移动端页面的文章(一)\ncss 手把手教你玩转 CSS3 3D 技术\n偏门却又实用的 CSS 样式\n实战 | 一张图让你快速掌握CSS3倒影\n栅格布局卷土重来，用Grid还是Flexbox？\n纯CSS3画出小黄人并实现动画效果\nCSS进阶：试试酷炫的 3D 视角\n纯 CSS 实现波浪效果！\n字号与行高\n理解伪元素 :before 和 :after\nCSS 布局说——可能是最全的\n18个你可能不相信是用CSS制作出来的东西\n也许你不知道，JS animation比CSS更快！\n灵活的 overflow\n你所不知道的 CSS 滤镜技巧与细节\n5个你可能不知道的CSS属性\nCSS3 中的层叠上下文初探\nCSS: 潜藏着的BFC\n编写现代 CSS 代码的 20 个建议\n不炫技，SVG+CSS3 旋转动画属性就能实现的梦幻效果\n前端动画大乱炖\njs 你不知道的 DOMContentLoaded\n重新认识JS的this、作用域、闭包、对象\nimport、require、export、module.exports 混合详解\n安全 OWASP Top 10：注入、XSS、CSRF、安全配置、攻击检测与防范不足等详解\n对于网络爬虫技术的攻与防\n最好用的开源Web漏洞扫描工具梳理\n前端其他 web开发中的长度单位（px,em,ex,rem），如何运用，看完这篇就够了！\n探索Redux的最佳实践\nCallback Promise Generator Async-Await 和异常处理的演进\nJavaScript内存泄漏教程\n比较与理解React的Components，Elements和Instances\n理论 | React 源码剖析系列 － 不可思议的 react diff\n图解 React Virtual DOM\n浅谈Web自适应\nRedux从设计到源码\n只有20行Javascript代码！手把手教你写一个页面模板引擎\n虚拟 DOM 内部是如何工作的？\n关于加载设计，你要知道的8种策略和4种样式\n前端常见跨域解决方案（全）\n前端跨域请求原理及实践\n详解 CORS 跨域资源共享\n函数式编程 鹅厂原创 | 前端中的函数式编程\n人工智能 学习人工智能需要哪些必备的数学基础？\n算法与数据结构 鹅厂原创丨前端工作中遇到的数据结构和算法\n可以管理时间的二叉堆\n网络 Web开发应该知道的计算机网络知识\n谈谈HTTP协议中的短轮询、长轮询、长连接和短连接\nlinux 有哪些命令行的软件堪称神器？\n通过示例学习使用 netstat\n人工智能 学习人工智能需要哪些必备的数学基础？\n工具、编辑器 Mac电脑超实用的81个快捷键\n开源许可证教程\n如何让 Vim 成为我们的神器\n给 Web 开发人员推荐的文档生成工具\n利用 javascript 实现富文本编辑器\n想玩的 Electron开发，如何入坑？\n构建工具 实战 | webpack原理与实战\n如何写好.babelrc？Babel的presets和plugins配置解析\n学习方法 10个妨碍进步的前端学习方式\n","permalink":"/posts/%E6%A1%83%E5%9B%AD%E5%91%A8%E5%88%8A/16/","summary":"\u003cp\u003e2017年微信收藏的文章\u003c/p\u003e","title":"2017文章汇总"},{"content":" 声明：本文为译文，原文链接：https://www.robinwieruch.de/react-libraries\nReact 已经诞生很久了，自从它诞生开始，围绕组件驱动形成了一个非常全面的生态，但是来自其他编程语言或者框架的开发人员很难找到要构建一个 React 系统的所有组件。如果你是来自于像 Angular 这样的框架的开发者，你可能已经习惯了框架包含了所需要的所有功能，\n然而对于 React 来说，它的核心并不是完善所有的可选库。 这是优势还是劣势取决于你自己。 当我从 Angular 切换到 React，我绝对经历了它作为 React 的优势。\n只有通过 React，您才能使用函数组件和 props 构建组件驱动的用户界面。 它带有一些内置的解决方案，例如，用于本地状态和副作用的 React Hooks。\n下面的文章将向您提供一些自己总结的方法，以便从补充库中进行选择，从而构建一个全面的 React 应用程序。\n如何开始 React 如果你是一个完全不熟悉 React 的初学者想创建一个 React 项目，加入 React 的世界。有许多工具包项目可以选择，每个项目都试图满足不同的需求。 React 社区的现状是通过 Facebook 的 create-react-app(CRA)。 它提供了一个零配置的设置，并给你一个开箱即用并且简单的启动和运行的 React 应用程序。 所有的工具都对您隐藏起来了，但是最终要由您来更改这些工具。\n如果你已经熟悉 React，你可以选择它流行的入门工具包之一: Next.js 和 Gatsby.js。 这两个框架都建立在 React 之上，因此你应该已经熟悉 React 的基本原理。 Next.js 用于服务器端渲染(如动态 web 应用程序) ，Gatsby.js 用于静态站点生成(如博客、登陆页面)。\n如果您只是想了解这些初学者工具包是如何工作的，那么可以尝试从头开始设置 React 项目。 你将从一个基本的 HTML 和 JavaScript 项目开始，然后自己添加 React 和它的支持工具。\n如果你想选择一个自定义样板项目，试着缩小你的要求。 样板文件应该是最小的，不要试图解决所有问题。 它应该针对你的问题。 例如，gatsby-Firebase-authentication 样板文件只在 Gatsby.js 中为您提供了完整的 Firebase 身份验证机制，但是其他所有内容都被省略了。\n建议：\ncreate-react-app for React beginners/advanced Gatsby.js for static websites in React Next.js for server-side rendered React custom React project to understand the underlying tools React 状态管理 React 带有内置的 hooks 来管理局部状态: useState、 useReducer 和 useContext。 所有这些都可以在 React 中用于复杂的本地状态管理。 它甚至可以模拟 Redux(Redux 是 React 的一个流行的状态管理库)。\n所有 React 的内置 hooks 都非常适合本地状态管理。 当涉及到远程数据的状态管理时，如果远程数据带有 GraphQL 端点，我建议使用 Apollo Client。Apollo Client 的替代方案是 urql 和 Relay。\n如果远程数据不是来自 GraphQL 端点，请尝试使用 React 的 Hooks 来管理它。 如果不行，像 Redux 或者 MobX/Mobx State tree 这样的解决方案可能会有所帮助。\n如果你想了解更多细节，请访问我的综合状态管理反应教程。\n推荐：\n局部状态: React 的 useState, useReducer, useContext Hooks 通过 Graph QL 的远程状态: Apollo Client 通过 REST 的远程状态: React Hooks or Redux/MobX/Mobx State Tree 使用 React 路由 路由在 React 中起着重要作用。 毕竟，React 可以帮助您实现在客户端处理路由的单页应用程序。 当介绍一个复杂的路由 的时候，有好几个路由解决方案。 最值得推荐的解决方案是 React Router。\n在您引入路由以前，您可以先尝试 React 的条件渲染，它虽然不是路由的合理替代，但是小型应用中以及足够用了。\n建议:\nReact Router React 中的样式库 虽然关于 React 样式处理有很多解决方法，但是作为一个 React 初学者，刚开始使用内联样式和基本 CSS 是很好的。\nimport \u0026#39;./Headline.css\u0026#39;; const Headline = ({ title }) =\u0026gt; \u0026lt;h1 className=\u0026#34;headline\u0026#34; style={{ color: \u0026#39;blue\u0026#39; }}\u0026gt; {title} \u0026lt;/h1\u0026gt; 虽然内联样式可以用 JavaScript 在 React 中动态地添加样式，但是一个外部的 CSS 文件可以拥有 React 应用程序的所有剩余样式。 一旦您的应用程序增长，还有许多其他样式方案选择。\n首先，我建议您研究一下 CSS Modules，将其作为 CSS-in-CSS 解决方案之一。 CSS Modules 受到 create-react-app 的支持，并为您提供了将 CSS 封装到模块中的方法。 这样，它就不会意外地泄漏到其他人的样式中。 尽管应用程序的某些部分仍然可以共享样式，但其他部分不必访问它。 在 React 中，CSS Modules 通常将 CSS 文件与 React 组件文件共存。\nimport styles from \u0026#39;./style.css\u0026#39;; const Headline = ({ title }) =\u0026gt; \u0026lt;h1 className={styles.headline}\u0026gt; {title} \u0026lt;/h1\u0026gt; 其次，我想推荐的是被称作为 styled components，作为 React 的 CSS-in-JS 解决方案之一。 这个方法是由一个名为 styled-components 的库提供的，它将样式与 JavaScript 共享到 React 组件的旁边:\nimport styled from \u0026#39;styled-components\u0026#39;; const BlueHeadline = styled.h1` color: blue; `; const Headline = ({ title }) =\u0026gt; \u0026lt;BlueHeadline\u0026gt; {title} \u0026lt;/BlueHeadline\u0026gt; 第三，我想推荐 Tailwind CSS 作为一个函数式的 CSS 解决方案:\nconst Headline = ({ title }) =\u0026gt; \u0026lt;h1 className=\u0026#34;text-blue-700\u0026#34;\u0026gt; {title} \u0026lt;/h1\u0026gt; 是否选择 CSS in CSS、 CSS in js 或函数式 CSS 取决于您。 所有的策略都适用于大型的 React 应用程序。\n建议:\nCSS-in-CSS with CSS Modules CSS-in-JS with Styled Components Functional CSS with Tailwind CSS React UI 库 如果您不想从头开始构建所有必要的 React UI 组件，您可以选择 React UI Library 来完成这项工作。 所有这些都有一些基本的组件，比如按钮，下拉菜单，对话框和列表。 有很多 UI 库可供 React 选择:\nAnt Design Chakra UI Tailwind UI Semantic UI Material UI React Bootstrap 1. React Bootstrap React 动画 任何 web 应用程序中的动画都是从 CSS 开始的。 最终你会发现 CSS 动画并不能满足你的需求。 通常开发人员会检查 React Transition Group，这样他们就可以使用 React 组件执行动画。 其他著名的 React 动画库有:\nreact-motion react-spring Framer Motion Animated (React Native) 建议:\nReact Transition Group React 可视化和图表库 如果你真的想自己从头开始构建图表，你没办法不去学习 D3 。 这是一个底层的可视化库，它为你提供了创建令人惊叹的图表所需的一切。 然而，学习 D3 是一个完全不同的冒险，因此许多开发人员只是想选择一个 React 图表库，它可以为他们做任何事情，以换取灵活性。 以下是一些流行的解决方案:\nnivo Victory react-vis Recharts Chart Parts React 中的表单库 在 React 中最流行的表单库是 Formik。 它提供了从验证到提交到形成状态管理所需的一切。另外一个选择是 React Hook Form。 如果您开始使用更复杂的表单，这两种方法对于 React 应用程序都是有效的解决方案。\n建议:\nFormik React Hook Form React 中的数据获取库 很快，您就必须向远程 API 发出请求，以便在 React 中获取数据。 现代浏览器带有本地获取 API 来执行异步数据请求:\nfunction App() { React.useEffect(() =\u0026gt; { const result = fetch(my/api/domain) .then(response =\u0026gt; response.json()) .then(result =\u0026gt; { // do success handling // e.g. store in local state }); setData(result.data); }); return ( ... ); } 基本上，你不需要添加任何其他库来完成这项工作。 但是，有时候不仅需要提供复杂的异步请求，还需要它们具有更强大的功能，而且只是一个轻量级的库。 我推荐的这些库之一称为 axios。 当您的应用程序增大时，可以使用它来代替本地获取 API。\n如果您有足够的时间来处理 GraphQL API，我建议您使用 Apollo Client。 可供选择的 GraphQL 客户端将是 urql 或 Relay。\n建议:\n浏览器的本地 fetch API axios Apollo Client React 类型检查 幸运的是 React 有自己的类型检查能力。 使用 PropTypes，你可以为你的 React 组件定义传入的 props。 无论何时向组件传递了错误的类型，在运行应用程序时都会收到错误消息。 但是这种形式的类型检查只应该用于较小的应用程序。\nimport PropTypes from \u0026#39;prop-types\u0026#39;; const List = ({ list }) =\u0026gt; \u0026lt;div\u0026gt; {list.map(item =\u0026gt; \u0026lt;div key={item.id}\u0026gt;{item.title}\u0026lt;/div\u0026gt;)} \u0026lt;/div\u0026gt; List.propTypes = { list: PropTypes.array.isRequired, }; 在较大的 React 应用程序中，TypeScript 为整个应用程序增加了类型安全性，而不是使用 React PropTypes。 当使用这样的类型检查器时，您可以在开发期间获得错误。 您不必启动应用程序就可以找到本可以通过这种类型检查防止的 bug。 这样一来，类型检查器就可以提高您的开发人员体验，避免首先引入 bug。\n建议:\nTypeScript React 代码风格 对于代码风格，基本上有三个选项可以用的。\n第一种方法是遵循一个被社区所接受的风格指南。 一个流行的 Airbnb 开源的React style guide 。 即使你没有刻意遵循这些样式指南，但是读一读它们，在 React 中获得常见代码样式的要点是有意义的。\n第二种方法是使用 linter，比如 ESLint。 虽然样式指南只给出建议，但是 linter 在应用程序中强制执行这个建议。 例如，你可以要求遵循流行的 Airbnb 样式指南，你的 IED/编辑器会告诉你每一个错误。\n第三种也是最流行的方法是使用 Prettier。 它是一个强制的代码格式化程序。 您可以将其集成到编辑器或 IDE 中，使其在每次保存文件时格式化您的代码。 也许它并不总是符合您的口味，但至少您不必再担心自己或团队代码库中的代码格式。 虽然 Prettier 不能取代 ESLint，但是它与 ESLint 的集成非常好。\n建议:\nESLint Prettier React 认证 在较大的 React 应用程序中，您可能希望引入具有注册、登录和退出功能的身份验证。 此外，密码重置和密码更改功能往往是需要的。 这些特性远远超出了 React，因为后端应用程序为您管理这些事情。\n通常的方法是使用自定义身份验证实现自己的自定义后端应用程序。 如果您不想启动自己的身份验证，可以考虑类似 Passport.js 的东西。\n如果你根本不想关心后端，以下三种解决方案可能适合你:\nFirebase Auth0 AWS Cognito 如果您正在寻找身份验证 + 数据库的一体化解决方案，请坚持使用 Firebase 或 AWS。\n建议:\nDIY: Custom Backend Get it off the shelf: Firebase React 主机 您可以像其他 web 应用程序一样部署和托管 React 应用程序。 如果你想拥有完全的控制权，选择像Digital Ocean这样的。 如果你希望有人来处理所有的事情，如果你已经在使用第三方的身份验证/数据库，Netlify 是一个很受欢迎的解决方案，比如 Firebase，你可以检查他们是否也提供主机服务(比如 Firebase Hosting)。 您还可以使用 S3的静态站点与 Cloudfront 一起托管。\nReact 测试 如果您想深入了解 React 中的测试，请阅读以下内容: How to test components in React。 要点如下: 测试 React 应用程序的主干是 Jest。 它提供了测试运行程序、断言库和监视(spying)/模拟(mocking)/stubbing 功能， 一个全面的测试框架中需要的所有东西。\n至少，您可以使用 React-test-renderer 在 Jest 测试中渲染 React 组件。 这已经足以用 jest 来执行所谓的快照测试了。 快照测试的工作方式如下: 运行测试之后，将创建 React 组件中渲染的 DOM 元素的快照。 当您在某个时间点再次运行测试时，将创建另一个快照，用作前一个快照的差异。 如果 diff 不完全相同，则 Jest 将报错，您要么必须接受快照，要么必须更改组件的实现。\n最终，您会发现自己在使用 Enzyme 或 React Testing Library (这两个都在 Jest 测试环境中使用)来进行更详细的测试功能集。 这两个库使得在 HTML 元素上呈现组件和模拟事件成为可能。 然后，Jest 用于 DOM 节点上的断言。\n如果您正在为 React-to-end (E2E)测试寻找测试工具，Cypress 是最受欢迎的选择。\n建议:\nUnit/Integration/Snapshot Tests: Jest + React Testing Library E2E Tests: Cypress 2e test: Cypress 用于 React 的工具库 Javascript 为处理数组、对象、数字、对象和字符串提供了大量内置功能。 React 中最常用的 JavaScript 内置功能之一是内置 map() 数组。 为什么？ 因为您总是必须呈现组件中的列表。 由于 JSX 是 HTML 和 JavaScript 的混合物，所以您可以使用 JavaScript 在数组上进行映射并返回 JSX。 使用 React 创建列表组件变得简单:\nconst List = ({ list }) =\u0026gt; \u0026lt;div\u0026gt; {list.map(item =\u0026gt; \u0026lt;div key={item.id}\u0026gt;{item.title}\u0026lt;/div\u0026gt;)} \u0026lt;/div\u0026gt; 但是，您可能需要选择一个实用程序库来提供更详细的功能。 您甚至可能希望在将这些实用函数链接起来时更加灵活，甚至可以将它们动态地组合在一起。 这时，您将引入一个实用程序库: Lodash 或 Ramda。 对于每一个 JavaScript 开发者来说，Lodash 是一个更加实际的库，而 Ramda 在函数式编程中有一个强大的核心。 请记住，现代 JavaScript 提供了很多开箱即用的特性，现在使用实用程序库的必要性已经降低了。\n建议:\nJavaScript Lodash react 和不可变的数据机构 原生 JavaScript 提供了大量内置工具来处理数据结构，就像它们是不可变的一样。 但是，如果您和您的团队认为有必要实施不可变的数据结构，最流行的选择之一是 Immer。 就我个人而言，我不使用它，但是任何时候有人问到 JS 中的不变性(immutability)，大家都会指出 Immer，并且这可以加上 redux 或 React hooks。\nReact 国际化 当涉及到 React 应用程序的国际化 时，您不仅需要考虑翻译，还需要考虑多元化、日期和货币的格式化，以及其他一些事项。 以下是最受欢迎的处理该问题的库:\nreact-i18next react-intl LinguiJS FBT 建议:\nreact-i18next React 富文本编辑器 当涉及到在 React 中的富文本编辑器时，我只能想到以下内容，因为我没有在 React 中使用任何其他内容:\nDraft.js Slate React 中的支付 和其他网络应用一样，最常见的支付提供商是 Stripe 和 PayPal。 两者都可以整齐地集成到 React 中。\nPayPal Stripe Elements 或 Stripe Checkout React 中的时间 如果你的 React 应用程序正在处理大量的日期和时区，你应该引入一个库来为你管理这些事情。 最受欢迎的库是 moment.js。 更轻量级的替代品是 date-fns 和 Day.js。\nReac 桌面应用 Electron 是跨平台桌面应用程序的首选框架。 不过，也有其他选择，例如:\nNW.js Neutralino.js React 的移动开发 我想把 React 从网络带到移动设备的首选解决方案仍然是 React Native。 如果您是 React Native 开发人员，想要创建一个 Web 应用程序，您应该查看 React Native Web。\nREACT VR/AR 实话说，我们很有可能用 React 深入虚拟现实或者增强现实中，我没有使用过这些库中的任何一个，但是它们是我在谈到 React AR/VR 时从大脑闪过的就是：\nReact 360 react-viro react-native-arkit 为 React 设计原型 如果您来自 UI/UX 背景，那么您可能希望使用一个工具为新的 React 组件、布局或 UI/UX 概念进行快速原型设计。 我以前用过 Sketch，但最近转到了 Figma。 尽管我两者都喜欢，但我现在并不后悔使用 Figma。 另一个流行的工具是 Framer。\n为 React 书写文档 如果你负责为你的软件、 UI 库或者其他东西编写文档，那么你可以使用一些简洁的 React 文档工具。 我已经广泛地使用了 Storybook，我可以说他非常好用，但是我也听说了其他解决方案的好处:\nStyleguidist docz Docusaurus 总结 所以最终，React 生态系统可以看作是一个 React 的框架，但它保持灵活性。 它是一个灵活的框架，您可以自己决定选择哪些库。 您可以从小型开始，只添加库来解决特定的问题。 当应用程序增长时，您可以沿途扩展构建块。 否则你可以通过使用普通的 React 来保持轻量级。 因此，这里再次列出了可以补充 React 作为应用程序关于不同项目大小的核心的库。 请记住，这个列表是我的个人看法，我也渴望得到你的反馈。\n小型应用程式 样板: create-react-app 样式库: basic CSS and inline style 异步请求: fetch or axios 代码风格: 无 类型检查: 无 状态管理: React Hooks 路由: 无 or React Router 身份验证: Firebase 数据库: Firebase UI 库: none 表单库: 无 测试库: Jest 实用程序库: JavaScript 国际化: react-i18next React 桌面: Electron 中型应用 样板文件: Next.js or Gatsby.js 样式库: CSS Modules or Styled Components 异步请求: fetch or axios 代码风格: Prettier，ESLint 类型检查: 无 或 TypeScript 状态管理: React Hooks and/or Apollo 路由: React Router 身份验证: Firebase 数据库: Firebase Ui 库: none 或 UI 组件库 表单库: none 或 Formik 或 React Hook Form 测试库: Jest with React Testing Library 实用程序库: JavaScript 国际化: react-i18next React 桌面: Electron 大型应用程序 样板文件: Next.js, Gatsby.js, custom setup 样式库: CSS Modules or Styled Components 异步请求: axios 或 Apollo Client 代码风格: Prettier，ESLint 类型检查: TypeScript 状态管理: React Hooks and/或者 Apollo/Redux/MobX 路由: React Router 认证: Node.js 服务 + Passport.js 数据库: 自己用SQL/NoSQL DB 提供 Node.js 服务 Ui 库: UI 组件库或者您自己的 UI 组件 **表单库:**none 或者 Formik 或者 React Hook Form 测试库: Jest with React Testing Library and Cypress 实用程序库: JavaScript 的 api，Lodash 国际化: react-i18next React 桌面: Electron 以前的建议是个人的。 您可以为理想的 React 应用程序选择自己的灵活框架。 每一个“理想”的 React 设置都是主观的，取决于开发人员和项目的需求。 毕竟，没有理想的 React 应用程序设置。\n","permalink":"/posts/%E8%AF%91%E6%96%87/300/","summary":"声明：本文为译文，原文链接：https://www.robinwieruch.de/react-libraries\nReact 已经诞生很久了，自从它诞生开始，围绕组件驱动形成了一个非常全面的生态，但是来自其他编程语言或者框架的开发人员很难找到要构建一个 React 系统的所有组件。如果你是来自于像 Angular 这样的框架的开发者，你可能已经习惯了框架包含了所需要的所有功能，\n然而对于 React 来说，它的核心并不是完善所有的可选库。 这是优势还是劣势取决于你自己。 当我从 Angular 切换到 React，我绝对经历了它作为 React 的优势。\n只有通过 React，您才能使用函数组件和 props 构建组件驱动的用户界面。 它带有一些内置的解决方案，例如，用于本地状态和副作用的 React Hooks。\n下面的文章将向您提供一些自己总结的方法，以便从补充库中进行选择，从而构建一个全面的 React 应用程序。\n如何开始 React 如果你是一个完全不熟悉 React 的初学者想创建一个 React 项目，加入 React 的世界。有许多工具包项目可以选择，每个项目都试图满足不同的需求。 React 社区的现状是通过 Facebook 的 create-react-app(CRA)。 它提供了一个零配置的设置，并给你一个开箱即用并且简单的启动和运行的 React 应用程序。 所有的工具都对您隐藏起来了，但是最终要由您来更改这些工具。\n如果你已经熟悉 React，你可以选择它流行的入门工具包之一: Next.js 和 Gatsby.js。 这两个框架都建立在 React 之上，因此你应该已经熟悉 React 的基本原理。 Next.js 用于服务器端渲染(如动态 web 应用程序) ，Gatsby.js 用于静态站点生成(如博客、登陆页面)。\n如果您只是想了解这些初学者工具包是如何工作的，那么可以尝试从头开始设置 React 项目。 你将从一个基本的 HTML 和 JavaScript 项目开始，然后自己添加 React 和它的支持工具。","title":"2020 年你应该知道的 React 库"},{"content":"当我起笔写总结的第一感受就是 2021 在写作这件事儿上，我变懒了，对外输出才 8 篇文章。\n我翻了下前几年的年度终结，每年好像都觉得自己输出不够多，所以打心底里还是很想把写作这个事情做好的，但是由于自己思维的懒惰，总是没有落实下去。\n工作 最近几年自己把工作的地位还是放得很高的，特别是来了蚂蚁之后，一个是因为工作任务比较重，暂用比较多的时间；二是因为在现在的财富积累上绝大部分来自于这份工作。\n今年对我而言工作状态终于从忙碌回归到了正常，从来蚂蚁到 2021 年上半年，我基本上都处于一个满负荷的状态，工作日的时间百分之 90 的精力在工作上，准确的说是在业务上。\n这种满负荷(业务压力)让我没跟太多的时间去思考自己如何成长、业务应该怎么去发展等，所以之前多次跟女朋友说想换一份工作，干着太累，自己也没太多成长。\n后面由于业务调整加上自己终于在公司内找到一个技术发力点，所以心态回到正常，业务压力也从忙碌到正常，现在的状态还是比较满意。\n另外有点就是渐渐的对业务价值这个词有了更深的感触，对我们老板说的一句话印象比较深刻：\n公司招我们来不是让我们成长的，而是给公司创造业务价值的，所以你在公司不管造多牛逼的轮子，一定是要为业务服务的。所以最好的情况就是我们基于业务造的轮子，即给业务带来了帮助，也让自己技术得到了成长，双赢，这当然也是公司希望的。\n所以作为技术人员一定要去了解业务，然后才知道我们的业务怎么赚钱的，或者他们怎么帮公司赚钱的，这样我们才能更有机会创造业务价值。\n开源 一、开源最重要的是维护。\n我很开心自己在蚂蚁体验技术部这个部门，这个部门应该是国内开源氛围最好的部门之一。组内也有多个非常优秀的开源项目，今年自己有幸参与了一点点 ahooks 和 antd mobile 。\n让我开心的不是提了多少个 PR，而是了解了维护一个开源项目有多么的难，参与其中之后了解了开源项目的维护过程，了解了其中的艰辛，很多从公司开源出去的项目真的是纯靠爱发电，并不会纳入个人 KPI 里。\n另外一个老板说过一句话：前端的绝大部分的技术项目，打的是维护，并没有太多的技术壁垒。\n真的，这认识，太到位了，做开源最重要的持续不断的维护，而不是某个 KPI 项目。有部分阿里开源的东西，可能后期不怎么维护了，所以现在很多一看到阿里开源的，担心的这是不是 KPI 项目，会一直维护吗？可见一直维护才是最重要的一环。\n二、尽量的去参与开源。\n想起以前上大学的时候，一直在用 antd，从未想过能有机会给流行的开源项目提 PR，但是现在感觉提 PR 跟平时写代码一样了。\n我觉得主要是两个原因：\n一个是自己身边有很多这样的机会，身边同事都搞开源，想加入进去会变得很容易。 二是因为自己工作多年了，水平比以前高不少，代码也能看懂，自己写的代码也还行，能顺利的参与进去。 所以如果现在想参与开源项目，但是觉得自己还没有能力的，不要着急，打磨一下，让自己稍微厉害一点了来，另外就是要多找机会，看到你想参与的开源项目，有 issue 你可以解决的，你可以主动去提 PR，如果没有被合进去也没关系，一般作者是会给你建议的，这也是你提升的机会。\n三、开源其实没那么难。\n以前总觉得要去创造一个开源项目，想着要去做一个技术难度很高的开源项目，但是一直想不到，就觉得开源太难了。\n今年在了解很多开源项目，以及开源项目背后的发展过程之后，其实自己以前的思路不太多，总想着要去做创新，做很牛逼的东西，做出来直接提效翻倍啥的。\n如果没有这样的能力或者机会，我建议如果想做开源可以从集合类的库开始做，或者说一些最佳实践，demo、模板等。\n什么叫集合类的库，我举几个例子就明白了。 ahooks（多个常用的自定义 hooks 集合）、antd（中后台组件集合）、lodash（工具函数集合）等等，这种项目你看，每一个集合里的元素都不是很难，写一个 hook、写一个组件、写一个函数有啥难的嘛，平时写项目公用组件，或者 common 文件夹里不也有么。**难的是要多、好用、长期维护。**可能你一个元素使用的人不多，但是当你的集合越来越多，就会跟越来越多人的需求匹配之后，就有用了。\n最佳实践，demo 、模板类是什么样的呢？这种项目用户更多的可能是新手、或者小公司，刚接触某个技术栈的时候不知道怎么上手，不知道怎么写一个项目，不知道怎么写好一个项目，你就可以写一份 demo、或者最佳实践，让别人参考，或者快速搭建自己的项目。\n这种项目比如：antd pro，你是不是也可以去写一个 antd mobile pro？或者 element pro ？或者 xx pro。类似的最佳实践还有很多很多，自己可以发散一下。\n生活 新添小猫咪\n家里新增了一只很可爱的小猫咪，不过养猫远比我想象中要麻烦，不仅仅是照顾它的吃喝拉撒，给生活还是会带来其他的麻烦。\n比如过年回家猫不能带回去，是需要找人上门来照顾，还是准备好充足的食物和猫砂，让他自己处理，为此我们还不得不给家里买一个摄像头；另外还会给家里带来很多的猫毛，床上、衣服上、各种地方，无处不在的猫毛实在是令人头痛。\n虽然有很多的烦恼，但是有了猫咪的陪伴，还是给我们带来了很多开心，比如每次回家猫咪都会趴在窗户上、喵喵的等着我回来，一旦无聊了就可以撸撸猫。\n女朋友给我发了这么一段话，我觉得很有意思：\n《假如世界没有猫》中曾说过：“猫从来不觉的孤单，是人自认为他们孤单，从不是猫需要人的陪伴，而是人需要猫的陪伴”。\n家庭\n跟女朋友已经谈了 5 年的恋爱了，家里人已经开始催婚了，但是我又觉得结婚是一个很重要的事情，至少需要有个稳定的家吧，所以就还得买房了来。然后接了婚之后就是两家人之间的事儿了，本来现在都忙，想先把心思放在事业上。\n所以每次都以现在还年轻，身边的人都 30 岁左右才结婚的搪塞他们。\n不管怎么，今年尽量把房搞定吧。\n旅游\n今年只去了就近的两个地方，一个是五一去了南京，一个是跟着朋友自驾去了溧阳。\n投资 投资今年让我感受真正的感受到了投资是一件多么难的事情，深刻的明白了这句话：\n牛市的时候，人人都是股神，熊市的时候，人人都是哲学家。\n前两年不管买股票、买基金、打新基本都是赚的，年初的时候还看了几本投资的书。\n看完之后觉得自己要成为股神了，然后去实操的时候无从下手，还是瞎买，结果都懂的。\n另外还有基本还处于在读状态，还没看完，吃灰了吃灰了。\n今年一个同事(大龙哥)想学投资，经过我的推荐，开始投基金、投股票、打新，无一不亏的，所以我们组都把他尊称为「行业冥灯」。\n反正今年是让我明白了，投资真的是一件很难的事情，现在钱也不多，稳定就好，等以后钱真的很多了，然后有时间研究投了再重仓搞。\n个人成长 思源笔记\n2021 年有一本挺火的书《卡片笔记写作法》，我也是在了解如何实践卡片笔记法的过程中才对这些概念有了深刻的理解：双链(双向链接)、卡片笔记、内容块、文档关系图。\n最重要的应该就是双链了，除了思源笔记很多软件都支持双链，比如RoamResearch(应该是国外最早的双链笔记)、 wolai、obsidian、葫芦笔记等。\n思源笔记对我来说最吸引我的特性有这么几个：\n本地优先的笔记。因为我觉得云端永远是不可靠和不可控的，思源也支持同步到云端，不过是端到端加密的，保证了安全性。 为 markdown 而生。即时渲染(类似 Typora)、支持数学公式、图表、流程图、甘特图、时序图、五线谱等。 内容块。这个概念我最开始是在 notion 上接触的，在使用思源笔记让我理解得更深刻里，支持块级引用和双向链接。 导出。支持复制到公众号、知乎等，这对于我来说是非常有用的了。 支持自定义主题。 挂件功能。这个有点复杂，官方是这么说的：挂件是思源内核伺服的静态网页，它通过 API 存取数据，通过 \u0026lt;iframe\u0026gt; 进行渲染展现。反正就是自定义能力很强。 还有很多特性，后续我单独写一篇思源笔记的文章总结一下。\n现在我除了公司的笔记，其他所以的笔记、文章都已经放进来了，把思源笔记作为我的个人知识管理的工具。\n如果有兴趣体验的，到时候注册可以填我的推荐码：Zv0CcPZ。\n读书\n读的书大概就这 20 来本吧，具体可见我的豆瓣主页，我主要是在得到 APP 上读的，我开了电子书会员。\n公众号\n说到公众号，我对我的读者们表示歉意，在 2021 年没有带来很多的原创文章，虽然粉丝一直在长，但是阅读量、打开率都在成下降趋势，粘性相比 18、19 年差太远了，甚至很多 2021 新来的读者都不太了解我是谁。\n所以下半年广告的数量也在减少，不过广告的减少反而让我没有了压力，有兴趣了就可以写点东西，没兴趣就放着。以前就为了要发广告，不得不每天日更，去找文章来转发，也减少了自己原创的时间。\n2022 我想的还是多原创，广告随缘，然后就是后面想通过一些服务来变现，减少广告对公众号的打扰。\n总结 今年在工作中还是取的了令自己满意的结果，在个人成长方面还需要精进，希望自己在下一年能保持初心，慢就是快，能踏踏实实把少部分事情做好，不要想把啥事儿都做好。\n突然想到了一个梗：人生无常，大肠包小肠。\n无常是一种常态，只有无常才能让一切变得可能。人生如戏，今天相见，明天挂墙，谁也不会知道自己什么时候死，在生活中应该保持一颗乐观，宽容的心态。\n相关阅读： 2020 年度总结 2019 年度总结 2018 年度总结 ","permalink":"/posts/2022/2021-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/","summary":"当我起笔写总结的第一感受就是 2021 在写作这件事儿上，我变懒了，对外输出才 8 篇文章。\n我翻了下前几年的年度终结，每年好像都觉得自己输出不够多，所以打心底里还是很想把写作这个事情做好的，但是由于自己思维的懒惰，总是没有落实下去。\n工作 最近几年自己把工作的地位还是放得很高的，特别是来了蚂蚁之后，一个是因为工作任务比较重，暂用比较多的时间；二是因为在现在的财富积累上绝大部分来自于这份工作。\n今年对我而言工作状态终于从忙碌回归到了正常，从来蚂蚁到 2021 年上半年，我基本上都处于一个满负荷的状态，工作日的时间百分之 90 的精力在工作上，准确的说是在业务上。\n这种满负荷(业务压力)让我没跟太多的时间去思考自己如何成长、业务应该怎么去发展等，所以之前多次跟女朋友说想换一份工作，干着太累，自己也没太多成长。\n后面由于业务调整加上自己终于在公司内找到一个技术发力点，所以心态回到正常，业务压力也从忙碌到正常，现在的状态还是比较满意。\n另外有点就是渐渐的对业务价值这个词有了更深的感触，对我们老板说的一句话印象比较深刻：\n公司招我们来不是让我们成长的，而是给公司创造业务价值的，所以你在公司不管造多牛逼的轮子，一定是要为业务服务的。所以最好的情况就是我们基于业务造的轮子，即给业务带来了帮助，也让自己技术得到了成长，双赢，这当然也是公司希望的。\n所以作为技术人员一定要去了解业务，然后才知道我们的业务怎么赚钱的，或者他们怎么帮公司赚钱的，这样我们才能更有机会创造业务价值。\n开源 一、开源最重要的是维护。\n我很开心自己在蚂蚁体验技术部这个部门，这个部门应该是国内开源氛围最好的部门之一。组内也有多个非常优秀的开源项目，今年自己有幸参与了一点点 ahooks 和 antd mobile 。\n让我开心的不是提了多少个 PR，而是了解了维护一个开源项目有多么的难，参与其中之后了解了开源项目的维护过程，了解了其中的艰辛，很多从公司开源出去的项目真的是纯靠爱发电，并不会纳入个人 KPI 里。\n另外一个老板说过一句话：前端的绝大部分的技术项目，打的是维护，并没有太多的技术壁垒。\n真的，这认识，太到位了，做开源最重要的持续不断的维护，而不是某个 KPI 项目。有部分阿里开源的东西，可能后期不怎么维护了，所以现在很多一看到阿里开源的，担心的这是不是 KPI 项目，会一直维护吗？可见一直维护才是最重要的一环。\n二、尽量的去参与开源。\n想起以前上大学的时候，一直在用 antd，从未想过能有机会给流行的开源项目提 PR，但是现在感觉提 PR 跟平时写代码一样了。\n我觉得主要是两个原因：\n一个是自己身边有很多这样的机会，身边同事都搞开源，想加入进去会变得很容易。 二是因为自己工作多年了，水平比以前高不少，代码也能看懂，自己写的代码也还行，能顺利的参与进去。 所以如果现在想参与开源项目，但是觉得自己还没有能力的，不要着急，打磨一下，让自己稍微厉害一点了来，另外就是要多找机会，看到你想参与的开源项目，有 issue 你可以解决的，你可以主动去提 PR，如果没有被合进去也没关系，一般作者是会给你建议的，这也是你提升的机会。\n三、开源其实没那么难。\n以前总觉得要去创造一个开源项目，想着要去做一个技术难度很高的开源项目，但是一直想不到，就觉得开源太难了。\n今年在了解很多开源项目，以及开源项目背后的发展过程之后，其实自己以前的思路不太多，总想着要去做创新，做很牛逼的东西，做出来直接提效翻倍啥的。\n如果没有这样的能力或者机会，我建议如果想做开源可以从集合类的库开始做，或者说一些最佳实践，demo、模板等。\n什么叫集合类的库，我举几个例子就明白了。 ahooks（多个常用的自定义 hooks 集合）、antd（中后台组件集合）、lodash（工具函数集合）等等，这种项目你看，每一个集合里的元素都不是很难，写一个 hook、写一个组件、写一个函数有啥难的嘛，平时写项目公用组件，或者 common 文件夹里不也有么。**难的是要多、好用、长期维护。**可能你一个元素使用的人不多，但是当你的集合越来越多，就会跟越来越多人的需求匹配之后，就有用了。\n最佳实践，demo 、模板类是什么样的呢？这种项目用户更多的可能是新手、或者小公司，刚接触某个技术栈的时候不知道怎么上手，不知道怎么写一个项目，不知道怎么写好一个项目，你就可以写一份 demo、或者最佳实践，让别人参考，或者快速搭建自己的项目。\n这种项目比如：antd pro，你是不是也可以去写一个 antd mobile pro？或者 element pro ？或者 xx pro。类似的最佳实践还有很多很多，自己可以发散一下。","title":"2021 年度总结"},{"content":"你有没有花一个下午的时间浏览过 Mozilla 文档？如果你有，你会很清楚网上有很多关于 JavaScript 的信息。这使得人们很容易忽略一些不同寻常的 JavaScript 操作符。\n然而，仅仅因为这些操作符不常见并不意味着它们不强大！它们在语法上看起来都很相似，但是当它们以不同的方式工作时，请务必阅读它们。\n让我们开始吧！\n译者注：nullish 代表 null 或者 undefined\n1. ?? 操作符 在 JavaScript 中，?? 操作符被称为nullish 合并操作符。如果第一个参数不是 null/undefined，这个运算符将返回第一个参数，否则，它将返回第二个参数。让我们看一个例子。\nnull ?? 5 // =\u0026gt; 5 3 ?? 5 // =\u0026gt; 3 当为一个变量分配默认值时，JavaScript 开发人员传统上依赖于逻辑 OR 操作符，如下所示。\nvar prevMoney = 1 var currMoney = 0 var noAccount = null var futureMoney = -1 function moneyAmount(money) { return money || `You currently do not own an account in the bank` } console.log(moneyAmount(prevMoney)) // =\u0026gt; 1 console.log(moneyAmount(currMoney)) // =\u0026gt; `You currently do not own an account in the bank` console.log(moneyAmount(noAccount)) // =\u0026gt; `You currently do not own an account in the bank` console.log(moneyAmount(futureMoney))// =\u0026gt; -1 上面我们创建了一个函数 moneyAmount，负责返回用户的当前余额。我们使用了 || 操作符来识别没有帐户的用户。 当 money 为 0 或者 null 的时候都会返回在当前银行没有这个账户，但是实际上账户是可能为 0 的 。在上面的示例中， || 操作符将 0 视为假值，因此识别不出来我们的用户拥有一个 0 美元的帐户。让我们通过使用 nullish 合并操作符来解决这个问题。\nvar currMoney = 0 var noAccount = null function moneyAmount(money) { return money ?? `You currently do not own an account in the bank` } moneyAmount(currMoney) // =\u0026gt; 0 moneyAmount(noAccount) // =\u0026gt; `You currently do not own an account in the bank` 总结一下，?? 操作符允许我们分配默认值，同时忽略像 0 和空字符串这样的假值。\n2. ??= 操作符 ??= 又称为逻辑 nullish 赋值操作符，与我们之前学到的内容密切相关。让我们看看它们是如何联系在一起的。\nvar x = null var y = 5 console.log(x ??= y) // =\u0026gt; 5 console.log(x = (x ?? y)) // =\u0026gt; 5 只有当前值为 null 或 undefined 时，此赋值运算符才会分配新值。上面的例子强调了这个操作符如何实质上是 nullish 赋值的语法糖。接下来，让我们看看这个操作符与默认参数的区别。\nfunction gameSettingsWithNullish(options) { options.gameSpeed ??= 1 options.gameDiff ??= \u0026#39;easy\u0026#39; return options } function gameSettingsWithDefaultParams(gameSpeed=1, gameDiff=\u0026#39;easy\u0026#39;) { return {gameSpeed, gameDiff} } gameSettingsWithNullish({gameSpeed: null, gameDiff: null}) // =\u0026gt; { gameSpeed: 1, gameDiff: \u0026#39;easy\u0026#39; } gameSettingsWithDefaultParams(null, null) // =\u0026gt; { gameSpeed: null, gameDiff: null } 上面的函数处理空值的方式有一个显著的不同。默认参数将使用 null 参数覆盖默认值，nullish 赋值操作符不会。默认参数和 nullish 赋值都不会覆盖未定义的值。\n3. ?. 操作符 可选的链接操作符 ?. 允许开发人员读取深度嵌套在一个对象链中的属性值，而不必沿途显式验证每个引用。当引用为 null 时，表达式停止计算并返回 undefined，让我们来看一个例子。\nvar travelPlans = { destination: \u0026#39;DC\u0026#39;, monday: { location: \u0026#39;National Mall\u0026#39;, budget: 200 } }; const tuesdayPlans = travelPlans.tuesday?.location; console.log(tuesdayPlans) // =\u0026gt; undefined 现在，让我们把迄今为止所学到的一切结合起来，把星期二添加到我们的新旅行计划中去吧！\nfunction addPlansWhenUndefined(plans, location, budget) { if (plans.tuesday?.location === undefined) { var newPlans = { plans, tuesday: { location: location ?? \u0026#34;Park\u0026#34;, budget: budget ?? 200 }, }; } else { newPlans ??= plans; //will only override if newPlans is undefined console.log(\u0026#34;Plans have already been added!\u0026#34;); } return newPlans; } var newPlans = addPlansWhenUndefined(travelPlans, \u0026#34;Ford Theatre\u0026#34;, null); console.log(newPlans) // =\u0026gt; { plans: //{ destination: \u0026#39;DC\u0026#39;, // monday: { location: \u0026#39;National Mall\u0026#39;, budget: 200 } }, // tuesday: { location: \u0026#39;Ford Theatre\u0026#39;, budget: 200 } } newPlans = addPlansWhenUndefined(newPlans, null, null) // logs =\u0026gt; Plans have already been added! // returns =\u0026gt; newPlans object 我们现在已经创建了一个函数，该函数将计划添加到当前没有嵌套属性 tuesday.location 的对象中。我们还使用 nullish 操作符提供默认值。这个函数将接受错误的值，如“0”作为有效的参数。这意味着我们的预算可以设置为零，没有任何错误。\n4. ? 操作符 三元运算符 ? 有三个操作数: 一个条件，一个条件为真时执行的表达式，以及一个条件为假时执行的表达式。让我们看看它是如何运作的。\nfunction checkCharge(charge) { return (charge \u0026gt; 0) ? \u0026#39;Ready for use\u0026#39; : \u0026#39;Needs to charge\u0026#39; } console.log(checkCharge(20)) // =\u0026gt; \u0026#39;Ready for use\u0026#39; console.log(checkCharge(0)) // =\u0026gt; \u0026#39;Needs to charge\u0026#39; 如果你花了一些时间研究 JavaScript，你可能以前见过三元运算符。然而，你知道三元运算符可以用于变量赋值吗？\nvar budget = 0 var transportion = (budget \u0026gt; 0) ? \u0026#39;Train\u0026#39; : \u0026#39;Walking\u0026#39; console.log(transportion) // =\u0026gt; \u0026#39;Walking\u0026#39; 我们甚至可以用它来复制 nullish 赋值的行为。\nvar x = 6 var x = (x !== null || x !== undefined) ? x : 3 console.log(x) // =\u0026gt; 6 现在让我们通过创建一个函数来泛化这种行为！\nfunction nullishAssignment(x,y) { return (x == null || x == undefined) ? y : x } var x = nullishAssignment(null, 8) // =\u0026gt; 8 var y = nullishAssignment(4,8) // =\u0026gt; 4 在结束之前，让我们使用三元运算符来重构前面示例中的函数。\nfunction addPlansWhenUndefined(plans, location, budget) { var newPlans = plans.tuesday?.location === undefined ? { ...plans, tuesday: { location: location ?? \u0026#34;Park\u0026#34;, budget: budget ?? 200 }, } : console.log(\u0026#34;Plans have already been added!\u0026#34;); newPlans ??= plans; return newPlans; } 总结 我们现在已经了解了这些操作符的基本原理。如果您对构建这些示例感到鼓舞，请在这里了解更多关于这些操作符的信息。Cheers ！\n原文地址：https://javascript.plainenglish.io/4-powerful-javascript-operators-youve-never-heard-of-487df37114ad\n","permalink":"/posts/%E8%AF%91%E6%96%87/339/","summary":"你有没有花一个下午的时间浏览过 Mozilla 文档？如果你有，你会很清楚网上有很多关于 JavaScript 的信息。这使得人们很容易忽略一些不同寻常的 JavaScript 操作符。\n然而，仅仅因为这些操作符不常见并不意味着它们不强大！它们在语法上看起来都很相似，但是当它们以不同的方式工作时，请务必阅读它们。\n让我们开始吧！\n译者注：nullish 代表 null 或者 undefined\n1. ?? 操作符 在 JavaScript 中，?? 操作符被称为nullish 合并操作符。如果第一个参数不是 null/undefined，这个运算符将返回第一个参数，否则，它将返回第二个参数。让我们看一个例子。\nnull ?? 5 // =\u0026gt; 5 3 ?? 5 // =\u0026gt; 3 当为一个变量分配默认值时，JavaScript 开发人员传统上依赖于逻辑 OR 操作符，如下所示。\nvar prevMoney = 1 var currMoney = 0 var noAccount = null var futureMoney = -1 function moneyAmount(money) { return money || `You currently do not own an account in the bank` } console.","title":"4个你从未听说过的强大的 JavaScript 运算符"},{"content":"自从我发过几篇关于面试经历的文章，由于我面试结果还不错，所有很多人来询问我一些面试相关的问题， 我这里给到 5 点建议，希望对大家有帮助。\n1. 简历里应该惜字如金 简历简历，可以分为简和历。简，简单简洁之意，历，经历，总体就是简单的表达自己的经历。\n我看到一些人的简历写了四、五页，甚至十来页的都有，每个项目把细节都写出来了，甚至还把项目截图给贴在了简历里面，生怕面试官不能理解需求，我建议最多不超过 2 页，亮点能写两页就已经很牛逼了。\n我相信有很多人工作了很多年，经历的项目很多，其实不需要把所有的项目都列出来，简历里是要展示自己的亮点，牛逼的点，这个亮点、牛逼的点事相对的，相对于自己所做的东西里面的，不是客观的牛逼(如果有当然更好，那必然也是你相对的里面的亮点，不冲突)。\n这句话意味着两层意思：\n很多人觉得自己的项目没有亮点的问题，因为你是那这别人更高的标准来衡量自己，所以你相对于别人没有亮点，这样你就写不出一份简历。 多个亮点类似的项目合并，或者只写一个，因为都是为了给面试官展示这一个亮点，写多了就是浪费空间，简历上面的字很珍贵。 第一层让你的简历有东西可写(增加)，第二层是让你把简历写得更优质(减少)。\n2. 简历应该是你设计过的 「设计简历」可能对这个词有点迷惑，可能你第一感觉是设计得好看一点，其实我想表达的设计是一种「圈套」，给面试设计的「圈套」，下面我会举例子让你明白这个「圈套」是什么。\n我举两个点：技术要点和项目经历。\n技术要点(就是自己会哪些技术)和项目经历相信是简历里面必不可少的内容，但是也许你可能忽略了哪些应该写。\n之前我给别人看简历的时候，我就会问他们写的技术点三个问题\n你对这个技术点的掌握程度是什么样的？ 你对这个技术点准备了哪些问题？ 当问到了相关技术点的时候，你能回答到哪个层次？仅仅了解、用过一两次、熟练使用、还是掌握原理。。。 当你能清楚的回答完这三个问题之后，你对你自己的水平就有了一定的认识，同时你对自己是否符合这个岗位有了一定的判断。我的目的就是让你了解自己的水平，然后才能针对性的去复习，查漏补缺，自己心里要有一杆秤，自己把这个知识点掌握到这个程度，能不能胜任这个岗位。\n当你了解了之后，然后根据你自己是否有充足的复习时间，你就可以去设计你的技术要点部分了，只写你准备好了的技术点，这个准备好了不是说掌握得很深才叫准备好了，就算是只能回答几个简单的问题也算是准备好了，就是你想准备，然后自己也去复习了的，这就叫准备好了，这样你在面试的时候才会胸有成竹。\n这就是在套路面试官问你准备好的问题，因为技术官基本只会问你简历里面提到的技术点，所以自己要对自己简历里面的技术点有充足的准备(把一些常见的面试题刷一些也是非常有帮助的)。\n第二点设计就是对于项目经历部分。项目经历这部分没有人比你更熟悉，所以如果问到项目经历应该是你的地盘，是你给面试官展示你的项目有多牛逼，你在里面发挥了多大的价值，带来了多大的成果，你要非常自信的去给他讲解。\n你的自信来源于什么？你非常了解这个项目的需求(为什么要做这个项目)、项目价值(做了之后怎么样了)，以及整个项目的技术方案，架构体系(怎么做的)，最重要的是你负责的或者参与的。\n同时，你再把你在项目中遇到的一些**难点，和解决方案总结下来，**那么项目这块就是你的主战场了。\n划重点：上面我所说的，最好最好是要准备，也就是说最好你要写下来，然后可以没事儿自己问自己上面的这些问题，然后自己去回答。\n你可能会说，哇，那要准备好多东西哦，所以说啊，项目不用写太多，就把觉得自己最牛逼的、最熟悉的两、三个项目总结下来就够了，在项目这块比的不是数量，而是质量。 **\n项目经历这块在面试的时候面试官会问你一些问题，比如一些其他的解决方案，如果当时想到了，或者面完了想到了，记得补充进去。\n3. 选常用的东西去准备 前端的技能要求很多，就算解决同一个问题的解决方案也会有很多个，比如解决视图的，就有 React、Vue，构建的就有 Webpack、Rollup、Parcel ，React 状态管理也有 Redux、Mbox、unstate 等。\n如果你的脑袋里面都装着这些东西，那么你肯定是复习不完的了，我的建议是把你项目用常用的东西好好准备，尽量不要让面试官把你常用的东西还问倒了，如果你平时用的东西你都没有掌握得好，你觉得面试官会觉得你平时不用的东西掌握好了吗？\n4. 准备一份自我介绍 准备一份自我介绍，不是简简单单的准备，而是自己要写下来，然后对着稿子练习一下。可能你会觉得很麻烦，有必要吗？我说两点：\n自我介绍是每个面试官，每场面试都会问的，没有哪个面试题有如此高的频率，100% 中的面试题不值得去好好准备吗？ 上面我说了简历是去套路面试官问哪些东西？而自我介绍就是去套路面试官怎么去问的一个很好的方式，因为往往面试官会在你自我介绍之后，会问几个你自我介绍里面所包含的东西，自我介绍的结尾，也许就是面试题的开始。 这个一个很好的引导面试官怎么问的方式。\n5. 职业规划 职业规划这个，其实也是一个高频面试题，不管是面试官还是 HR，都喜欢问的一个问题，这个题没有标准答案，我说一下我的一些看法。\n职业规划我觉得可以从三个方面去谈：\n我想做什么？(兴趣、价值观等方面) 我能做什么？(你的知识、技术、经历等方面来支持) 环境支持我做什么(意味着未来)？(外部环境，公司、团队) 大致你可以像这样去回答，我的兴趣是 XXX，优势是 XXX，因此我选择了前端，这是一个可以将我的兴趣和工作结合起来的行业，是我非常喜欢的，所以我会很用心对待这个工作。我之前做过 XX，有了 XX 的经验，然后觉得很有意思，想继续深挖(当然你也可以说，我之前一直在做 XXX，以后想换一种 XXX 技术)。近期我打算研究 XXX，后续可以在 XXX 上独当一面，独立负责 XXXX 事务,解决 XXXX 问题。谈到远期规划，我会根据环境的变化，工作内容的变化，以及我自身能力的变化，不断进行调整的。\n讲道理面试官问这个问题无非是想考察这四个点：\n求职者对自我的认知 求职者对岗位的了解程度，对职业的理解程度 求职者工作的稳定性 求职者的上进心、目标感和自我驱动力 知己知彼，方能百战不殆嘛，看看面试官的考察点，然后针对的去准备。职业规划这个东西不仅仅是为了面试，对自己长远来说都是非常有用的，每个人都希望好好准备下。\n小结 文章里没有写任何关于技术上的东西，而是重点介绍了如果去准备面试以及要准备哪些东西的策略，这些策略是通用的，无论是前端、后端都应该去准备的东西，看了这篇文章的同学，希望你能找到如意的工作。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/323/","summary":"自从我发过几篇关于面试经历的文章，由于我面试结果还不错，所有很多人来询问我一些面试相关的问题， 我这里给到 5 点建议，希望对大家有帮助。\n1. 简历里应该惜字如金 简历简历，可以分为简和历。简，简单简洁之意，历，经历，总体就是简单的表达自己的经历。\n我看到一些人的简历写了四、五页，甚至十来页的都有，每个项目把细节都写出来了，甚至还把项目截图给贴在了简历里面，生怕面试官不能理解需求，我建议最多不超过 2 页，亮点能写两页就已经很牛逼了。\n我相信有很多人工作了很多年，经历的项目很多，其实不需要把所有的项目都列出来，简历里是要展示自己的亮点，牛逼的点，这个亮点、牛逼的点事相对的，相对于自己所做的东西里面的，不是客观的牛逼(如果有当然更好，那必然也是你相对的里面的亮点，不冲突)。\n这句话意味着两层意思：\n很多人觉得自己的项目没有亮点的问题，因为你是那这别人更高的标准来衡量自己，所以你相对于别人没有亮点，这样你就写不出一份简历。 多个亮点类似的项目合并，或者只写一个，因为都是为了给面试官展示这一个亮点，写多了就是浪费空间，简历上面的字很珍贵。 第一层让你的简历有东西可写(增加)，第二层是让你把简历写得更优质(减少)。\n2. 简历应该是你设计过的 「设计简历」可能对这个词有点迷惑，可能你第一感觉是设计得好看一点，其实我想表达的设计是一种「圈套」，给面试设计的「圈套」，下面我会举例子让你明白这个「圈套」是什么。\n我举两个点：技术要点和项目经历。\n技术要点(就是自己会哪些技术)和项目经历相信是简历里面必不可少的内容，但是也许你可能忽略了哪些应该写。\n之前我给别人看简历的时候，我就会问他们写的技术点三个问题\n你对这个技术点的掌握程度是什么样的？ 你对这个技术点准备了哪些问题？ 当问到了相关技术点的时候，你能回答到哪个层次？仅仅了解、用过一两次、熟练使用、还是掌握原理。。。 当你能清楚的回答完这三个问题之后，你对你自己的水平就有了一定的认识，同时你对自己是否符合这个岗位有了一定的判断。我的目的就是让你了解自己的水平，然后才能针对性的去复习，查漏补缺，自己心里要有一杆秤，自己把这个知识点掌握到这个程度，能不能胜任这个岗位。\n当你了解了之后，然后根据你自己是否有充足的复习时间，你就可以去设计你的技术要点部分了，只写你准备好了的技术点，这个准备好了不是说掌握得很深才叫准备好了，就算是只能回答几个简单的问题也算是准备好了，就是你想准备，然后自己也去复习了的，这就叫准备好了，这样你在面试的时候才会胸有成竹。\n这就是在套路面试官问你准备好的问题，因为技术官基本只会问你简历里面提到的技术点，所以自己要对自己简历里面的技术点有充足的准备(把一些常见的面试题刷一些也是非常有帮助的)。\n第二点设计就是对于项目经历部分。项目经历这部分没有人比你更熟悉，所以如果问到项目经历应该是你的地盘，是你给面试官展示你的项目有多牛逼，你在里面发挥了多大的价值，带来了多大的成果，你要非常自信的去给他讲解。\n你的自信来源于什么？你非常了解这个项目的需求(为什么要做这个项目)、项目价值(做了之后怎么样了)，以及整个项目的技术方案，架构体系(怎么做的)，最重要的是你负责的或者参与的。\n同时，你再把你在项目中遇到的一些**难点，和解决方案总结下来，**那么项目这块就是你的主战场了。\n划重点：上面我所说的，最好最好是要准备，也就是说最好你要写下来，然后可以没事儿自己问自己上面的这些问题，然后自己去回答。\n你可能会说，哇，那要准备好多东西哦，所以说啊，项目不用写太多，就把觉得自己最牛逼的、最熟悉的两、三个项目总结下来就够了，在项目这块比的不是数量，而是质量。 **\n项目经历这块在面试的时候面试官会问你一些问题，比如一些其他的解决方案，如果当时想到了，或者面完了想到了，记得补充进去。\n3. 选常用的东西去准备 前端的技能要求很多，就算解决同一个问题的解决方案也会有很多个，比如解决视图的，就有 React、Vue，构建的就有 Webpack、Rollup、Parcel ，React 状态管理也有 Redux、Mbox、unstate 等。\n如果你的脑袋里面都装着这些东西，那么你肯定是复习不完的了，我的建议是把你项目用常用的东西好好准备，尽量不要让面试官把你常用的东西还问倒了，如果你平时用的东西你都没有掌握得好，你觉得面试官会觉得你平时不用的东西掌握好了吗？\n4. 准备一份自我介绍 准备一份自我介绍，不是简简单单的准备，而是自己要写下来，然后对着稿子练习一下。可能你会觉得很麻烦，有必要吗？我说两点：\n自我介绍是每个面试官，每场面试都会问的，没有哪个面试题有如此高的频率，100% 中的面试题不值得去好好准备吗？ 上面我说了简历是去套路面试官问哪些东西？而自我介绍就是去套路面试官怎么去问的一个很好的方式，因为往往面试官会在你自我介绍之后，会问几个你自我介绍里面所包含的东西，自我介绍的结尾，也许就是面试题的开始。 这个一个很好的引导面试官怎么问的方式。\n5. 职业规划 职业规划这个，其实也是一个高频面试题，不管是面试官还是 HR，都喜欢问的一个问题，这个题没有标准答案，我说一下我的一些看法。\n职业规划我觉得可以从三个方面去谈：\n我想做什么？(兴趣、价值观等方面) 我能做什么？(你的知识、技术、经历等方面来支持) 环境支持我做什么(意味着未来)？(外部环境，公司、团队) 大致你可以像这样去回答，我的兴趣是 XXX，优势是 XXX，因此我选择了前端，这是一个可以将我的兴趣和工作结合起来的行业，是我非常喜欢的，所以我会很用心对待这个工作。我之前做过 XX，有了 XX 的经验，然后觉得很有意思，想继续深挖(当然你也可以说，我之前一直在做 XXX，以后想换一种 XXX 技术)。近期我打算研究 XXX，后续可以在 XXX 上独当一面，独立负责 XXXX 事务,解决 XXXX 问题。谈到远期规划，我会根据环境的变化，工作内容的变化，以及我自身能力的变化，不断进行调整的。","title":"5 点可以让你提高面试通过率建议(干货)"},{"content":"demo演示 多边形图 demo1\n利用css Transition制作动画 demo2\n介绍 CSS 的 clip-path 属性是改变传统单调的盒子布局，走向响应式设计的通行证。可以摆脱条条框框，自由地在网页上使用六边形、星形等等等进行设计。\n如何使用 使用 CSS （ Chrome 24+, Safari 7+, Opera 15+, iOS 7.1+, Android 4.4+, Opera Mobile 24+（注意：所有目前支持的浏览器都需要一个-webkit前缀））\n使用SVG（上面列出的所有浏览器以及Firefox3.5+）\n内敛SVG引用 外部SVG文件的引用 语法 http://bennettfeely.com/clippy/\n基础多边形 .element { clip-path: ploygon(x1 y1, x2 y2, x3 y3, ...) } x y分别是每个点的坐标，点的绘制会根据顺时针的方向，然后根据直线连接起来\n圆形 .element { clip-path: circle(r at x y) }; r是圆的大小，x y分别是圆心的坐标。可以用百分比\n椭圆 .element { clip-path: ellipse(w h at x y) }; w为水平宽度，h为垂直高度，x y为椭圆的圆心\n矩形 .element { clip-path: inset(x y z p) }; x为离top的距离 y为right的距离 z为bottom的距离 p为left的距离。跟多边形一样也是顺时针，跟多边形不同的是多边形是用边来使用的\nsvg使用语法 .element { clip-path: url(\u0026#34;选择器\u0026#34;)} demo实现 demo1 demo2\n应用 变成 思路：分别是四块，那么就先切除四块菱形的，然后通过定位定到一起 怎么切成四块菱形呢，先整除四块方块的然后再切成菱形的，四块方块的大小为整个图片的一半， 但是方块怎么弄成不一样的呢，通过background-position来设置背景图片位置就可以达到想要的结果了\n第一步 四块图片代码如下： html\n\u0026lt;div class=\u0026#34;img-clip-block\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;img-clip-wrap\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;img-clip-wrap\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;img-clip-wrap\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;img-clip-wrap\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; css\n.img-clip-wrap { width: 300px; height: 300px; background-image: url(\u0026#34;http://karenmenezes.com/shapes-polygon/clip-demo.jpg\u0026#34;); background-repeat: no-repeat; margin-left: auto; margin-right: auto; display: block; position: relative; } 效果图 第二步 切成菱形块，并根据backgrount-position设置成对应的位置 效果图： html代码没变， css代码：\n.img-clip-wrap { width: 300px; height: 300px; background-image: url(\u0026#34;http://karenmenezes.com/shapes-polygon/clip-demo.jpg\u0026#34;); background-repeat: no-repeat; margin-left: auto; margin-right: auto; display: block; position: relative; + -webkit-clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%); + clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%); } .img-clip-wrap:nth-of-type(1) { background-position: top; } .img-clip-wrap:nth-of-type(2) { background-position: left; } .img-clip-wrap:nth-of-type(3) { background-position: right; } .img-clip-wrap:nth-of-type(4) { background-position: bottom; } 第三步 调整位置 观察我们要做的图，布局可以是分成三行，其中第二行应该有两个块，然后合在一起, 让第二行左右排列的话，只需要设置菱形块display为inline-block就可以了效果就是这样 看着这样，感觉马上就要成功了，怎么让他们合在一起呢，设置一下margin-top为负的就好了，最终效果就出来啦，最终代码：\n\u0026lt;div class=\u0026#34;img-clip-block\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;img-clip-row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;img-clip-wrap\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;img-clip-row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;img-clip-wrap\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;img-clip-wrap\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;img-clip-row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;img-clip-wrap\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 增加的css\n.img-clip-row { margin-top: -154px; } .img-clip-row:first-of-type { margin-top: auto; } .img-clip-wrap { display: inline-block; } 点我获取完整代码 点我获取升级demo\n扩展 本文只是介绍了最基础的知识语法和一点小应用，但是这还是太简单的东西了。 大漠在微博上分享的这个网站：http://species-in-pieces.com/，30个动物30种变换，看了之后简直打开眼界。\n参考文章 打破盒子模式的限制，使用Clip-Path创建响应式图形 clipping-masking-css\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/15/","summary":"\u003ch3 id=\"demo演示\"\u003edemo演示\u003c/h3\u003e\n\u003ch4 id=\"多边形图\"\u003e多边形图\u003c/h4\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"http://upload-images.jianshu.io/upload_images/2974893-23031feaabbb7c38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e","title":"clip-path 实战"},{"content":"也许，你会遇到这样的情况，UI给你一张图片，然而根据实际情况，比如需要适配XXX手机，或者需要把图片形状搞好看一点，会让前端人员进行图片剪裁工作。\n现在我们就已这个例子来对图片进行剪裁\nhtml代码如下\n\u0026lt;div class=\u0026#34;img-container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./黑人问号.jpg\u0026#34; alt=\u0026#34;黑人问号\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; css代码如下\n.img-container { width: 300px; } .img-container img { width: 100%; } 图片下面进行剪裁 现在的需求是这样的：原来尺寸是width为300px，height为300px的图片。 现在要把图片下面剪裁100px\n只需要将css改为\n.img-container { width: 300px; height: 200px; overflow: hidden; } .img-container img { width: 100%; } 具体思想就是:把img容器的高度设置成需要的高度，然后设置overflow:hidden就可以了。\n图片上面进行剪裁 比如我们把上面剪裁100px，变成这样\ncss代码只需要改为：\n.img-container { width: 300px; } .img-container img { width: 100%; margin-top: -100px; } 上下都剪裁 比如把上下都剪裁50px 效果如下： 思路：首先我们知道上下剪裁50px，那么原来高300px，现在只有200px,如果直接设置200px，就跟第一个例子一样，把下面剪裁了100px，根据上一个例子的思路，我们如果设置img的margin-top为负的，既可以把图片位置向上移。所以现在css代码如下：\n.img-container { width: 300px; height: 200px; overflow: hidden; } .img-container img { width: 100%; margin-top: -50px; } 当然学会了上下剪裁，左右剪裁都是类似的思路。\n圆形剪裁 这种一般用于圆形头像 思路：首先把container的width和height设置成宽高一样，然后设置img的 border-radius为容器宽高的一半就可以了\ncss代码：\n.img-container { width: 300px; height: 300px; } .img-container img { width: 100%; border-radius: 150px; } ","permalink":"/posts/%E6%8A%80%E6%9C%AF/6/","summary":"\u003cp\u003e也许，你会遇到这样的情况，UI给你一张图片，然而根据实际情况，比如需要适配XXX手机，或者需要把图片形状搞好看一点，会让前端人员进行图片剪裁工作。\u003c/p\u003e","title":"css实现图片剪裁"},{"content":"前言 CSS 里面的伪元素其实是非常好用的，但是经常容易被大家忽略，伪元素里面常用到的 content 属性，可能现在很多人仅仅以为 content 属性的值只支持字符串，除了字符串外常用到的还有 uri、counter ，今天所要介绍的就是 conter(计数器)。\n先看如下的例子：\n\u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;桃翁\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;介绍\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;css 计数器\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; 根据如上的 HTML 你是否有办法不通过 JavaScript ，仅仅用 CSS 在 title 前面增加 Title number: 呢？\nCSS 计数器基本概念 如果仅仅增加一个 Title，大家都知道通过伪元素(:before或者:after)，设置 content 为 Title，但是如何自动根据 h3 出现的顺序来展示自动编号可能很多人就不知道了。\n自动编号在 CSS 2.1 中是通过两个属性控制的，\u0026lsquo;counter-increment\u0026rsquo;和\u0026lsquo;counter-reset\u0026rsquo;。通过这些属性定义的计数器用于\u0026lsquo;content’属性的 counter() 和 counters() 函数\n初始化计数器 在使用计数器的时候需要先初始化这个计数器，并且设置一个计数器的名字(变量)。下面是例子，title 就是名字，conter-reset 就是用来初始化的，这个属性是必须设置的，否则没办法用计数器。\n\u0026lsquo;counter-reset\u0026rsquo;属性也含有一列一个或多个计数器，每个后面可以跟一个可选的整数。该整数给定了每次出现该元素时给计数器设置的值，默认为 0\ncounter-reset: 计数器名称[, 默认值number]; /* 重置计数器成0 */ 计数器自增 有了一个计数器的变量后，然后可以让这个变量进行自增：\n\u0026lsquo;counter-increment\u0026rsquo;属性接受一个或多个计数器名（标识符），每个后面都可以跟一个可选的整数。这个整数表示每次出现该元素时计数器递增几。默认增量是 1，可以接受 0 和负数\ncounter-increment: 计数器名称[, 增量]; /* 增加计数器值 */ 显示计数器 最后就是现实计数器的值，获取计数器的值有两个函数：counter() 和 counters() ，如上面的例子：\ncontent: counter(计数器名称[, 显示的风格]) /* 显示计数器 */ 或者\ncounters(计数器名称, 嵌套时拼接字符串[, 可选的显示风格]) 基本使用 学完了基本概念，然后就可以解决上面的问题了。按照步骤来，三步：\n初始化计时器 div { counter-reset: title; /* 重置计数器成0 */ } 计数器自增 h3:before { counter-increment: title; /* 增加计数器值 */ } 显示计数器 h3:before { content: \u0026#34;Title \u0026#34; counter(title) \u0026#34;: \u0026#34;; /* 显示计数器 */ } 合起来的解决方案如下：\ndiv { counter-reset: title; /* 重置计数器成0 */ } h3:before { counter-increment: title; /* 增加计数器值 */ content: \u0026#34;Title \u0026#34; counter(title) \u0026#34;: \u0026#34;; /* 显示计数器 */ } 高级用法 嵌套计数器与作用域 计数器是“自嵌套的（self-nesting）”，如果重置一个位于后代元素或者伪元素中的计数器，会自动创建一个新的计数器实例。这对 HTML 中的列表之类的场景来说很重要，这种场景下，元素自身可以嵌套任意深度，不用为每一层定义唯一命名的计数器\n计数器的作用域从文档中具有\u0026lsquo;counter-reset\u0026rsquo;该计数器的第一个元素开始，包括该元素的后代、后续兄弟及其后代。\n官方套话比较难懂，用大白话说就是设置了 counter-reset ，那么这个元素的的子元素都属于这个作用域下。\n想要完全理解作用域，就得把下面这个 图看懂：\n上面的这个 HTML 代码，再加上这段 CSS 代码：\nOL { counter-reset: item } LI { display: block } LI:before { counter-increment: item } OL 将会创建一个计数器，并且 OL 的所有子级将引用该计数器，如果我们用item[n]表示\u0026quot;item\u0026quot;计数器的第 n个实例，用\u0026quot;{\u0026ldquo;和\u0026rdquo;}\u0026ldquo;表示一个作用域的开始和结束，那么上面 HTML 片段将使用标注的计数器。\n注意看 2.3.1 的两个元素，由于他们都在 2.3 下面，有两个同名的计数器，那么这两个同名计数器会分别创建实例，所有会得到两个 2.3.1。\n如果懂了作用域的关系，接下来就可以通过 counter() 或者 counters() 函数进行展示。\ncounter\nCounter 显示代码如下：\nOL { counter-reset: item } LI { display: block } LI:before { content: counter(item) \u0026#34;. \u0026#34;; counter-increment: item } 效果如下：\n可以看到 counter 只会显示当前作用域下计数器的值，如果要生成嵌套作用域的计数器就得用 counters 函数。\ncounters\nOL { counter-reset: item } LI { display: block } LI:before { content: counters(item, \u0026#39;.\u0026#39;) \u0026#34; \u0026#34;; counter-increment: item; } 更换格式 在显示计数器部分 counter 和 counters 都有一个可选参数，显示风格，这个显示风格跟 list-style-type 是一样的，比如我们将文章开头的例子拿来举例，默认是 decimal 风格，比如换成字母(type 是 lower-latin)形式，css 如下：\ndiv { counter-reset: title; /* 重置计数器成0 */ } h3:before { counter-increment: title; /* 增加计数器值 */ content: \u0026#34;Title \u0026#34; counter(title, lower-latin) \u0026#34;: \u0026#34;; /* 显示计数器 */ } 效果如下，list-style-type 有很多种，甚至还有中文(list-style-type 是 cjk-ideographic)的。\n自定义起始值 起始值订为 5\ndiv { counter-reset: title 5; /*起始值订为 5 */ } h3:before { counter-increment: title; content: \u0026#34;Title \u0026#34; counter(title) \u0026#34;: \u0026#34;; } 自定义每次递增的值 每次递增的值为 2\ndiv { counter-reset: title 5; } h3:before { counter-increment: title 2; /* 每次递增的值为 2 */ content: \u0026#34;Title \u0026#34; counter(title) \u0026#34;: \u0026#34;; } 使用场景 场景 1： 嵌套列表 比如要生成一个文章的大纲：\n场景2： 计算已经勾选的复选框 使用输入框的：checked 伪类，我们可以检查复选框是否被选中，选中的话，我们计数器的数值就会增加。\n下面的这个 2 种菜系直接就是可以通过计数器来实现的，不需要使用 js\n场景3： 自动追踪文档条目 当你需要处理一些重复元素的时候，并且你同样想统计他们的数量，那么这个方案会很好用。\n参考文章 css计数器详解 ","permalink":"/posts/%E6%8A%80%E6%9C%AF/288/","summary":"前言 CSS 里面的伪元素其实是非常好用的，但是经常容易被大家忽略，伪元素里面常用到的 content 属性，可能现在很多人仅仅以为 content 属性的值只支持字符串，除了字符串外常用到的还有 uri、counter ，今天所要介绍的就是 conter(计数器)。\n先看如下的例子：\n\u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;桃翁\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;介绍\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;css 计数器\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; 根据如上的 HTML 你是否有办法不通过 JavaScript ，仅仅用 CSS 在 title 前面增加 Title number: 呢？\nCSS 计数器基本概念 如果仅仅增加一个 Title，大家都知道通过伪元素(:before或者:after)，设置 content 为 Title，但是如何自动根据 h3 出现的顺序来展示自动编号可能很多人就不知道了。\n自动编号在 CSS 2.1 中是通过两个属性控制的，\u0026lsquo;counter-increment\u0026rsquo;和\u0026lsquo;counter-reset\u0026rsquo;。通过这些属性定义的计数器用于\u0026lsquo;content’属性的 counter() 和 counters() 函数\n初始化计数器 在使用计数器的时候需要先初始化这个计数器，并且设置一个计数器的名字(变量)。下面是例子，title 就是名字，conter-reset 就是用来初始化的，这个属性是必须设置的，否则没办法用计数器。\n\u0026lsquo;counter-reset\u0026rsquo;属性也含有一列一个或多个计数器，每个后面可以跟一个可选的整数。该整数给定了每次出现该元素时给计数器设置的值，默认为 0\ncounter-reset: 计数器名称[, 默认值number]; /* 重置计数器成0 */ 计数器自增 有了一个计数器的变量后，然后可以让这个变量进行自增：\n\u0026lsquo;counter-increment\u0026rsquo;属性接受一个或多个计数器名（标识符），每个后面都可以跟一个可选的整数。这个整数表示每次出现该元素时计数器递增几。默认增量是 1，可以接受 0 和负数\ncounter-increment: 计数器名称[, 增量]; /* 增加计数器值 */ 显示计数器 最后就是现实计数器的值，获取计数器的值有两个函数：counter() 和 counters() ，如上面的例子：","title":"css计数器教程"},{"content":" 文章首发于个人博客\n前言 2016 年都已经透露出来的概念，这都 9102 年了，我才开始写 Fiber 的文章，表示惭愧呀。不过现在好的是关于 Fiber 的资料已经很丰富了，在写文章的时候参考资料比较多，比较容易深刻的理解。\nReact 作为我最喜欢的框架，没有之一，我愿意花很多时间来好好的学习他，我发现对于学习一门框架会有四种感受，刚开始没使用过，可能有一种很神奇的感觉；然后接触了，遇到了不熟悉的语法，感觉这是什么垃圾东西，这不是反人类么；然后当你熟悉了之后，真香，设计得挺好的，这个时候它已经改变了你编程的思维方式了；再到后来，看过他的源码，理解他的设计之后，设计得确实好，感觉自己也能写一个的样子。\n所以我今年(对，没错，就是一年)就是想完全的学透 React，所以开了一个 Deep In React 的系列，把一些新手在使用 API 的时候不知道为什么的点，以及一些为什么有些东西要这么设计写出来，与大家共同探讨 React 的奥秘。\n我的思路是自上而下的介绍，先理解整体的 Fiber 架构，然后再细挖每一个点，所以这篇文章主要是谈 Fiber 架构的。\n介绍 在详细介绍 Fiber 之前，先了解一下 Fiber 是什么，以及为什么 React 团队要话两年时间重构协调算法。\nReact 的核心思想 内存中维护一颗虚拟DOM树，数据变化时（setState），自动更新虚拟 DOM，得到一颗新树，然后 Diff 新老虚拟 DOM 树，找到有变化的部分，得到一个 Change(Patch)，将这个 Patch 加入队列，最终批量更新这些 Patch 到 DOM 中。\nReact 16 之前的不足 首先我们了解一下 React 的工作过程，当我们通过render() 和 setState() 进行组件渲染和更新的时候，React 主要有两个阶段：\n调和阶段(Reconciler)：官方解释。React 会自顶向下通过递归，遍历新数据生成新的 Virtual DOM，然后通过 Diff 算法，找到需要变更的元素(Patch)，放到更新队列里面去。\n渲染阶段(Renderer)：遍历更新队列，通过调用宿主环境的API，实际更新渲染对应元素。宿主环境，比如 DOM、Native、WebGL 等。\n在协调阶段阶段，由于是采用的递归的遍历方式，这种也被成为 Stack Reconciler，主要是为了区别 Fiber Reconciler 取的一个名字。这种方式有一个特点：一旦任务开始进行，就无法中断，那么 js 将一直占用主线程， 一直要等到整棵 Virtual DOM 树计算完成之后，才能把执行权交给渲染引擎，那么这就会导致一些用户交互、动画等任务无法立即得到处理，就会有卡顿，非常的影响用户体验。\n如何解决之前的不足 之前的问题主要的问题是任务一旦执行，就无法中断，js 线程一直占用主线程，导致卡顿。\n可能有些接触前端不久的不是特别理解上面为什么 js 一直占用主线程就会卡顿，我这里还是简单的普及一下。\n浏览器每一帧都需要完成哪些工作？ 页面是一帧一帧绘制出来的，当每秒绘制的帧数（FPS）达到 60 时，页面是流畅的，小于这个值时，用户会感觉到卡顿。\n1s 60 帧，所以每一帧分到的时间是 1000/60 ≈ 16 ms。所以我们书写代码时力求不让一帧的工作量超过 16ms。\n浏览器一帧内的工作\n通过上图可看到，一帧内需要完成如下六个步骤的任务：\n处理用户的交互 JS 解析执行 帧开始。窗口尺寸变更，页面滚去等的处理 rAF(requestAnimationFrame) 布局 绘制 如果这六个步骤中，任意一个步骤所占用的时间过长，总时间超过 16ms 了之后，用户也许就能看到卡顿。\n而在上一小节提到的调和阶段花的时间过长，也就是 js 执行的时间过长，那么就有可能在用户有交互的时候，本来应该是渲染下一帧了，但是在当前一帧里还在执行 JS，就导致用户交互不能麻烦得到反馈，从而产生卡顿感。\n解决方案 **把渲染更新过程拆分成多个子任务，每次只做一小部分，做完看是否还有剩余时间，如果有继续下一个任务；如果没有，挂起当前任务，将时间控制权交给主线程，等主线程不忙的时候在继续执行。**这种策略叫做 Cooperative Scheduling（合作式调度），操作系统常用任务调度策略之一。\n补充知识，操作系统常用任务调度策略：先来先服务（FCFS）调度算法、短作业（进程）优先调度算法（SJ/PF）、最高优先权优先调度算法（FPF）、高响应比优先调度算法（HRN）、时间片轮转法（RR）、多级队列反馈法。\n合作式调度主要就是用来分配任务的，当有更新任务来的时候，不会马上去做 Diff 操作，而是先把当前的更新送入一个 Update Queue 中，然后交给 Scheduler 去处理，Scheduler 会根据当前主线程的使用情况去处理这次 Update。为了实现这种特性，使用了requestIdelCallbackAPI。对于不支持这个API 的浏览器，React 会加上 pollyfill。\n在上面我们已经知道浏览器是一帧一帧执行的，在两个执行帧之间，主线程通常会有一小段空闲时间，requestIdleCallback可以在这个空闲期（Idle Period）调用空闲期回调（Idle Callback），执行一些任务。\n低优先级任务由requestIdleCallback处理；\n高优先级任务，如动画相关的由requestAnimationFrame处理；\nrequestIdleCallback 可以在多个空闲期调用空闲期回调，执行任务；\nrequestIdleCallback 方法提供 deadline，即任务执行限制时间，以切分任务，避免长时间执行，阻塞UI渲染而导致掉帧；\n这个方案看似确实不错，但是怎么实现可能会遇到几个问题：\n如何拆分成子任务？ 一个子任务多大合适？ 怎么判断是否还有剩余时间？ 有剩余时间怎么去调度应该执行哪一个任务？ 没有剩余时间之前的任务怎么办？ 接下里整个 Fiber 架构就是来解决这些问题的。\n什么是 Fiber 为了解决之前提到解决方案遇到的问题，提出了以下几个目标：\n暂停工作，稍后再回来。 为不同类型的工作分配优先权。 重用以前完成的工作。 如果不再需要，则中止工作。 为了做到这些，我们首先需要一种方法将任务分解为单元。从某种意义上说，这就是 Fiber，Fiber 代表一种工作单元。\n但是仅仅是分解为单元也无法做到中断任务，因为函数调用栈就是这样，每个函数为一个工作，每个工作被称为堆栈帧，它会一直工作，直到堆栈为空，无法中断。\n所以我们需要一种增量渲染的调度，那么就需要重新实现一个堆栈帧的调度，这个堆栈帧可以按照自己的调度算法执行他们。另外由于这些堆栈是可以自己控制的，所以可以加入并发或者错误边界等功能。\n因此 Fiber 就是重新实现的堆栈帧，本质上 Fiber 也可以理解为是一个虚拟的堆栈帧，将可中断的任务拆分成多个子任务，通过按照优先级来自由调度子任务，分段更新，从而将之前的同步渲染改为异步渲染。\n所以我们可以说 Fiber 是一种数据结构(堆栈帧)，也可以说是一种解决可中断的调用任务的一种解决方案，它的特性就是时间分片(time slicing)和暂停(supense)。\n如果了解协程的可能会觉得 Fiber 的这种解决方案，跟协程有点像(区别还是很大的)，是可以中断的，可以控制执行顺序。在 JS 里的 generator 其实就是一种协程的使用方式，不过颗粒度更小，可以控制函数里面的代码调用的顺序，也可以中断。\nFiber 是如何工作的 ReactDOM.render() 和 setState 的时候开始创建更新。 将创建的更新加入任务队列，等待调度。 在 requestIdleCallback 空闲时执行任务。 从根节点开始遍历 Fiber Node，并且构建 WokeInProgress Tree。 生成 effectList。 根据 EffectList 更新 DOM。 下面是一个详细的执行过程图：\n第一部分从 ReactDOM.render() 方法开始，把接收的 React Element 转换为 Fiber 节点，并为其设置优先级，创建 Update，加入到更新队列，这部分主要是做一些初始数据的准备。 第二部分主要是三个函数：scheduleWork、requestWork、performWork，即安排工作、申请工作、正式工作三部曲，React 16 新增的异步调用的功能则在这部分实现，这部分就是 Schedule 阶段，前面介绍的 Cooperative Scheduling 就是在这个阶段，只有在这个解决获取到可执行的时间片，第三部分才会继续执行。具体是如何调度的，后面文章再介绍，这是 React 调度的关键过程。 第三部分是一个大循环，遍历所有的 Fiber 节点，通过 Diff 算法计算所有更新工作，产出 EffectList 给到 commit 阶段使用，这部分的核心是 beginWork 函数，这部分基本就是 Fiber Reconciler ，包括 reconciliation 和 commit 阶段。 Fiber Node FIber Node，承载了非常关键的上下文信息，可以说是贯彻整个创建和更新的流程，下来分组列了一些重要的 Fiber 字段。\n{ ... // 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点） stateNode: any, // 单链表树结构 return: Fiber | null,// 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回 child: Fiber | null,// 指向自己的第一个子节点 sibling: Fiber | null, // 指向自己的兄弟结构，兄弟节点的return指向同一个父节点 // 更新相关 pendingProps: any, // 新的变动带来的新的props memoizedProps: any, // 上一次渲染完成之后的props updateQueue: UpdateQueue\u0026lt;any\u0026gt; | null, // 该Fiber对应的组件产生的Update会存放在这个队列里面 memoizedState: any, // 上一次渲染的时候的state // Scheduler 相关 expirationTime: ExpirationTime, // 代表任务在未来的哪个时间点应该被完成，不包括他的子树产生的任务 // 快速确定子树中是否有不在等待的变化 childExpirationTime: ExpirationTime, // 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber // 我们称他为`current \u0026lt;==\u0026gt; workInProgress` // 在渲染完成之后他们会交换位置 alternate: Fiber | null, // Effect 相关的 effectTag: SideEffectTag, // 用来记录Side Effect nextEffect: Fiber | null, // 单链表用来快速查找下一个side effect firstEffect: Fiber | null, // 子树中第一个side effect lastEffect: Fiber | null, // 子树中最后一个side effect .... }; Fiber Reconciler 在第二部分，进行 Schedule 完，获取到时间片之后，就开始进行 reconcile。\nFiber Reconciler 是 React 里的调和器，这也是任务调度完成之后，如何去执行每个任务，如何去更新每一个节点的过程，对应上面的第三部分。\nreconcile 过程分为2个阶段（phase）：\n（可中断）render/reconciliation 通过构造 WorkInProgress Tree 得出 Change。 （不可中断）commit 应用这些DOM change。 reconciliation 阶段 在 reconciliation 阶段的每个工作循环中，每次处理一个 Fiber，处理完可以中断/挂起整个工作循环。通过每个节点更新结束时向上归并 Effect List 来收集任务结果，reconciliation 结束后，根节点的 Effect List里记录了包括 DOM change 在内的所有 Side Effect。\nrender 阶段可以理解为就是 Diff 的过程，得出 Change(Effect List)，会执行声明如下的声明周期方法：\n[UNSAFE_]componentWillMount（弃用） [UNSAFE_]componentWillReceiveProps（弃用） getDerivedStateFromProps shouldComponentUpdate [UNSAFE_]componentWillUpdate（弃用） render 由于 reconciliation 阶段是可中断的，一旦中断之后恢复的时候又会重新执行，所以很可能 reconciliation 阶段的生命周期方法会被多次调用，所以在 reconciliation 阶段的生命周期的方法是不稳定的，我想这也是 React 为什么要废弃 componentWillMount 和 componentWillReceiveProps方法而改为静态方法 getDerivedStateFromProps 的原因吧。\ncommit 阶段 commit 阶段可以理解为就是将 Diff 的结果反映到真实 DOM 的过程。\n在 commit 阶段，在 commitRoot 里会根据 effect 的 effectTag，具体 effectTag 见源码 ，进行对应的插入、更新、删除操作，根据 tag 不同，调用不同的更新方法。\ncommit 阶段会执行如下的声明周期方法：\ngetSnapshotBeforeUpdate componentDidMount componentDidUpdate componentWillUnmount P.S：注意区别 reconciler、reconcile 和 reconciliation，reconciler 是调和器，是一个名词，可以说是 React 工作的一个模块，协调模块；reconcile 是调和器调和的动作，是一个动词；而 reconciliation 只是 reconcile 过程的第一个阶段。\nFiber Tree 和 WorkInProgress Tree React 在 render 第一次渲染时，会通过 React.createElement 创建一颗 Element 树，可以称之为 Virtual DOM Tree，由于要记录上下文信息，加入了 Fiber，每一个 Element 会对应一个 Fiber Node，将 Fiber Node 链接起来的结构成为 Fiber Tree。它反映了用于渲染 UI 的应用程序的状态。这棵树通常被称为 current 树（当前树，记录当前页面的状态）。\n在后续的更新过程中（setState），每次重新渲染都会重新创建 Element, 但是 Fiber 不会，Fiber 只会使用对应的 Element 中的数据来更新自己必要的属性，\nFiber Tree 一个重要的特点是链表结构，将递归遍历编程循环遍历，然后配合 requestIdleCallback API, 实现任务拆分、中断与恢复。\n这个链接的结构是怎么构成的呢，这就要主要到之前 Fiber Node 的节点的这几个字段：\n// 单链表树结构 { return: Fiber | null, // 指向父节点 child: Fiber | null,// 指向自己的第一个子节点 sibling: Fiber | null,// 指向自己的兄弟结构，兄弟节点的return指向同一个父节点 } 每一个 Fiber Node 节点与 Virtual Dom 一一对应，所有 Fiber Node 连接起来形成 Fiber tree, 是个单链表树结构，如下图所示：\n对照图来看，是不是可以知道 Fiber Node 是如何联系起来的呢，Fiber Tree 就是这样一个单链表。\n当 render 的时候有了这么一条单链表，当调用 setState 的时候又是如何 Diff 得到 change 的呢？\n采用的是一种叫双缓冲技术（double buffering），这个时候就需要另外一颗树：WorkInProgress Tree，它反映了要刷新到屏幕的未来状态。\nWorkInProgress Tree 构造完毕，得到的就是新的 Fiber Tree，然后喜新厌旧（把 current 指针指向WorkInProgress Tree，丢掉旧的 Fiber Tree）就好了。\n这样做的好处：\n能够复用内部对象（fiber） 节省内存分配、GC的时间开销 就算运行中有错误，也不会影响 View 上的数据 每个 Fiber上都有个alternate属性，也指向一个 Fiber，创建 WorkInProgress 节点时优先取alternate，没有的话就创建一个。\n创建 WorkInProgress Tree 的过程也是一个 Diff 的过程，Diff 完成之后会生成一个 Effect List，这个 Effect List 就是最终 Commit 阶段用来处理副作用的阶段。\n后记 本开始想一篇文章把 Fiber 讲透的，但是写着写着发现确实太多了，想写详细，估计要写几万字，所以我这篇文章的目的仅仅是在没有涉及到源码的情况下梳理了大致 React 的工作流程，对于细节，比如如何调度异步任务、如何去做 Diff 等等细节将以小节的方式一个个的结合源码进行分析。\n说实话，自己不是特别满意这篇，感觉头重脚轻，在讲协调之前写得还挺好的，但是在讲协调这块文字反而变少了，因为我是专门想写一篇文章讲协调的，所以这篇仅仅用来梳理整个流程。\n但是梳理整个流程又发现 Schedule 这块基本没什么体现，哎，不想写了，这篇文章拖太久了，请继续后续的文章。\n可以关注我的 github：Deep In React\n一些问题 接下来留一些思考题。\n如何去划分任务优先级？\n在 reconcile 过程的 render 阶段是如何去遍历链表，如何去构建 workInProgress 的？\n当任务被打断，如何恢复？\n如何去收集 EffectList？\n针对不同的组件类型如何进行更新？\n参考 完全理解 React Fiber Fiber React16源码之React Fiber架构 ","permalink":"/posts/%E6%8A%80%E6%9C%AF/262/","summary":"文章首发于个人博客\n前言 2016 年都已经透露出来的概念，这都 9102 年了，我才开始写 Fiber 的文章，表示惭愧呀。不过现在好的是关于 Fiber 的资料已经很丰富了，在写文章的时候参考资料比较多，比较容易深刻的理解。\nReact 作为我最喜欢的框架，没有之一，我愿意花很多时间来好好的学习他，我发现对于学习一门框架会有四种感受，刚开始没使用过，可能有一种很神奇的感觉；然后接触了，遇到了不熟悉的语法，感觉这是什么垃圾东西，这不是反人类么；然后当你熟悉了之后，真香，设计得挺好的，这个时候它已经改变了你编程的思维方式了；再到后来，看过他的源码，理解他的设计之后，设计得确实好，感觉自己也能写一个的样子。\n所以我今年(对，没错，就是一年)就是想完全的学透 React，所以开了一个 Deep In React 的系列，把一些新手在使用 API 的时候不知道为什么的点，以及一些为什么有些东西要这么设计写出来，与大家共同探讨 React 的奥秘。\n我的思路是自上而下的介绍，先理解整体的 Fiber 架构，然后再细挖每一个点，所以这篇文章主要是谈 Fiber 架构的。\n介绍 在详细介绍 Fiber 之前，先了解一下 Fiber 是什么，以及为什么 React 团队要话两年时间重构协调算法。\nReact 的核心思想 内存中维护一颗虚拟DOM树，数据变化时（setState），自动更新虚拟 DOM，得到一颗新树，然后 Diff 新老虚拟 DOM 树，找到有变化的部分，得到一个 Change(Patch)，将这个 Patch 加入队列，最终批量更新这些 Patch 到 DOM 中。\nReact 16 之前的不足 首先我们了解一下 React 的工作过程，当我们通过render() 和 setState() 进行组件渲染和更新的时候，React 主要有两个阶段：\n调和阶段(Reconciler)：官方解释。React 会自顶向下通过递归，遍历新数据生成新的 Virtual DOM，然后通过 Diff 算法，找到需要变更的元素(Patch)，放到更新队列里面去。\n渲染阶段(Renderer)：遍历更新队列，通过调用宿主环境的API，实际更新渲染对应元素。宿主环境，比如 DOM、Native、WebGL 等。","title":"Deep In React 之浅谈 React Fiber 架构（一）"},{"content":"[Meting] [Music server=\u0026ldquo;tencent\u0026rdquo; id=\u0026ldquo;000AwJtd3Wp27b\u0026rdquo; type=\u0026ldquo;song\u0026rdquo;/] [/Meting]\n我在 medium 上看到一篇 3 JavaScript Performance Mistakes You Should Stop Doing 文章(点击阅读全文可以查看原文，需要科学上网)，大概意思就是说有 3 个 JavaScript 性能错误，你不应该再去写了。很多“歪果仁”也是一看到这个标题就开始**“喷”**作者了，下文会详细说。我先介绍下这篇文章的主要内容\n文章主要内容： 当 ES5 发布的时候，JavaScript 引入了很多新的数组函数。其中包括 forEach，reduce，map，filter - 它们让我们感觉语言在不断增长，功能越来越强大，编写代码变得更加有趣和流畅，结果更易于阅读和理解。\n大约在同一时间，一个新的环境\u0026ndash;Node.js，它使我们能够从前端到后端平稳过渡，同时真正重新定义完整的全栈开发。\n所以作者就测试了一下新提供的这些方法是否会影响我们程序的性能。他在 macOS 上对Node.js v10.11.0 和 Chrome 浏览器执行了以下测试。\n1. 循环数组\n他想到的第一次很常见的场景，就是计算一下 10k 项的总和。然后比较了使用 for，for of，while，forEach 和 reduce 的随机 10k 项的总和。运行测试 10,000 次返回以下结果：\nFor Loop, average loop time: ~10 microseconds\rFor-Of, average loop time: ~110 microseconds\rForEach, average loop time: ~77 microseconds\rWhile, average loop time: ~11 microseconds\rReduce, average loop time: ~113 microseconds 在谷歌搜索如何对数组求和时，reduce 是最好的解决方案，但它是最慢的。即使是最新的（ES6）也提供了较差的性能。事实证明，老的 for 循环提供了迄今为止最好的性能 - 超过 10 倍以上！\n最新推荐的解决方案如何使 JavaScript 变得如此之慢？造成这种痛苦的原因有两个主要原因：reduce 和 forEach 需要执行一个回调函数，这个函数被递归调用并使堆栈膨胀，以及对执行代码进行的附加操作和验证（在此描述 https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.21）。\n2. 复制数组\n虽然这听起来不那么有趣，但这是不可变函数的支柱，它在生成输出时不会修改输入。\n此处的性能测试结果再次显示了同样有趣的趋势 - 当重复 10k 随机项的 10k 数组时，使用旧的传统解决方案更快。同样最新的 ES6 扩展操作符 [... arr] 和来自 Array.from（arr） 的数组加上 ES5 的 map arr.map（x =\u0026gt; x） 不如老的 slice arr.slice（） 和 concat [] .concat（arr）。\nDuplicate using Slice, average: ~367 microseconds\rDuplicate using Map, average: ~469 microseconds\rDuplicate using Spread, average: ~512 microseconds\rDuplicate using Conct, average: ~366 microseconds\rDuplicate using Array From, average: ~1,436 microseconds\rDuplicate manually, average: ~412 microseconds 3. 迭代对象\n另一种常见的情况是迭代对象，当我们尝试遍历 JSON 和对象时，这是必要的，而不是寻找特定的键值。同样有老 的解决方案，如 for-in for（let key in obj），或者后来的 Object.keys（obj）（在 es6 中显示）和 Object.entries（obj） （来自ES8）它返回 keys 和 vaues。\n使用上述方法对 10k 个对象迭代进行性能分析，每个迭代包含 1,000 个随机 key 和value，得到以下结论。\nObject iterate For-In, average: ~240 microseconds\rObject iterate Keys For Each, average: ~294 microseconds\rObject iterate Entries For-Of, average: ~535 microseconds 原因是在后两个解决方案中创建了可枚举值数组，而不是在没有 keys 数组的情况下直接遍历对象。但最终结果仍然引起关注。\n最后 我的结论很清楚 - 如果快速性能对您的应用程序至关重要，或者您的服务器需要处理一些负载 - 使用最酷，更易读，更感觉的解决方案将会对您的应用程序性能产生重大影响 - 最多可以达到慢 10 倍！\n下一次，在盲目采用最新趋势之前，确保它们也符合您的要求 - 对于小型应用程序，快速编写和更易读的代码是完美的 - 但对于压力大的服务器和大型客户端应用程序，这可能不是最好的做法。\n评论吃瓜 评论 1\n一个英文名叫 Christian Gitter 评论说：\n不同意。谁在乎微秒？\n如果您正在开发一个高性能的超级关键服务器应用程序，那么您要么首先不使用 JavaScript，要么您将成为一名经验丰富的开发人员，他知道自己在做什么以及谁不仅仅取得他的第一个结果。 “如何将数组相加”,Google 搜索结果并将其作为目标。\n我们假设你有一个你注意到的服务很慢。你有两个选择。选项 1 占用了团队中的一个或几个开发人员，让他们花一些时间来优化代码以提高速度。选项 2 正在投入一些资金来扩展您的硬件。我说几乎总是选择 2。\n在短期内，让您的开发人员进行优化工作可能比扩展服务器所需的成本更高。长期成本甚至更高，因为您将不得不继续进行这种优化，并且您将失去代码可读性，因此新开发人员需要更长时间来确定代码的作用。\n这是你几乎应该做的事情：\n循环数组=\u0026gt; [].forEach（...） 复制数组=\u0026gt; const newArray = [... oldArray] 迭代对象 \u0026hellip;如果你只需要 values =\u0026gt; Object.values（obj）.forEach（） \u0026hellip;或者如果你想要 keys =\u0026gt; Object.entries（obj）.forEach（） \u0026hellip;或者只是 keys =\u0026gt; Object.keys（obj）.forEach（） 我想你明白我的意思。\n作者回复：\n“谁在乎微秒？” - 好吧，在我工作的地方，我们每天处理大约550亿个事件，这意味着每秒大约700k个事件，当我们尝试在这种环境中运行节点时\u0026hellip;\u0026hellip;你知道其余的事情。\nStephen Young 回复作者\n好吧，让我们对每秒 700k 事件进行数学计算。让我们说，为了论证，20％ 的事件（每秒 140k）正在进行一些繁重的工作并循环超过一万件事情。现在，假设您将这些循环从 forEach 优化到 for 循环。您的“基准”可为此更改节省 67 微秒。700k * 0.20 * 67 等于 938 万微秒。这归结为节省了惊人的 9.38 秒。这些秒不是线性的，因为我假设您没有在单个 JavaScript 线程上使用单个服务器消耗 700k 事件。在那种规模上，你并行运行多个线程。所以在这个非常慷慨的例子中，你每秒循环 10k 项、 140k次\u0026hellip;\u0026hellip;你最终可能节省不到一秒钟。\n评论 2\n对于真正的应用程序性能，整个博客文章遗憾地是非常糟糕的建议。\n在优化性能时应该做的第一件事是找到应用程序的实际瓶颈。否则，花费时间来优化对实际执行时间没有实际影响的代码。我是一名软件架构师，我最喜欢的一件事就是让代码快速发展。根据我的经验，主要的瓶颈主要是算法复杂性差。除此之外，算法中经常出现错误，并且在实现中存在许多奇怪之处。所以请使用 https://clinicjs.org/ 等工具。这有助于找到应该优化的代码。\n这篇文章中提到的优化是微优化，降低了代码的可读性，因此代码需要更多的时间来阅读和理解，这导致优化热代码路径的时间更短。性能也只是当前版本的快照，并且由于新的引擎优化，相同的代码在下一版本中可能表现得非常不同。\n如果内置函数确实比不同的实现慢得多（由于 V8 团队很厉害，这种情况不再那么常见），请向 V8 团队报告，以便他们可以进一步优化这些部分。还要注意，由于底层引擎优化（死代码消除等），基准测试本身可能不会按预期运行。\n个人看法 首先发布个人看法，我觉得这篇文章还是很有价值的，很有趣的，它带给我们的价值不是说这些比较的数字比较有价值，而是另外的两点：\n让我们要注意，google 出来的第一个答案不一定是好的答案。 ES 新发布的特性不一定是最好的解决方案，我们需要引起注意。 当发现性能瓶颈的时候这也许是个方案(但是依我看来大多数用不上) 另外我观看评论得出以下结论：\n过早优化是万恶之源，代码的可读性比性能更重要，因为代码是写来给人看的，不是给机器看的。这点让我想到前几天在掘金里面争论 FP(函数式编程) 和 OOP(面向对象编程)哪个好，或者说该用哪个？我的观点就是看自己的团队，如果你的团队大部分人都喜欢 FP，都熟悉 FP，大家都看得懂 FP，那么就可以用 FP，比如 Facebook 的 React 团队，他们很多都热衷于 FP，那么都是用 FP 有何不可呢？因为 FP 的抽象程度更高，所以对开发者要求相对高一点，所以对于不习惯 FP 的团队，还是老老实实的 OOP 吧。我这里没说 FP 就比 OOP 更好，只是想表达看个人爱好的团队爱好。\n对于作者文中提到的这种微优化，在绝大部分情况下是没必要的，性能瓶颈往往可以通过优化算法来解决，算法解决不了可以通过增加服务器来解决。(所以这个观点我跟大部分的评论者相同)\n“喷”也要有理有据，不赞同别人的观点，你可以举一些反例来证明，而不是当颠覆自己的认知的时候，当键盘侠，评论什么，垃圾文章，傻逼，v8 团队写的不好，你写的得好之类的话。另外我们要明白，有时候作者起的文章标题有点偏激，或者极端，他只是想引起你的重视，因为他觉得这点很重要，很可能是颠覆你以前的认知的事儿。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/226/","summary":"[Meting] [Music server=\u0026ldquo;tencent\u0026rdquo; id=\u0026ldquo;000AwJtd3Wp27b\u0026rdquo; type=\u0026ldquo;song\u0026rdquo;/] [/Meting]\n我在 medium 上看到一篇 3 JavaScript Performance Mistakes You Should Stop Doing 文章(点击阅读全文可以查看原文，需要科学上网)，大概意思就是说有 3 个 JavaScript 性能错误，你不应该再去写了。很多“歪果仁”也是一看到这个标题就开始**“喷”**作者了，下文会详细说。我先介绍下这篇文章的主要内容\n文章主要内容： 当 ES5 发布的时候，JavaScript 引入了很多新的数组函数。其中包括 forEach，reduce，map，filter - 它们让我们感觉语言在不断增长，功能越来越强大，编写代码变得更加有趣和流畅，结果更易于阅读和理解。\n大约在同一时间，一个新的环境\u0026ndash;Node.js，它使我们能够从前端到后端平稳过渡，同时真正重新定义完整的全栈开发。\n所以作者就测试了一下新提供的这些方法是否会影响我们程序的性能。他在 macOS 上对Node.js v10.11.0 和 Chrome 浏览器执行了以下测试。\n1. 循环数组\n他想到的第一次很常见的场景，就是计算一下 10k 项的总和。然后比较了使用 for，for of，while，forEach 和 reduce 的随机 10k 项的总和。运行测试 10,000 次返回以下结果：\nFor Loop, average loop time: ~10 microseconds\rFor-Of, average loop time: ~110 microseconds\rForEach, average loop time: ~77 microseconds\rWhile, average loop time: ~11 microseconds\rReduce, average loop time: ~113 microseconds 在谷歌搜索如何对数组求和时，reduce 是最好的解决方案，但它是最慢的。即使是最新的（ES6）也提供了较差的性能。事实证明，老的 for 循环提供了迄今为止最好的性能 - 超过 10 倍以上！","title":"三个比它们等效 ES5 速度慢的 ES 6 函数"},{"content":"简介 推荐一款号称程序员的字体 Fira Code，Fira 是 Mozilla 主推的字体系列，Fira Code 是基于 Fira Mono 等宽字体的一个扩展，主要特点是加入了编程连字特性（ligatures）。\nFira Code 就是利用这个特性对编程中的常用符号进行优化，比如把输入的「!=」直接显示成「≠」或者把「\u0026gt;=」变成「≥ 」等等，以此来提高代码的可读性。\n效果如下：\n经过我体验一周来看，这款字体还是不错的。\n更多请前往GitHub地址查看。\n设置步骤 Step 1. 下载 前往 Fira Code 字体的 GitHub 地址，clone 或者 download字体文件，主要有 5 个 .ttf 字体文件，地址https://github.com/tonsky/FiraCode/tree/master/distr/ttf\nStep 2. 安装 安装刚刚下载的 5 个字体文件：选择文件后点击鼠标右键，点击安装命令即可安装字体。\nStep 3. 修改设置 打开 VS Code，如果在安装字体之前已经打开了，**一定要重启 **VS Code，否则识别不到新字体。\n打开菜单File \u0026gt; Preferences \u0026gt; Settings，或者点击 File 后使用快捷键 Ctrl+,即可打开，然后打开 settings.json 文件，找到 editor.fontFamily字段，然后再把 Fira Code 添加到第一个，并且加上 \u0026quot;editor.fontLigatures\u0026quot;: true 。\n\u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;Fira Code\u0026#39;, Menlo, Monaco, \u0026#39;Courier New\u0026#39;, monospace\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, //这个控制是否启用字体连字，true 启用，false 不启用，这里选择启用 完成 来一个我最常用的 JavaScript 代码演示：\n","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/290/","summary":"简介 推荐一款号称程序员的字体 Fira Code，Fira 是 Mozilla 主推的字体系列，Fira Code 是基于 Fira Mono 等宽字体的一个扩展，主要特点是加入了编程连字特性（ligatures）。\nFira Code 就是利用这个特性对编程中的常用符号进行优化，比如把输入的「!=」直接显示成「≠」或者把「\u0026gt;=」变成「≥ 」等等，以此来提高代码的可读性。\n效果如下：\n经过我体验一周来看，这款字体还是不错的。\n更多请前往GitHub地址查看。\n设置步骤 Step 1. 下载 前往 Fira Code 字体的 GitHub 地址，clone 或者 download字体文件，主要有 5 个 .ttf 字体文件，地址https://github.com/tonsky/FiraCode/tree/master/distr/ttf\nStep 2. 安装 安装刚刚下载的 5 个字体文件：选择文件后点击鼠标右键，点击安装命令即可安装字体。\nStep 3. 修改设置 打开 VS Code，如果在安装字体之前已经打开了，**一定要重启 **VS Code，否则识别不到新字体。\n打开菜单File \u0026gt; Preferences \u0026gt; Settings，或者点击 File 后使用快捷键 Ctrl+,即可打开，然后打开 settings.json 文件，找到 editor.fontFamily字段，然后再把 Fira Code 添加到第一个，并且加上 \u0026quot;editor.fontLigatures\u0026quot;: true 。\n\u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;Fira Code\u0026#39;, Menlo, Monaco, \u0026#39;Courier New\u0026#39;, monospace\u0026#34;, \u0026#34;editor.","title":"为 VSCode 添加上程序员专用字体 Fira Code"},{"content":"前言 这个问题是知乎上有人邀我回答的，感觉挺有意思的，所以发出来大家讨论下\n1. 语言自身问题 Javascript 之父在花 10 天设计出来的，再牛逼的人，10 天设计出来的肯定会有很多设计不合理的东西，哪些不合理的东西，可以去看《JavaScript语言精粹》，导致这本语言一直是最具争论的一门语言。\n但是背负着这么大的舆论，那么多很烂的特性，还要兼容各种浏览器，js 还能发展得这么好，web前端，移动，服务端，桌面端，甚至游戏，物联网，机器学习等，可见那些好的特性还是非常好的，具体可以看我的这篇文章\u0026ndash;Javascript 是最好的语言，不服来辩。\n2. 开发者水平差距太大 js 这门语言虽然能做的事儿很多，主要还是用在写前端上，对于前端这门职业，相对其他方向比较简单，容易上手，不需要太多计算机基础知识，导致刚培训出来的，或者自学的同学，可能见的世面比较少，学了点 node，会用 express 了，就说自己是全栈，所以就黑前端，前端一想就是 js 不好\n3. javascript 相对还是比较简单 有没有发现，越简单的越容易被人黑，比如 vue，vue 被黑的次数比 react 多多了，说 vue 是新手玩的，没水平，就连正妹也说过类似的话，我记得是在哪里看到过他在某个群里说过的，如果是p的就忽略。但是简单就不代表不好，简单能达到同样功能不应该更伟大吗？\n4. 门槛低 社区高水平的不多，或者说门槛太低，什么人都有。\n这个我就拿 emacs 社区举例，emacs 社区是真的好，文档质量超高，目前是我见到社区质量最好的，因为门槛高，学 emacs 的大部分都是真正喜欢敲代码的，而不是喜欢撕逼的，跟第二点一样，前端圈水平低的太多，导致 js 被黑。\n5. 前端发展太快 前端发展太快， js 框架层出不穷，然后经常会有各种框架之间的撕逼，某某框架好啥啥啥的，才会有大漠老师事件等，这种机会让其他圈看笑话了，说我们前端圈是真的乱，好好敲代码不好嘛，争哪个框架好有啥意义，又不是你写的，争赢了自己脸上又不贴金，在此引用狼叔说的，少抱怨，多做事。有本事自己写一个框架然后说服别人你这框架比尤大的 vue 好。\n结束语 最后我觉得 javascript 挺好的，然后希望作为前端的我们，静下心来好好学习，别让其他圈的看我们的笑话，最后还是想说， Javascript 是最好的语言，不服来辩。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/96/","summary":"前言 这个问题是知乎上有人邀我回答的，感觉挺有意思的，所以发出来大家讨论下\n1. 语言自身问题 Javascript 之父在花 10 天设计出来的，再牛逼的人，10 天设计出来的肯定会有很多设计不合理的东西，哪些不合理的东西，可以去看《JavaScript语言精粹》，导致这本语言一直是最具争论的一门语言。\n但是背负着这么大的舆论，那么多很烂的特性，还要兼容各种浏览器，js 还能发展得这么好，web前端，移动，服务端，桌面端，甚至游戏，物联网，机器学习等，可见那些好的特性还是非常好的，具体可以看我的这篇文章\u0026ndash;Javascript 是最好的语言，不服来辩。\n2. 开发者水平差距太大 js 这门语言虽然能做的事儿很多，主要还是用在写前端上，对于前端这门职业，相对其他方向比较简单，容易上手，不需要太多计算机基础知识，导致刚培训出来的，或者自学的同学，可能见的世面比较少，学了点 node，会用 express 了，就说自己是全栈，所以就黑前端，前端一想就是 js 不好\n3. javascript 相对还是比较简单 有没有发现，越简单的越容易被人黑，比如 vue，vue 被黑的次数比 react 多多了，说 vue 是新手玩的，没水平，就连正妹也说过类似的话，我记得是在哪里看到过他在某个群里说过的，如果是p的就忽略。但是简单就不代表不好，简单能达到同样功能不应该更伟大吗？\n4. 门槛低 社区高水平的不多，或者说门槛太低，什么人都有。\n这个我就拿 emacs 社区举例，emacs 社区是真的好，文档质量超高，目前是我见到社区质量最好的，因为门槛高，学 emacs 的大部分都是真正喜欢敲代码的，而不是喜欢撕逼的，跟第二点一样，前端圈水平低的太多，导致 js 被黑。\n5. 前端发展太快 前端发展太快， js 框架层出不穷，然后经常会有各种框架之间的撕逼，某某框架好啥啥啥的，才会有大漠老师事件等，这种机会让其他圈看笑话了，说我们前端圈是真的乱，好好敲代码不好嘛，争哪个框架好有啥意义，又不是你写的，争赢了自己脸上又不贴金，在此引用狼叔说的，少抱怨，多做事。有本事自己写一个框架然后说服别人你这框架比尤大的 vue 好。\n结束语 最后我觉得 javascript 挺好的，然后希望作为前端的我们，静下心来好好学习，别让其他圈的看我们的笑话，最后还是想说， Javascript 是最好的语言，不服来辩。","title":"为什么javascript经常被黑？"},{"content":" 该系列文章不是针对前端新手，需要有一定的编程经验，而且了解 JavaScript 里面作用域，闭包等概念\n组合函数 组合是一种为软件的行为，进行清晰建模的一种简单、优雅而富于表现力的方式。通过组合小的、确定性的函数，来创建更大的软件组件和功能的过程，会生成更容易组织、理解、调试、扩展、测试和维护的软件。\n对于组合，我觉得是函数式编程里面最精髓的地方之一，所以我迫不及待的把这个概念拿出来先介绍，因为在整个学习函数式编程里，所遇到的基本上都是以组合的方式来编写代码，这也是改变你从一个面向对象，或者结构化编程思想的一个关键点。\n我这里也不去证明组合比继承好，也不说组合的方式写代码有多好，我希望你看了这篇文章能知道以组合的方式去抽象代码，这会扩展你的视野，在你想重构你的代码，或者想写出更易于维护的代码的时候，提供一种思路。\n组合的概念是非常直观的，并不是函数式编程独有的，在我们生活中或者前端开发中处处可见。\n比如我们现在流行的 SPA (单页面应用)，都会有组件的概念，为什么要有组件的概念呢，因为它的目的就是想让你把一些通用的功能或者元素组合抽象成可重用的组件，就算不通用，你在构建一个复杂页面的时候也可以拆分成一个个具有简单功能的组件，然后再组合成你满足各种需求的页面。\n其实我们函数式编程里面的组合也是类似，函数组合就是一种将已被分解的简单任务组织成复杂的整体过程。\n现在我们有这样一个需求：给你一个字符串，将这个字符串转化成大写，然后逆序。\n你可能会这么写。\n// 例 1.1 var str = \u0026#39;function program\u0026#39; // 一行代码搞定 function oneLine(str) { var res = str.toUpperCase().split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) return res; } // 或者 按要求一步一步来，先转成大写，然后逆序 function multiLine(str) { var upperStr = str.toUpperCase() var res = upperStr.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) return res; } console.log(oneLine(str)) // MARGORP NOITCNUF console.log(multiLine(str)) // MARGORP NOITCNUF 可能看到这里你并没有觉得有什么不对的，但是现在产品又突发奇想，改了下需求，把字符串大写之后，把每个字符拆开之后组装成一个数组，比如 ’aaa‘ 最终会变成 [A, A, A]。\n那么这个时候我们就需要更改我们之前我们封装的函数。这就修改了以前封装的代码，其实在设计模式里面就是破坏了开闭原则。\n那么我们如果把最开始的需求代码写成这个样子，以函数式编程的方式来写。\n// 例 1.2 var str = \u0026#39;function program\u0026#39; function stringToUpper(str) { return str.toUpperCase() } function stringReverse(str) { return str.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) } var toUpperAndReverse = 组合(stringReverse, stringToUpper) var res = toUpperAndReverse(str) 那么当我们需求变化的时候，我们根本不需要修改之前封装过的东西。\n// 例 2 var str = \u0026#39;function program\u0026#39; function stringToUpper(str) { return str.toUpperCase() } function stringReverse(str) { return str.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) } // var toUpperAndReverse = 组合(stringReverse, stringToUpper) // var res = toUpperAndReverse(str) function stringToArray(str) { return str.split(\u0026#39;\u0026#39;) } var toUpperAndArray = 组合(stringReverse, stringToUpper) toUpperAndArray(str) 可以看到当变更需求的时候，我们没有打破以前封装的代码，只是新增了函数功能，然后把函数进行重新组合。\n这里可能会有人说，需求修改，肯定要更改代码呀，你这不是也删除了以前的代码么，也不是算破坏了开闭原则么。我这里声明一下，开闭原则是指一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。是针对我们封装，抽象出来的代码，而是调用逻辑。所以这样写并不算破坏开闭原则。\n突然产品又灵光一闪，又想改一下需求，把字符串大写之后，再翻转，再转成数组。\n要是你按照以前的思考，没有进行抽象，你肯定心理一万只草泥马在奔腾，但是如果你抽象了，你完全可以不慌。\n// 例 3 var str = \u0026#39;function program\u0026#39; function stringToUpper(str) { return str.toUpperCase() } function stringReverse(str) { return str.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) } function stringToArray(str) { return str.split(\u0026#39;\u0026#39;) } var strUpperAndReverseAndArray = 组合(stringToArray, stringReverse, stringToUpper) strUpperAndReverseAndArray(str) 发现并没有更换你之前封装的代码，只是更换了函数的组合方式。可以看到，组合的方式是真的就是抽象单一功能的函数，然后再组成复杂功能。这种方式既锻炼了你的抽象能力，也给维护带来巨大的方便。\n但是上面的组合我只是用汉字来代替的，我们应该如何去实现这个组合呢。首先我们可以知道，这是一个函数，同时参数也是函数，返回值也是函数。\n我们看到例 2， 怎么将两个函数进行组合呢，根据上面说的，参数和返回值都是函数，那么我们可以确定函数的基本结构如下(顺便把组合换成英文的 compose)。\nfunction twoFuntionCompose(fn1, fn2) { return function() { // code } } 我们再思考一下，如果我们不用 compose 这个函数，在例 2 中怎么将两个函数合成呢，我们是不是也可以这么做来达到组合的目的。\nvar res = stringReverse(stringToUpper(str)) 那么按照这个逻辑是不是我们就可以写出 twoFuntonCompose 的实现了，就是\nfunction twoFuntonCompose(fn1, fn2) { return function(arg) { return fn1(fn2(arg)) } } 同理我们也可以写出三个函数的组合函数，四个函数的组合函数，无非就是一直嵌套多层嘛，变成：\nfunction multiFuntionCompose(fn1, fn2, .., fnn) { return function(arg) { return fnn(...(fn1(fn2(arg)))) } } 这种恶心的方式很显然不是我们程序员应该做的，然后我们也可以看到一些规律，无非就是把前一个函数的返回值作为后一个返回值的参数，当直接到最后一个函数的时候，就返回。\n所以按照正常的思维就会这么写。\nfunction aCompose(...args) { let length = args.length let count = length - 1 let result return function f1 (...arg1) { result = args[count].apply(this, arg1) if (count \u0026lt;= 0) { count = length - 1 return result } count-- return f1.call(null, result) } } 这样写没问题，underscore 也是这么写的，不过里面还有很多健壮性的处理，核心大概就是这样。\n但是作为一个函数式爱好者，尽量还是以函数式的方式去思考，所以就用 reduceRight 写出如下代码。\nfunction compose(...args) { return (result) =\u0026gt; { return args.reduceRight((result, fn) =\u0026gt; { return fn(result) }, result) } } 当然对于 compose 的实现还有很多种方式，在这篇实现 compose 的五种思路中还给出了另外脑洞大开的实现方式，在我看这篇文章之前，另外三种我是没想到的，不过感觉也不是太有用，但是可以扩展我们的思路，有兴趣的同学可以看一看。\n注意：要传给 compose 函数是有规范的，首先函数的执行是从最后一个参数开始执行，一直执行到第一个，而且对于传给 compose 作为参数的函数也是有要求的，必须只有一个形参，而且函数的返回值是下一个函数的实参。\n对于 compose 从最后一个函数开始求值的方式如果你不是很适应的话，你可以通过 pipe 函数来从左到右的方式。\nfunction pipe(...args) { return (result) =\u0026gt; { return args.reduce((result, fn) =\u0026gt; { return fn(result) }, result) } } 实现跟 compose 差不多，只是把参数的遍历方式从右到左(reduceRight)改为从左到右(reduce)。\n之前是不是看过很多文章写过如何实现 compose，或者柯里化，部分应用等函数，但是你可能不知道是用来干啥的，也没用过，所以记了又忘，忘了又记，看了这篇文章之后我希望这些你都可以轻松实现。后面会继续讲到柯里化和部分应用的实现。\npoint-free 在函数式编程的世界中，有这样一种很流行的编程风格。这种风格被称为 tacit programming，也被称作为 point-free，point 表示的就是形参，意思大概就是没有形参的编程风格。\n// 这就是有参的，因为 word 这个形参 var snakeCase = word =\u0026gt; word.toLowerCase().replace(/\\s+/ig, \u0026#39;_\u0026#39;); // 这是 pointfree，没有任何形参 var snakeCase = compose(replace(/\\s+/ig, \u0026#39;_\u0026#39;), toLowerCase); 有参的函数的目的是得到一个数据，而 pointfree 的函数的目的是得到另一个函数。\n那这 pointfree 有什么用？ 它可以让我们把注意力集中在函数上，参数命名的麻烦肯定是省了，代码也更简洁优雅。 需要注意的是，一个 pointfree 的函数可能是由众多非 pointfree 的函数组成的，也就是说底层的基础函数大都是有参的，pointfree 体现在用基础函数组合而成的高级函数上，这些高级函数往往可以作为我们的业务函数，通过组合不同的基础函数构成我们的复制的业务逻辑。\n可以说 pointfree 使我们的编程看起来更美，更具有声明式，这种风格算是函数式编程里面的一种追求，一种标准，我们可以尽量的写成 pointfree，但是不要过度的使用，任何模式的过度使用都是不对的。\n另外可以看到通过 compose 组合而成的基础函数都是只有一个参数的，但是往往我们的基础函数参数很可能不止一个，这个时候就会用到一个神奇的函数(柯里化函数)。\n柯里化 在维基百科里面是这么定义柯里化的：\n在计算机科学，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。\n在定义中获取两个比较重要的信息：\n接受一个单一参数 返回结果是函数 这两个要点不是 compose 函数参数的要求么，而且可以将多个参数的函数转换成接受单一参数的函数，岂不是可以解决我们再上面提到的基础函数如果是多个参数不能用的问题，所以这就很清楚了柯里化函数的作用了。\n柯里化函数可以使我们更好的去追求 pointfree，让我们代码写得更优美！\n接下来我们具体看一个例子来理解柯里化吧：\n比如你有一间士多店并且你想给你优惠的顾客给个 10% 的折扣（即打九折）：\nfunction discount(price, discount) { return price * discount } 当一位优惠的顾客买了一间价值$500的物品，你给他打折：\nconst price = discount(500, 0.10); // $50 你可以预见，从长远来看，我们会发现自己每天都在计算 10% 的折扣：\nconst price = discount(1500,0.10); // $150 const price = discount(2000,0.10); // $200 // ... 等等很多 我们可以将 discount 函数柯里化，这样我们就不用总是每次增加这 0.01 的折扣。\n// 这个就是一个柯里化函数，将本来两个参数的 discount ，转化为每次接收单个参数完成求职 function discountCurry(discount) { return (price) =\u0026gt; { return price * discount; } } const tenPercentDiscount = discountCurry(0.1); 现在，我们可以只计算你的顾客买的物品都价格了：\ntenPercentDiscount(500); // $50 同样地，有些优惠顾客比一些优惠顾客更重要-让我们称之为超级客户。并且我们想给这些超级客户提供20%的折扣。 可以使用我们的柯里化的discount函数：\nconst twentyPercentDiscount = discountCurry(0.2); 我们通过这个柯里化的 discount 函数折扣调为 0.2（即20%），给我们的超级客户配置了一个新的函数。 返回的函数 twentyPercentDiscount 将用于计算我们的超级客户的折扣：\ntwentyPercentDiscount(500); // 100 我相信通过上面的 **discountCurry **你已经对柯里化有点感觉了，这篇文章是谈的柯里化在函数式编程里面的应用，所以我们再来看看在函数式里面怎么应用。\n现在我们有这么一个需求：给定的一个字符串，先翻转，然后转大写，找是否有TAOWENG，如果有那么就输出 yes，否则就输出 no。\nfunction stringToUpper(str) { return str.toUpperCase() } function stringReverse(str) { return str.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) } function find(str, targetStr) { return str.includes(targetStr) } function judge(is) { console.log(is ? \u0026#39;yes\u0026#39; : \u0026#39;no\u0026#39;) } 我们很容易就写出了这四个函数，前面两个是上面就已经写过的，然后 find 函数也很简单，现在我们想通过 compose 的方式来实现 pointfree，但是我们的 find 函数要接受两个参数，不符合 compose 参数的规定，这个时候我们像前面一个例子一样，把 find 函数柯里化一下，然后再进行组合：\n// 柯里化 find 函数 function findCurry(targetStr) { return str =\u0026gt; str.includes(targetStr) } const findTaoweng = findCurry(\u0026#39;TAOWENG\u0026#39;) const result = compose(judge, findTaoweng, stringReverse, stringToUpper) 看到这里是不是可以看到柯里化在达到 pointfree 是非常的有用，较少参数，一步一步的实现我们的组合。\n但是通过上面那种方式柯里化需要去修改以前封装好的函数，这也是破坏了开闭原则，而且对于一些基础函数去把源码修改了，其他地方用了可能就会有问题，所以我们应该写一个函数来手动柯里化。\n根据定义之前对柯里化的定义，以及前面两个柯里化函数，我们可以写一个二元(参数个数为 2)的通用柯里化函数：\nfunction twoCurry(fn) { return function(firstArg) { // 第一次调用获得第一个参数 return function(secondArg) { // 第二次调用获得第二个参数 return fn(firstArg, secondArg) // 将两个参数应用到函数 fn 上 } } } 所以上面的 findCurry 就可以通过 twoCurry 来得到：\nconst findCurry = twoCurry(find) 这样我们就可以不更改封装好的函数，也可以使用柯里化，然后进行函数组合。不过我们这里只实现了二元函数的柯里化，要是三元，四元是不是我们又要要写三元柯里化函数，四元柯里化函数呢，其实我们可以写一个通用的 n 元柯里化。\nfunction currying(fn, ...args) { if (args.length \u0026gt;= fn.length) { return fn(...args) } return function (...args2) { return currying(fn, ...args, ...args2) } } 我这里采用的是递归的思路，当获取的参数个数大于或者等于 fn 的参数个数的时候，就证明参数已经获取完毕，所以直接执行 fn 了，如果没有获取完，就继续递归获取参数。\n可以看到其实一个通用的柯里化函数核心思想是非常的简单，代码也非常简洁，而且还支持在一次调用的时候可以传多个参数(但是这种传递多个参数跟柯里化的定义不是很合，所以可以作为一种柯里化的变种)。\n我这里重点不是讲柯里化的实现，所以没有写得很健壮，更强大的柯里化函数可见羽讶的：JavaScript专题之函数柯里化。\n部分应用 部分应用是一种通过将函数的不可变参数子集，初始化为固定值来创建更小元数函数的操作。简单来说，如果存在一个具有五个参数的函数，给出三个参数后，就会得到一个、两个参数的函数。\n看到上面的定义可能你会觉得这跟柯里化很相似，都是用来缩短函数参数的长度，所以如果理解了柯里化，理解部分应用是非常的简单：\nfunction debug(type, firstArg, secondArg) { if(type === \u0026#39;log\u0026#39;) { console.log(firstArg, secondArg) } else if(type === \u0026#39;info\u0026#39;) { console.info(firstArg, secondArg) } else if(type === \u0026#39;warn\u0026#39;) { console.warn(firstArg, secondArg) } else { console.error(firstArg, secondArg) } } const logDebug = 部分应用(debug, \u0026#39;log\u0026#39;) const infoDebug = 部分应用(debug, \u0026#39;info\u0026#39;) const warnDebug = 部分应用(debug, \u0026#39;warn\u0026#39;) const errDebug = 部分应用(debug, \u0026#39;error\u0026#39;) logDebug(\u0026#39;log:\u0026#39;, \u0026#39;测试部分应用\u0026#39;) infoDebug(\u0026#39;info:\u0026#39;, \u0026#39;测试部分应用\u0026#39;) warnDebug(\u0026#39;warn:\u0026#39;, \u0026#39;测试部分应用\u0026#39;) errDebug(\u0026#39;error:\u0026#39;, \u0026#39;测试部分应用\u0026#39;) debug方法封装了我们平时用 console 对象调试的时候各种方法，本来是要传三个参数，我们通过部分应用的封装之后，我们只需要根据需要调用不同的方法，传必须的参数就可以了。\n我这个例子可能你会觉得没必要这么封装，根本没有减少什么工作量，但是如果我们在 debug 的时候不仅是要打印到控制台，还要把调试信息保存到数据库，或者做点其他的，那是不是这个封装就有用了。\n因为部分应用也可以减少参数，所以他在我们进行编写组合函数的时候也占有一席之地，而且可以更快传递需要的参数，留下为了 compose 传递的参数，这里是跟柯里化比较，因为柯里化按照定义的话，一次函数调用只能传一个参数，如果有四五个参数就需要:\nfunction add(a, b, c, d) { return a + b + c +d } // 使用柯里化方式来使 add 转化为一个一元函数 let addPreThreeCurry = currying(add)(1)(2)(3) addPreThree(4) // 10 这种连续调用(这里所说的柯里化是按照定义的柯里化，而不是我们写的柯里化变种)，但是用部分应用就可以:\n// 使用部分应用的方式使 add 转化为一个一元函数 const addPreThreePartial = 部分应用(add, 1, 2, 3) addPreThree(4) // 10 既然我们现在已经明白了部分应用这个函数的作用了，那么还是来实现一个吧，真的是非常的简单：\n// 通用的部分应用函数的核心实现 function partial(fn, ...args) { return (..._arg) =\u0026gt; { return fn(...args, ..._arg); } } 另外不知道你有没有发现，这个部分应用跟 JavaScript 里面的 bind 函数很相似，都是把第一次穿进去的参数通过闭包存在函数里，等到再次调用的时候再把另外的参数传给函数，只是部分应用不用指定 this，所以也可以用 bind 来实现一个部分应用函数。\n// 通用的部分应用函数的核心实现 function partial(fn, ...args) { return fn.bind(null, ...args) } 另外可以看到实际上柯里化和部分应用确实很相似，所以这两种技术很容易被混淆。它们主要的区别在于参数传递的内部机制与控制：\n柯里化在每次分布调用时都会生成嵌套的一元函数。在底层 ，函数的最终结果是由这些一元函数逐步组合产生的。同时，curry 的变体允许同时传递一部分参数。因此，可以完全控制函数求值的时间与方式。 部分应用将函数的参数与一些预设值绑定(赋值)，从而产生一个拥有更少参数的新函数。改函数的闭包中包含了这些已赋值的参数，在之后的调用中被完全求值。 总结 在这篇文章里我重点想介绍的是函数以组合的方式来完成我们的需求，另外介绍了一种函数式编程风格：pointfree，让我们在函数式编程里面有了一个最佳实践，尽量写成 pointfree 形式(尽量，不是都要)，然后介绍了通过柯里化或者部分应用来减少函数参数，符合 compose 或者 pipe 的参数要求。\n所以这种文章的重点是理解我们如何去组合函数，如何去抽象复杂的函数为颗粒度更小，功能单一的函数。这将使我们的代码更容易维护，更具声明式的特点。\n对于这篇文章里面提到的其他概念：闭包、作用域，然后柯里化的其他用途我希望是在番外篇里面更深入的去理解，而这篇文章主要掌握函数组合就行了。\n参考文章 JavaScript函数式编程之pointfree与声明式编程 Understanding Currying in JavaScript 《JavaScript 函数式编程指南》 ","permalink":"/posts/%E6%8A%80%E6%9C%AF/253/","summary":"该系列文章不是针对前端新手，需要有一定的编程经验，而且了解 JavaScript 里面作用域，闭包等概念\n组合函数 组合是一种为软件的行为，进行清晰建模的一种简单、优雅而富于表现力的方式。通过组合小的、确定性的函数，来创建更大的软件组件和功能的过程，会生成更容易组织、理解、调试、扩展、测试和维护的软件。\n对于组合，我觉得是函数式编程里面最精髓的地方之一，所以我迫不及待的把这个概念拿出来先介绍，因为在整个学习函数式编程里，所遇到的基本上都是以组合的方式来编写代码，这也是改变你从一个面向对象，或者结构化编程思想的一个关键点。\n我这里也不去证明组合比继承好，也不说组合的方式写代码有多好，我希望你看了这篇文章能知道以组合的方式去抽象代码，这会扩展你的视野，在你想重构你的代码，或者想写出更易于维护的代码的时候，提供一种思路。\n组合的概念是非常直观的，并不是函数式编程独有的，在我们生活中或者前端开发中处处可见。\n比如我们现在流行的 SPA (单页面应用)，都会有组件的概念，为什么要有组件的概念呢，因为它的目的就是想让你把一些通用的功能或者元素组合抽象成可重用的组件，就算不通用，你在构建一个复杂页面的时候也可以拆分成一个个具有简单功能的组件，然后再组合成你满足各种需求的页面。\n其实我们函数式编程里面的组合也是类似，函数组合就是一种将已被分解的简单任务组织成复杂的整体过程。\n现在我们有这样一个需求：给你一个字符串，将这个字符串转化成大写，然后逆序。\n你可能会这么写。\n// 例 1.1 var str = \u0026#39;function program\u0026#39; // 一行代码搞定 function oneLine(str) { var res = str.toUpperCase().split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) return res; } // 或者 按要求一步一步来，先转成大写，然后逆序 function multiLine(str) { var upperStr = str.toUpperCase() var res = upperStr.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) return res; } console.log(oneLine(str)) // MARGORP NOITCNUF console.log(multiLine(str)) // MARGORP NOITCNUF 可能看到这里你并没有觉得有什么不对的，但是现在产品又突发奇想，改了下需求，把字符串大写之后，把每个字符拆开之后组装成一个数组，比如 ’aaa‘ 最终会变成 [A, A, A]。\n那么这个时候我们就需要更改我们之前我们封装的函数。这就修改了以前封装的代码，其实在设计模式里面就是破坏了开闭原则。\n那么我们如果把最开始的需求代码写成这个样子，以函数式编程的方式来写。\n// 例 1.","title":"函数式编程之组合"},{"content":"Eric Elliott 函数式教程 征服 JavaScript 面试: 什么是函数式编程？ 组合软件：1. 函数式编程的兴衰 为什么用 JavaScript 学习函数式编程？（软件编写）（第二部分） 函数式程序员的 JavaScript 简介 (软件编写)（第三部分） 高阶函数（软件编写）（第四部分） Reduce（软件编写）（第五部分） Functor 与 Category （软件编写）（第六部分） 函数式 Mixin（软件编写）（第七部分） 为什么在使用了类之后会使得组合变得愈发困难（软件编写）（第九部分） 借助函数完成可组合的数据类型（软件编写）（第十部分） JavaScript 让 Monad 更简单（软件编写）（第十一部分） JavaScript 轻量级函数式编程 JavaScript 轻量级函数式编程\nStarkwang.log JavaScript函数式编程（一）\nJavaScript函数式编程（二）\nJavaScript函数式编程（三）\n如果你想成为函数式编程爱好者 如何成为一位函数式编程爱好者(Part 1) 如何成为一位函数式编程爱好者(Part 2) 如何成为一位函数式编程爱好者(Part 3) 如何成为一位函数式编程爱好者(Part 4) 如何成为一位函数式编程爱好者(Part 5) 如何成为一位函数式编程爱好者(Part 6) 书籍 《JavaScript 函数式编程指南》推荐 《JavaScript 函数式编程思想》推荐 《JavaScript ES6 函数式入门经典》看了上面两本这本就不用买了 《JavaScript 函数式编程》 相关库 https://folktale.origamitower.com/ https://github.com/fantasyland/fantasy-land http://ramda.cn/ http://lodash.think2011.net/ ","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/197/","summary":"Eric Elliott 函数式教程 征服 JavaScript 面试: 什么是函数式编程？ 组合软件：1. 函数式编程的兴衰 为什么用 JavaScript 学习函数式编程？（软件编写）（第二部分） 函数式程序员的 JavaScript 简介 (软件编写)（第三部分） 高阶函数（软件编写）（第四部分） Reduce（软件编写）（第五部分） Functor 与 Category （软件编写）（第六部分） 函数式 Mixin（软件编写）（第七部分） 为什么在使用了类之后会使得组合变得愈发困难（软件编写）（第九部分） 借助函数完成可组合的数据类型（软件编写）（第十部分） JavaScript 让 Monad 更简单（软件编写）（第十一部分） JavaScript 轻量级函数式编程 JavaScript 轻量级函数式编程\nStarkwang.log JavaScript函数式编程（一）\nJavaScript函数式编程（二）\nJavaScript函数式编程（三）\n如果你想成为函数式编程爱好者 如何成为一位函数式编程爱好者(Part 1) 如何成为一位函数式编程爱好者(Part 2) 如何成为一位函数式编程爱好者(Part 3) 如何成为一位函数式编程爱好者(Part 4) 如何成为一位函数式编程爱好者(Part 5) 如何成为一位函数式编程爱好者(Part 6) 书籍 《JavaScript 函数式编程指南》推荐 《JavaScript 函数式编程思想》推荐 《JavaScript ES6 函数式入门经典》看了上面两本这本就不用买了 《JavaScript 函数式编程》 相关库 https://folktale.origamitower.com/ https://github.com/fantasyland/fantasy-land http://ramda.cn/ http://lodash.think2011.net/ ","title":"函数式编程资料"},{"content":"文章 1. Thinking in React Hooks 当从 React 类组件切换到函数组件 + hook 时，基本的思维模式发生了什么变化。\n2. Ant Design 1.0 背后的故事：把艺术变成技术 我以前一直不喜欢读历史，今年了解吴军老师比较多，听他的硅谷来信，看他的书：《浪潮之巅》、《文明之光》才决定历史背景原来那么重要，了解历史你会发现现在很多的东西都是必然会出现的。 Ant Desgin 这么伟大的东西，了解一个产品背后的故事，我觉得还是很有必要的，看看为什么别人能做出伟大的东西，而我们不能。\n3. 前端API层架构，也许你做得还不够 架构设计是一条永远走不完的路，没有最好，只有更好。这个道理适用于软件设计的各个场景，前端API 层的设计也不例外，如果您觉得在调用接口时还存在诸多槽点，那就说明您的接口层架构还待优化。作者以 vue + axios 为例，为大家梳理下我的一些经历和设想。\n4. 你的 Mac 用对了吗？推荐一些 Mac 上比较好用的软件 这些 mac 软件都挺好用的，强烈推荐。\n5. 再谈编程范式—程序语言背后的思想 详细讲述了命令式、过程式、说明式、面向对象、函数式、泛型编程各个编程范式的特性。\n6. 少讲大道理，多解决小问题 二爷这篇文章以很多亲身体验的例子来阐述了多做事，少废话的道理，非常值得一读。\n挖宝 1. vscode 字体 fira code 一款为程序员专属的字体。\n2. 大四学生开源文言文编程语言 这一项目并不是简单的将程序中的英文字符换成了中文，而是利用 NLP 的一些技术，将文言文程序语法转换到 JavaScript 或 Python 运行，有一定的技术难度。\n如果读者想快速试一试，你也可以玩一玩在线 IDE，上面有很多预定义的函数。即使在手机上，我们也能编辑并运行「文言文代码」。\n3. lutaonan.com 一款很简洁的博客，文章阅读页的样式准备参考他的。\n4. 方凳雅集 方凳雅集是阿里B系前端技术团队的专属公众号，内容来自1688、阿里巴巴国际站、零售通、AliExpress、企业金融、考拉等多个BU的前端团队，涵盖阿里原创技术、精彩翻译和公司文化、职业成长等内容。\n最近关注到的质量比较高的前端公众号了，不过不太适合初级工程师，文章话题一般比较高大上，都是他们团队内部的一些解决方案，而不是基础知识。\n5. 第十四届D2前端技术论坛「创心」 12 月 14 日，第十四届 D2 前端技术论坛在杭州圆满举办。来自全国各地的近千名开发者齐聚杭州，聆听 3 大会场、来自 24 位海内外嘉宾的 21 个主题分享。\n分了语言框架专场、智能化专场、微前端专场、工程化专场、Serverless 专场、多样化领域专场。\n","permalink":"/posts/%E6%A1%83%E5%9B%AD%E5%91%A8%E5%88%8A/292/","summary":"文章 1. Thinking in React Hooks 当从 React 类组件切换到函数组件 + hook 时，基本的思维模式发生了什么变化。\n2. Ant Design 1.0 背后的故事：把艺术变成技术 我以前一直不喜欢读历史，今年了解吴军老师比较多，听他的硅谷来信，看他的书：《浪潮之巅》、《文明之光》才决定历史背景原来那么重要，了解历史你会发现现在很多的东西都是必然会出现的。 Ant Desgin 这么伟大的东西，了解一个产品背后的故事，我觉得还是很有必要的，看看为什么别人能做出伟大的东西，而我们不能。\n3. 前端API层架构，也许你做得还不够 架构设计是一条永远走不完的路，没有最好，只有更好。这个道理适用于软件设计的各个场景，前端API 层的设计也不例外，如果您觉得在调用接口时还存在诸多槽点，那就说明您的接口层架构还待优化。作者以 vue + axios 为例，为大家梳理下我的一些经历和设想。\n4. 你的 Mac 用对了吗？推荐一些 Mac 上比较好用的软件 这些 mac 软件都挺好用的，强烈推荐。\n5. 再谈编程范式—程序语言背后的思想 详细讲述了命令式、过程式、说明式、面向对象、函数式、泛型编程各个编程范式的特性。\n6. 少讲大道理，多解决小问题 二爷这篇文章以很多亲身体验的例子来阐述了多做事，少废话的道理，非常值得一读。\n挖宝 1. vscode 字体 fira code 一款为程序员专属的字体。\n2. 大四学生开源文言文编程语言 这一项目并不是简单的将程序中的英文字符换成了中文，而是利用 NLP 的一些技术，将文言文程序语法转换到 JavaScript 或 Python 运行，有一定的技术难度。\n如果读者想快速试一试，你也可以玩一玩在线 IDE，上面有很多预定义的函数。即使在手机上，我们也能编辑并运行「文言文代码」。\n3. lutaonan.com 一款很简洁的博客，文章阅读页的样式准备参考他的。\n4. 方凳雅集 方凳雅集是阿里B系前端技术团队的专属公众号，内容来自1688、阿里巴巴国际站、零售通、AliExpress、企业金融、考拉等多个BU的前端团队，涵盖阿里原创技术、精彩翻译和公司文化、职业成长等内容。\n最近关注到的质量比较高的前端公众号了，不过不太适合初级工程师，文章话题一般比较高大上，都是他们团队内部的一些解决方案，而不是基础知识。\n5. 第十四届D2前端技术论坛「创心」 12 月 14 日，第十四届 D2 前端技术论坛在杭州圆满举办。来自全国各地的近千名开发者齐聚杭州，聆听 3 大会场、来自 24 位海内外嘉宾的 21 个主题分享。","title":"前端桃园周刊第五期"},{"content":"小知识 伪类before/after中的图片大小是不是不能设置的? 文章 编写组件的 10 个原则 一篇英文文章，之前面试被面到过设计组件的时候要注意哪些，当时我大脑空白，根本答不出来，看了这篇文章之后，也许知道怎么答了。\n深入解析ES Module（二）：彻底禁用default export 文章介绍了 export default object 这种方式所带来的问题，主要是在转换的时候不兼容 cjs，当然这篇文章也有助于更深刻的理解 ES Module。\n「圣诞特辑」纯前端实现人脸识别自动佩戴圣诞帽 通过使用 TensorFlow.js 来进行人脸识别，然后自动佩戴圣诞帽，我最近也在学习机器学习相关的，当然也绕不开 TensorFlow.js ，学完课程之后再来看这篇文章。\n那些你用错了的 React 生命周期 这篇文章的中心思想跟我之前在 React 官方博客里面看到那篇「你也许不需要派生 State」基本类似，主要是 componentWillReceiveProps 和getDerivedStateFromProps 这两个声明周期可能会写成反模式。\n独家 | 阿里张勇湖畔分享：领导者如何“落子无悔” 张勇的演讲全文，看到很多大佬推荐这篇文章，先 mark 一波。\n","permalink":"/posts/%E6%A1%83%E5%9B%AD%E5%91%A8%E5%88%8A/294/","summary":"小知识 伪类before/after中的图片大小是不是不能设置的? 文章 编写组件的 10 个原则 一篇英文文章，之前面试被面到过设计组件的时候要注意哪些，当时我大脑空白，根本答不出来，看了这篇文章之后，也许知道怎么答了。\n深入解析ES Module（二）：彻底禁用default export 文章介绍了 export default object 这种方式所带来的问题，主要是在转换的时候不兼容 cjs，当然这篇文章也有助于更深刻的理解 ES Module。\n「圣诞特辑」纯前端实现人脸识别自动佩戴圣诞帽 通过使用 TensorFlow.js 来进行人脸识别，然后自动佩戴圣诞帽，我最近也在学习机器学习相关的，当然也绕不开 TensorFlow.js ，学完课程之后再来看这篇文章。\n那些你用错了的 React 生命周期 这篇文章的中心思想跟我之前在 React 官方博客里面看到那篇「你也许不需要派生 State」基本类似，主要是 componentWillReceiveProps 和getDerivedStateFromProps 这两个声明周期可能会写成反模式。\n独家 | 阿里张勇湖畔分享：领导者如何“落子无悔” 张勇的演讲全文，看到很多大佬推荐这篇文章，先 mark 一波。","title":"前端桃园周刊第六期"},{"content":"一句话知识 npm v packageName versions npm v packageName versions 查看包的所有版本，不加s 获取新版本。用途，安装了包但是 package.json 里面没有包，需要手动填入的时候。\ntypeof null 为什么返回 \u0026ldquo;object\u0026rdquo;？ 不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。\nin 和 hasOwnProperty 区别 in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中。相比之下， hasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链。\nfor in 和 for of 的区别 for in 用于对象的遍历，会遍历原型上可以枚举的属性\nfor of 用于遍历可迭代的对象，比如数组，因为数组里面是有迭代器的，凡是有迭代器的对象都可以用 for of 来遍历\n对 constructor 的误解 对象的 constructor 实际上不是对象创建的时候有的，而是通过委托到 prototype 上找的。\nfunction Foo() { /* .. */ }\rFoo.prototype = { /* .. */ }; // 创建一个新原型对象\rvar a1 = new Foo();\ra1.constructor === Foo; // false! a1.constructor === Object; // true!\r可以看到 prototype 被替换之后，a1 的 constructor 已经不指向 Foo 了。\n文章 前端工程化（一）NPM如何管理依赖包版本？ package.json 知多少？ 精读《正交的 React 组件》 JavaScript Internals: JavaScript engine, Run-time environment \u0026amp; setTimeout Web API 彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index 【JavaScript】深入理解Babel原理及其使用 如何超过大多数人 巧用 Typescript SWR：最具潜力的 React Hooks 数据请求库 [React Hooks 你真的用对了吗？](React Hooks 你真的用对了吗？) 仓库 一个博主 Tan li Hau openlayers。一个高性能、功能丰富的库，满足您所有的地图需求 react-motion。解决 React 动画的库 medium-unlimited。一个浏览器扩展，可无需会员免费读取medium.com文章。 其他 Alfred 好用的 workflow：CodeVar、douban、知乎、Dash ","permalink":"/posts/%E6%A1%83%E5%9B%AD%E5%91%A8%E5%88%8A/289/","summary":"一句话知识 npm v packageName versions npm v packageName versions 查看包的所有版本，不加s 获取新版本。用途，安装了包但是 package.json 里面没有包，需要手动填入的时候。\ntypeof null 为什么返回 \u0026ldquo;object\u0026rdquo;？ 不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。\nin 和 hasOwnProperty 区别 in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中。相比之下， hasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链。\nfor in 和 for of 的区别 for in 用于对象的遍历，会遍历原型上可以枚举的属性\nfor of 用于遍历可迭代的对象，比如数组，因为数组里面是有迭代器的，凡是有迭代器的对象都可以用 for of 来遍历\n对 constructor 的误解 对象的 constructor 实际上不是对象创建的时候有的，而是通过委托到 prototype 上找的。\nfunction Foo() { /* .","title":"前端桃园周刊第四期"},{"content":"公众号相信大家今天都已经知道了 antd 这次的事故了，不知道的简单回顾一下。\n今天圣诞节，所以在 type 是 primary 的 Button 上都加上了雪花。\n就是在 antd 3.9.3 的时候增加了一个定时器，到 12 月 25 的时候增加一个 christmas 的 css 类，还给 title 改为了 Ho Ho Ho。具体 commit 见：https://github.com/ant-design/ant-design/commit/00aebeb9756afecc884ad48486084836b9a2707a\n然后就导致今天开发者早上一来看，就觉得莫名其妙，还以为是病毒啥的，还有人因此被解雇(issue 上说的，不知道是否是真)，总之，这个事情还是挺严重的。\n作为一个有温度的前端号，肯定不是带你们吃瓜的，要是带你们吃瓜，肯定大早上的这篇文章就出来了，我们从另外的角度来看下这个问题。\n功不抵过\n开源及责任\n批评没有任何好处\n功不抵过 Antd 作为全世界最好的 React 前端组件库之一，目前将近 4 万的 star，国内外很多企业都会使用 antd 做前端开发。\n我估计最近几年大部分人接触 React 的人，使用的 UI 库都会是 antd，Vue 的话可能 Element UI 和 iView 还可以拼杀一下，但是 antd 在 React 界是绝对的老大，这是 antd 的功。\n但是这一次彩蛋事件，就导致很多人因此而放弃它。\n然后网上骂声一片。\n这是为什么呢？\n因为这次失误触犯了使用者的底线，本来使用 antd 就是因为他的稳定，用起来放心。\n结果这个彩蛋，出其不意，在没有给用户任何提示的情况下，悄悄的代码里面加一些“副作用”，导致让用户感觉用 antd 不再放心，担心下次加点获取用户信息啥的。\n所以呀，能做好的就一定要保证一直好下去，一旦出现了触犯原则的事情就是好事不出门，坏事传千里，前端娱乐圈再次火起来了，搞 py 的、 Java 的等都知道 antd 了，可以说这次“宣传”很到位。\n批评没有任何好处 在卡耐基的《人性的弱点》第一章里就说到\n批评是没有用的，因为它使人增加一层防御，而且竭力地替自己辩护。批评也是危险的，它会伤害了一个人的自尊和自重的感觉，并激起他的反抗。\n我看到很多人在 issue 里，在知乎上对 antd 团队，对蚂蚁金服，对阿里开源进行各种批评，我感到很痛心。\n因为在我的眼里，antd 真的很优秀，阿里的开源也做得很好，我很怕开发者扛不住他们的批评，而导致他们的开源热情一点点较少，或者阿里内部扛不住舆论，把相关人员给开了。\n这次偏右大大主动一个人承担了责任，也有人在 issue 里@他出来挨打\n偏右可是 “antd 之父”，他一个人对 antd 的贡献可能将近百分之四十(看贡献图看到的，没有统计过)，下面是最近提交的贡献度。 要是阿里内部扛不住压力，或是他自己扛不住，辞职了，那么你会开心吗？可能你会开心，但是对于整个 React 社区，对于还要使用 Antd 的人来说，又有什么好处呢？可能 issue 解决得慢一点，PR 合并得慢一点，bug 可能多一点。\n我想说道这里大家应该已经明白了，过分的批评真的没有任何好处，你可以回想你自己在生活中发生的事儿，哪一次你对别人的批评，让对方觉得你批评得好，感觉很爽的。相反的，发自内心的赞赏别人，是待人成功的秘诀。\n可能有些人又会说了，你的意思是他做这事儿，我还应该去赞赏他了？对于这种问题，我想劝你去看下《人性的弱点》这本书。你站在被责怪人的角度考虑一下，是你的批评让他以后会做得更好，还是你的鼓励呢？\n批评、责怪别人会让人感到反感，让人不爽，让人产生抵触情绪，这是人的天性。\n说到这里，我声明一下，我还是会使用 antd 的产品，我相信他们经过这次，会更严格的规范代码流程，code review 会更仔细。我也希望大家不要对他们失去信心，虽然我不是阿里的，但是我看好他们团队，他们团队都做不好，国内还能有多少团队比他们更好呢？\n开源及责任 这个掘金站长在这篇文章(https://juejin.im/post/5c21a3ea5188254eaa5c4486)中已经说得很详细了\n虽然在前面我强调不要再去批评指责他们了，但是不代表他们所做的就是正确的，玉伯也发表声明会吸取这次教训，请大家持续监督。 另外 真心希望我的读者不要做一个键盘侠，不仅仅只做一个吃瓜群众，在吃瓜的同时能挖掘到其他的东西，别人的教训是否会发生在自己身上，他们这种大佬都会犯这样的错误，何况我们这些一般的人呢？\n最后我觉得有点奇怪的是，偏右 issue 里面回了个“早就做好了被骂的准备”，让我怀疑可能这个想法不是他的主意，一个正常人会知道被人骂还这样搞么，一点疑惑，但是这都不是这篇文章的重点。\n相关链接：\nChristmas easter egg\nPlease remove Christmas Easter Egg for Ant Design framework\n知乎：如何看待 Ant Design 圣诞节彩蛋事件？\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/191/","summary":"公众号相信大家今天都已经知道了 antd 这次的事故了，不知道的简单回顾一下。\n今天圣诞节，所以在 type 是 primary 的 Button 上都加上了雪花。\n就是在 antd 3.9.3 的时候增加了一个定时器，到 12 月 25 的时候增加一个 christmas 的 css 类，还给 title 改为了 Ho Ho Ho。具体 commit 见：https://github.com/ant-design/ant-design/commit/00aebeb9756afecc884ad48486084836b9a2707a\n然后就导致今天开发者早上一来看，就觉得莫名其妙，还以为是病毒啥的，还有人因此被解雇(issue 上说的，不知道是否是真)，总之，这个事情还是挺严重的。\n作为一个有温度的前端号，肯定不是带你们吃瓜的，要是带你们吃瓜，肯定大早上的这篇文章就出来了，我们从另外的角度来看下这个问题。\n功不抵过\n开源及责任\n批评没有任何好处\n功不抵过 Antd 作为全世界最好的 React 前端组件库之一，目前将近 4 万的 star，国内外很多企业都会使用 antd 做前端开发。\n我估计最近几年大部分人接触 React 的人，使用的 UI 库都会是 antd，Vue 的话可能 Element UI 和 iView 还可以拼杀一下，但是 antd 在 React 界是绝对的老大，这是 antd 的功。\n但是这一次彩蛋事件，就导致很多人因此而放弃它。\n然后网上骂声一片。\n这是为什么呢？\n因为这次失误触犯了使用者的底线，本来使用 antd 就是因为他的稳定，用起来放心。\n结果这个彩蛋，出其不意，在没有给用户任何提示的情况下，悄悄的代码里面加一些“副作用”，导致让用户感觉用 antd 不再放心，担心下次加点获取用户信息啥的。","title":"另一个视角看待这次 antd"},{"content":" 我这人运气一向不好，我这辈子最幸运的事大概就是遇见你，所以我特别特别珍惜，长这么大唯一坚持下来的事情就是爱你。 反正得听你啰嗦一辈子，习惯就好。 因为只有在我面前，她可以不用坚强。 但我知道，一想到能和你共度余生，我就对余生充满期待。 遇见你那天起，就没 想过要分开。 喜欢一个人，就像喜欢富士山，你可以看到它，但是不能搬走它\u0026ndash;你唯一能做的，就是自己走过去，去争取自己的爱人。 我从来不想要什么更好的人，我只想要眼前的人，你究竟什么时候才会懂？ 海底月是天上月，眼前人是心上人。 一辈子很长，要跟有趣的人在一起。 小时候他问爸爸自己从哪里来的，他爸爸没有像其他大人那样tang\u0026rsquo;s搪塞说“从垃圾堆里捡来的”或者“从胳肢窝里掉下来的”，而是说：“你是天上的天使，上帝觉得妈妈是这个世界上最美的女孩，所以派你来保护她。” 小F问：“那么你呢？” “等你长大了就会离开她，爸爸负责陪妈妈到老 ” 老夫老妻了还送什么花，我送你工资卡，让你随便花。 爱情不是人生的全部,它是锦上添花不是救命稻草，女人除了年轻美貌被男人爱，难道不应该努力学习，不断成长，多一点智慧和温柔去建立自我的价值吗。眼界放宽些，这个世界比你想象的要广阔，你应该跟你爱的人一起去看天大地大，而不是抱在一起相互取暖。 如果说，喜欢是渴望将好的一起分享，那么，爱是愿意把坏的共同承担。 爱让我们褪去身上青涩的棱角，穿越汹涌的人潮，用最温柔最炙热的爱拥抱彼此，我知道这个世界什么都善变，可是说真的，眼前这个人，他让我 相信永远。 ","permalink":"/posts/%E7%AC%94%E8%AE%B0%E6%9C%AC/3/","summary":"\u003cul\u003e\n\u003cli\u003e我这人运气一向不好，我这辈子最幸运的事大概就是遇见你，所以我特别特别珍惜，长这么大唯一坚持下来的事情就是爱你。\u003c/li\u003e\n\u003cli\u003e反正得听你啰嗦一辈子，习惯就好。\u003c/li\u003e\n\u003cli\u003e因为只有在我面前，她可以不用坚强。\u003c/li\u003e\n\u003cli\u003e但我知道，一想到能和你共度余生，我就对余生充满期待。\u003c/li\u003e\n\u003c/ul\u003e","title":"我不喜欢这世界，我只喜欢你"},{"content":"我今天看到一视频，给了我非常大感触。是 B 站上的一个视频，标题名叫：《这有可能是我最后一期视频了，再见了 B 站》， 视频链接可以点击「原文链接」得到。\n这个视频大概讲的是这样：\n一个富二代，大学毕业以后没有去家里帮爸妈，由于自己非常喜欢游戏，所以就想做自媒体，自己赚钱养自己，做了差不多一年半，在 B 站拥有不多不少的 25 万粉丝，由于他自己喜欢的是单机游戏，但是国内喜欢单机游戏的人太少，所以在 B 站涨粉缓慢，慢慢的，迫于生计，不得追求快速涨粉，不至于入不敷出。\n所以就开始做一些自己不喜欢的视频，比如热点视频，电影娱乐等，因为这些看的人多，涨粉相对较快，但是自己并不喜欢这些视频。以前自己做的游戏视频做完之后会回味好几遍，但是现在做的这些视频自己非常不喜欢，做完之后完全没有动力去看。\n突然有一天他的爸妈给他买了一套 1600 万的房子，加上装修可能 1700 万左右，但是他爸妈只付了首付(他爸妈能全款买得起)，剩下的贷款要让他自己还，目的就是要让他回去帮家里的忙，因为他做自媒体根本换不起这个贷款。\n一个月贷款要还 3 万多，他做 B 站一年半才赚了 10 万，他爸妈就质问他，你觉得你做现在这个职业有前途吗？能还得起这个房贷吗？如果将来你的儿子想住这么大的房子你买得起吗？\n他就开始思考当初的初心，自己做自媒体是为了赚钱，现在家里有四个厂，家里父母也 50 了，回去帮忙岂不是能花更少的时间赚更多的钱。\n所以他就关了自己的工作室，不再做自己不喜欢的视频，并且回家去继承家业。\n看完这段视频莫名的感到了一丝心酸和无奈。\n心酸的是很多做自媒体(包括我自己)的刚开始都是做自己喜欢的东西，后来慢慢的为了粉丝向营销号靠拢，远离了自己的初心，这视频作者可以回家继承家产，而剩下的那些远离了初心的人又会何去何从呢？\n无奈的是即使家里这么有钱，不想靠着父母打拼出一番事业，但是在房贷的压力下，以及对自己能力确实不太能够打拼出一番事业，最后只能回家靠父母的无奈。\n这种富二代他们一次一次的失败之后，还是会有退路(回家继承家产)，但是对于我们普通人来说，就没有退路，只能向前冲，就得努力赚钱。\n但是在自己能力还没到的时候，做自己想做的事的时候，又赚不了那么多钱，所以只能违背这自己的初心，去赚一些合法的钱。\n在这种金钱和自己喜欢的东西做斗争的时候，我无法给出应该选择哪种的建议。可能站在局外人来说，当然做自己喜欢的事儿呀，把事情做好，然后赚钱是自然的。\n道理谁都懂，但是我觉得这是在考验人性的时候，当这件事儿发生在你的身上可能就不一定会这么做，因为我遇到太多太多这样的人了，只有非常少数的人能坚持自己的原则，这种人往往就缺少一个贵人，等待一个爆发期，但是在爆发期来临之前，又有多少人能坚持下来呢，很难说。\n最后想说的是还是想做那个最初想做的人，把这个公众号做成自己喜欢的样子，提供一些在其他地方看不到的稀缺的有价值的东西，跟我公众号的 slogon 一样：成为自己想成为的那个样子。 每天花一小时来写文章，而不是花半个小时来找一篇好的文章。\n其实我很希望你们可以给我多留言，多跟我交流你们的想法，而不是向我提一些问题，让我解答，两者之间的区别在于我们两是否在同一个水平，是否双方都会受益。\n所以我喜欢你在请教我一些东西的时候，你已经做好了功课，咱们在此次对话中花了这么多时间，都能得到一些价值。\n虽然我不是一个大 V，但是我还是很忙，有我自己的事儿，每天向我请教的人又特别多，我目前不想专门开一个付费的知识星球来回答问题，然后出售我的时间。\n如果你希望和我交流，可以在公众号后台回复「微信」，联系到我。\n最后如果你还愿意继续关注我的话，可以留个言，点个好看，甚至帮我多转发文章。\n","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/301/","summary":"我今天看到一视频，给了我非常大感触。是 B 站上的一个视频，标题名叫：《这有可能是我最后一期视频了，再见了 B 站》， 视频链接可以点击「原文链接」得到。\n这个视频大概讲的是这样：\n一个富二代，大学毕业以后没有去家里帮爸妈，由于自己非常喜欢游戏，所以就想做自媒体，自己赚钱养自己，做了差不多一年半，在 B 站拥有不多不少的 25 万粉丝，由于他自己喜欢的是单机游戏，但是国内喜欢单机游戏的人太少，所以在 B 站涨粉缓慢，慢慢的，迫于生计，不得追求快速涨粉，不至于入不敷出。\n所以就开始做一些自己不喜欢的视频，比如热点视频，电影娱乐等，因为这些看的人多，涨粉相对较快，但是自己并不喜欢这些视频。以前自己做的游戏视频做完之后会回味好几遍，但是现在做的这些视频自己非常不喜欢，做完之后完全没有动力去看。\n突然有一天他的爸妈给他买了一套 1600 万的房子，加上装修可能 1700 万左右，但是他爸妈只付了首付(他爸妈能全款买得起)，剩下的贷款要让他自己还，目的就是要让他回去帮家里的忙，因为他做自媒体根本换不起这个贷款。\n一个月贷款要还 3 万多，他做 B 站一年半才赚了 10 万，他爸妈就质问他，你觉得你做现在这个职业有前途吗？能还得起这个房贷吗？如果将来你的儿子想住这么大的房子你买得起吗？\n他就开始思考当初的初心，自己做自媒体是为了赚钱，现在家里有四个厂，家里父母也 50 了，回去帮忙岂不是能花更少的时间赚更多的钱。\n所以他就关了自己的工作室，不再做自己不喜欢的视频，并且回家去继承家业。\n看完这段视频莫名的感到了一丝心酸和无奈。\n心酸的是很多做自媒体(包括我自己)的刚开始都是做自己喜欢的东西，后来慢慢的为了粉丝向营销号靠拢，远离了自己的初心，这视频作者可以回家继承家产，而剩下的那些远离了初心的人又会何去何从呢？\n无奈的是即使家里这么有钱，不想靠着父母打拼出一番事业，但是在房贷的压力下，以及对自己能力确实不太能够打拼出一番事业，最后只能回家靠父母的无奈。\n这种富二代他们一次一次的失败之后，还是会有退路(回家继承家产)，但是对于我们普通人来说，就没有退路，只能向前冲，就得努力赚钱。\n但是在自己能力还没到的时候，做自己想做的事的时候，又赚不了那么多钱，所以只能违背这自己的初心，去赚一些合法的钱。\n在这种金钱和自己喜欢的东西做斗争的时候，我无法给出应该选择哪种的建议。可能站在局外人来说，当然做自己喜欢的事儿呀，把事情做好，然后赚钱是自然的。\n道理谁都懂，但是我觉得这是在考验人性的时候，当这件事儿发生在你的身上可能就不一定会这么做，因为我遇到太多太多这样的人了，只有非常少数的人能坚持自己的原则，这种人往往就缺少一个贵人，等待一个爆发期，但是在爆发期来临之前，又有多少人能坚持下来呢，很难说。\n最后想说的是还是想做那个最初想做的人，把这个公众号做成自己喜欢的样子，提供一些在其他地方看不到的稀缺的有价值的东西，跟我公众号的 slogon 一样：成为自己想成为的那个样子。 每天花一小时来写文章，而不是花半个小时来找一篇好的文章。\n其实我很希望你们可以给我多留言，多跟我交流你们的想法，而不是向我提一些问题，让我解答，两者之间的区别在于我们两是否在同一个水平，是否双方都会受益。\n所以我喜欢你在请教我一些东西的时候，你已经做好了功课，咱们在此次对话中花了这么多时间，都能得到一些价值。\n虽然我不是一个大 V，但是我还是很忙，有我自己的事儿，每天向我请教的人又特别多，我目前不想专门开一个付费的知识星球来回答问题，然后出售我的时间。\n如果你希望和我交流，可以在公众号后台回复「微信」，联系到我。\n最后如果你还愿意继续关注我的话，可以留个言，点个好看，甚至帮我多转发文章。","title":"我也想做自己喜欢做的事儿"},{"content":"最近我发现很多面试题里面都有「如何理解虚拟 DOM」这个题，我觉得这个题应该没有想象中那么好答，因为很多人没有真正理解虚拟 DOM 它的价值所在，我这篇从虚拟 DOM 的诞生过程来引出它的价值以及历史地位，帮助你深入的理解它。\n什么是虚拟DOM 本质上是 JavaScript 对象，这个对象就是更加轻量级的对 DOM 的描述。\n对，就是这么简单！\n就是一个复杂一点的对象而已，没什么好说的，重点是为什么要有这个东西，以及有了这个描述有什么好处才是我们今天要介绍的内容。\n为什么要有虚拟DOM 再谈为什么要用虚拟 DOM 之前，先来聊一聊 React 是怎么诞生的，毕竟在了解历史背景，再去思考他的诞生，就知道是必然会出现的。\n再查了很多关于 React 的历史相关的文章，这篇文章我感觉比较值得令我信服：React 是怎样炼成的。\n众所周知，Facebook 是 PHP 大户，所以 React 最开始的灵感就来至于 PHP。\n字符串拼接时代 - 2004 在 2004 年这个时候，大家都还在用 PHP 的字符串拼接来开发网站：\n$str = \u0026#39;\u0026lt;ul\u0026gt;\u0026#39;; foreach ($talks as $talk) { $str += \u0026#39;\u0026lt;li\u0026gt;\u0026#39; . $talk-\u0026gt;name . \u0026#39;\u0026lt;/li\u0026gt;\u0026#39;; } $str += \u0026#39;\u0026lt;/ul\u0026gt;\u0026#39;; 这种方式代码写出来不好看不说，还容易造成 XSS 等安全问题。\n应对方法是对用户的任何输入都进行转义（Escape）。但是如果对字符串进行多次转义，那么反转义的次数也必须是相同的，否则会无法得到原内容。如果又不小心把 HTML 标签（Markup）给转义了，那么 HTML 标签会直接显示给用户，从而导致很差的用户体验。\nXHP 时代 - 2010 到了 2010 年，为了更加高效的编码，同时也避免转义 HTML 标签的错误，Facebook 开发了 XHP 。XHP 是对 PHP 的语法拓展，它允许开发者直接在 PHP 中使用 HTML 标签，而不再使用字符串。\n$content = \u0026lt;ul /\u0026gt;; foreach ($talks as $talk) { $content-\u0026gt;appendChild(\u0026lt;li\u0026gt;{$talk-\u0026gt;name}\u0026lt;/li\u0026gt;); } 这样的话，所有的 HTML 标签都使用不同于 PHP 的语法，我们可以轻易的分辨哪些需要转义哪些不需要转义。\n不久的后来，Facebook 的工程师又发现他们还可以创建自定义标签，而且通过组合自定义标签有助于构建大型应用。\nJSX - 2013 到了 2013 年，前端工程师 Jordan Walke 向他的经理提出了一个大胆的想法：把 XHP 的拓展功能迁移到 JS 中。首要任务是需要一个拓展来让 JS 支持 XML 语法，该拓展称为 JSX。因为当时由于 Node.js 在 Facebook 已经有很多实践，所以很快就实现了 JSX。\n可以猜想一下为什么要迁移到 js 中，我猜想应该是前后端分离导致的。\nconst content = ( \u0026lt;TalkList\u0026gt; { talks.map(talk =\u0026gt; \u0026lt;Talk talk={talk} /\u0026gt;)} \u0026lt;/TalkList\u0026gt; ); React 在这个时候，就有另外一个很棘手的问题，那就是在进行更新的时候，需要去操作 DOM，传统 DOM API 细节太多，操作复杂，所以就很容易出现 Bug，而且代码难以维护。\n然后就想到了 PHP 时代的更新机制，每当有数据改变时，只需要跳到一个由 PHP 全新渲染的新页面即可。\n从开发者的角度来看的话，这种方式开发应用是非常简单的，因为它不需要担心变更，且界面上用户数据改变时所有内容都是同步的。\n为此 React 提出了一个新的思想，即始终整体“刷新”页面\n当发生前后状态变化时，React 会自动更新 UI，让我们从复杂的 UI 操作中解放出来，使我们只需关于状态以及最终 UI 长什么样。\n下面看看局部刷新和整体刷新的区别。\n图片来自于极客时间王沛老师的《React进阶与实战》\n局部刷新：\n// 下面是伪代码 var ul = find(ul) // 先找到 ul ul.append(`\u0026lt;li\u0026gt;${message3}\u0026lt;/li\u0026gt;`) //然后再将message3插到最后 // 想想如果是不插到最后一个，而是插到中间的第n个 var ul = find(ul) // 先找到 ul var preli = find(li(n-1)) // 再找到 n-1 的一个 li preli.next(`\u0026lt;li\u0026gt;${message3}\u0026lt;/li\u0026gt;`) // 再插入到 n-1 个的后面 整体刷新：\nUI = f(messages) // 整体刷新 3 条消息，只需要调用 f 函数 // 这个是在初始渲染的时候就定义好的，更新的时候不用去管 function f(messages) { return \u0026lt;ul\u0026gt; {messages.map(message =\u0026gt; \u0026lt;li\u0026gt;{ message }\u0026lt;/li\u0026gt;)} \u0026lt;/ul\u0026gt; } 这个时候，我只需要关系我的状态（数据是什么），以及 UI 长什么样（布局），不再需要关系操作细节。\n这种方式虽然简单粗暴，但是很明显的缺点，就是很慢。\n另外还有一个问题就是这样无法包含节点的状态。比如它会失去当前聚焦的元素和光标，以及文本选择和页面滚动位置，这些都是页面的当前状态。\nDiff 为了解决上面说的问题，对于没有改变的 DOM 节点，让它保持原样不动，仅仅创建并替换变更过的 DOM 节点。这种方式实现了 DOM 节点复用（Reuse）。\n至此，只要能够识别出哪些节点改变了，那么就可以实现对 DOM 的更新。于是问题就转化为如何比对两个 DOM 的差异。\n说道对比差异，可能很容易想到版本控制(git)。\nDOM 是树形结构，所以 diff 算法必须是针对树形结构的。目前已知的完整树形结构 diff 算法复杂度为 O(n^3) 。\n完整的 Tree diff 实现算法。\n但是时间复杂度 O(n^3) 太高了，所以Facebook工程师考虑到组件的特殊情况，然后将复杂度降低到了 O(n)。\n附：详细的 diff 理解：不可思议的 react diff 。\nVirtual DOM 前面说到，React 其实实现了对 DOM 节点的版本控制。\n做过 JS 应用优化的人可能都知道，DOM 是复杂的，对它的操作（尤其是查询和创建）是非常慢非常耗费资源的。看下面的例子，仅创建一个空白的 div，其实例属性就达到 231 个。\n// Chrome v63 const div = document.createElement(\u0026#39;div\u0026#39;); let m = 0; for (let k in div) { m++; } console.log(m); // 231 对于 DOM 这么多属性，其实大部分属性对于做 Diff 是没有任何用处的，所以如果用更轻量级的 JS 对象来代替复杂的 DOM 节点，然后把对 DOM 的 diff 操作转移到 JS 对象，就可以避免大量对 DOM 的查询操作。这个更轻量级的 JS 对象就称为 Virtual DOM 。\n那么现在的过程就是这样：\n维护一个使用 JS 对象表示的 Virtual DOM，与真实 DOM 一一对应 对前后两个 Virtual DOM 做 diff ，生成变更（Mutation） 把变更应用于真实 DOM，生成最新的真实 DOM 可以看出，因为要把变更应用到真实 DOM 上，所以还是避免不了要直接操作 DOM ，但是 React 的 diff 算法会把 DOM 改动次数降到最低。\n剩下的历史就不谈了，已经引出这篇文章的重点：虚拟 DOM。详细的历史可见：React 是怎样炼成的，文中历史部分内容很多摘抄与此。\n总结 传统前端的编程方式是命令式的，直接操纵DOM，告诉浏览器该怎么干。这样的问题就是，大量的代码被用于操作 DOM 元素，且代码可读性差，可维护性低。\nReact 的出现，将命令式变成了声明式，摒弃了直接操作 DOM 的细节，只关注数据的变动，DOM 操作由框架来完成，从而大幅度提升了代码的可读性和可维护性。\n在初期我们可以看到，数据的变动导致整个页面的刷新，这种效率很低，因为可能是局部的数据变化，但是要刷新整个页面，造成了不必要的开销。\n所以就有了 Diff 过程，将数据变动前后的 DOM 结构先进行比较，找出两者的不同处，然后再对不同之处进行更新渲染。\n但是由于整个 DOM 结构又太大，所以采用了更轻量级的对 DOM 的描述—虚拟 DOM。\n不过需要注意的是，虚拟 DOM 和 Diff 算法的出现是为了解决由命令式编程转变为声明式编程、数据驱动后所带来的性能问题的。换句话说，直接操作 DOM 的性能并不会低于虚拟 DOM 和 Diff 算法，甚至还会优于。\n这么说的原因是因为 Diff 算法的比较过程，比较是为了找出不同从而有的放矢的更新页面。但是比较也是要消耗性能的。而直接操作 DOM 就是有的放矢，我们知道该更新什么不该更新什么，所以不需要有比较的过程。所以直接操作 DOM 效率可能更高。\nReact 厉害的地方并不是说它比 DOM 快，而是说不管你数据怎么变化，我都可以以最小的代价来进行更新 DOM。 方法就是我在内存里面用新的数据刷新一个虚拟 DOM 树，然后新旧 DOM 进行比较，找出差异，再更新到 DOM 树上。\n框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。\n如果你想了解更多的虚拟 DOM 与性能的关系，请看下面公众号里面的两篇文章和那个知乎话题，会让你对虚拟 DOM 又更深层次的理解。\n别再说虚拟 DOM 快了，要被打脸的 深入理解虚拟 DOM，它真的不快 网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么 另外再提一个点，很多人会把 Diff 、数据更新、提升性能等概念绑定起来，但是你想想这个问题：React 由于只触发更新,而不能知道精确变化的数据,所以需要 diff 来找出差异然后 patch 差异队列。Vue 采用数据劫持的手段可以精准拿到变化的数据,为什么还要用虚拟DOM？\n虚拟DOM 的作用 要想回答上面那个问题，真的不要仅仅以为虚拟 DOM 或者 React 是来解决性能问题的，好处可还有很多呢。下面我总结了一些虚拟 DOM 好作用。\nVirtual DOM 在牺牲(牺牲很关键)部分性能的前提下，增加了可维护性，这也是很多框架的通性。 实现了对 DOM 的集中化操作，在数据改变时先对虚拟 DOM 进行修改，再反映到真实的 DOM中，用最小的代价来更新DOM，提高效率(提升效率要想想是跟哪个阶段比提升了效率，别只记住了这一条)。 打开了函数式 UI 编程的大门。 可以渲染到 DOM 以外的端，使得框架跨平台，比如 ReactNative，React VR 等。 可以更好的实现 SSR，同构渲染等。这条其实是跟上面一条差不多的。 组件的高度抽象化。 既然虚拟 DOM 有这么多作用，那么上面的问题，Vue 采用虚拟 DOM 的原因是什么呢？\nVue 2.0 引入 vdom 的主要原因是 vdom 把渲染过程抽象化了，从而使得组件的抽象能力也得到提升，并且可以适配 DOM 以外的渲染目标。 来自尤大文章：Vue 的理念问题\n虚拟 DOM 的缺点 首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢。 虚拟 DOM 需要在内存中的维护一份 DOM 的副本(更上面一条其实也差不多，上面一条是从速度上，这条是空间上)。 如果虚拟 DOM 大量更改，这是合适的。但是单一的，频繁的更新的话，虚拟 DOM 将会花费更多的时间处理计算的工作。所以，如果你有一个DOM 节点相对较少页面，用虚拟 DOM，它实际上有可能会更慢。但对于大多数单页面应用，这应该都会更快。 总结 本文在介绍虚拟 DOM 并没有像其他文章一样去解释它的实现以及相关的 Diff 算法，关于 Diff 算法可以看这篇 虚拟 DOM 到底是什么？文中介绍了很多库的 diff 算法，可见其实 React 的 diff 算法并不算太快。\n而是通过历史来得出他的价值体现，从历史怎么看大牛们是怎么一步一步的去解决问题，从历史中看为什么别人能做出这么伟大的东西，而我们不能？\n每个伟大的产品都会有非常多的背景支持，都是一步一步发展而来的。\n另外洗清了一个错误观念：很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。\n虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种 GUI。\n最后希望大家多思考，跟随者浪潮站在浪潮之巅。\n参考链接 虚拟DOM为何出现以及性能问题？ React 是怎样炼成的 ","permalink":"/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/293/","summary":"最近我发现很多面试题里面都有「如何理解虚拟 DOM」这个题，我觉得这个题应该没有想象中那么好答，因为很多人没有真正理解虚拟 DOM 它的价值所在，我这篇从虚拟 DOM 的诞生过程来引出它的价值以及历史地位，帮助你深入的理解它。\n什么是虚拟DOM 本质上是 JavaScript 对象，这个对象就是更加轻量级的对 DOM 的描述。\n对，就是这么简单！\n就是一个复杂一点的对象而已，没什么好说的，重点是为什么要有这个东西，以及有了这个描述有什么好处才是我们今天要介绍的内容。\n为什么要有虚拟DOM 再谈为什么要用虚拟 DOM 之前，先来聊一聊 React 是怎么诞生的，毕竟在了解历史背景，再去思考他的诞生，就知道是必然会出现的。\n再查了很多关于 React 的历史相关的文章，这篇文章我感觉比较值得令我信服：React 是怎样炼成的。\n众所周知，Facebook 是 PHP 大户，所以 React 最开始的灵感就来至于 PHP。\n字符串拼接时代 - 2004 在 2004 年这个时候，大家都还在用 PHP 的字符串拼接来开发网站：\n$str = \u0026#39;\u0026lt;ul\u0026gt;\u0026#39;; foreach ($talks as $talk) { $str += \u0026#39;\u0026lt;li\u0026gt;\u0026#39; . $talk-\u0026gt;name . \u0026#39;\u0026lt;/li\u0026gt;\u0026#39;; } $str += \u0026#39;\u0026lt;/ul\u0026gt;\u0026#39;; 这种方式代码写出来不好看不说，还容易造成 XSS 等安全问题。\n应对方法是对用户的任何输入都进行转义（Escape）。但是如果对字符串进行多次转义，那么反转义的次数也必须是相同的，否则会无法得到原内容。如果又不小心把 HTML 标签（Markup）给转义了，那么 HTML 标签会直接显示给用户，从而导致很差的用户体验。\nXHP 时代 - 2010 到了 2010 年，为了更加高效的编码，同时也避免转义 HTML 标签的错误，Facebook 开发了 XHP 。XHP 是对 PHP 的语法拓展，它允许开发者直接在 PHP 中使用 HTML 标签，而不再使用字符串。","title":"根据 React 历史来聊如何理解虚拟 DOM"},{"content":"最开始接触函数式编程的时候是在小米工作的时候，那个时候看老大以前写的代码各种 compose，然后一些 ramda 的一些工具函数，看着很吃力，然后极力吐槽函数式编程，现在回想起来，那个时候的自己真的是见识短浅，只想说,\u0026lsquo;真香\u0026rsquo;。\n最近在研究函数式编程，真的是在学习的过程中感觉自己的思维提升了很多，抽象能力大大的提高了，让我深深的感受到了函数式编程的魅力。所以我打算后面用 5 到 8 篇的篇幅，详细的介绍一下函数式编程的思想，基础、如何设计、测试等。\n今天这篇文章主要介绍函数式编程的思想。\n函数式编程有用吗？ 什么是函数式编程？ 函数式编程的优点。 面向对象编程(OOP)通过封装变化使得代码更易理解。 函数式编程(FP)通过最小化变化使得代码更易理解。 \u0026ndash; Michacel Feathers（Twitter）\n总所周知 JavaScript 是一种拥有很多共享状态的动态语言，慢慢的，代码就会积累足够的复杂性，变得笨拙难以维护。面向对象设计能帮我们在一定程度上解决这个问题，但是还不够。\n由于有很多的状态，所以处理数据流和变化的传递显得尤为重要，不知道你们知道响应式编程与否，这种编程范式有助于处理 JavaScript 的异步或者事件响应。总之，当我们在设计应用程序的时候，我们应该考虑是否遵守了以下的设计原则。\n可扩展性\u0026ndash;我是否需要不断地重构代码来支持额外的功能？ 易模块化\u0026ndash;如果我更改了一个文件，另一个文件是否会受到影响？ 可重用性\u0026ndash;是否有很多重复的代码？ 可测性\u0026ndash;给这些函数添加单元测试是否让我纠结？ 易推理性\u0026ndash;我写的代码是否非结构化严重并难以推理？ 我这能这么跟你说，一旦你学会了函数式编程，这些问题迎刃而解，本来函数式编程就是这个思想，一旦你掌握了函数式，然后你再学习响应式编程那就比较容易懂了，这是我亲身体会的。我之前在学 Rxjs 的时候是真的痛苦，说实话，Rxjs 是我学过最难的库了，没有之一。在经历过痛苦的一两个月之后，有些东西还是不能融会贯通，知道我最近研究函数式编程，才觉得是理所当然。毫无夸张，我也尽量在后面的文章中给大家介绍一下 Rxjs，这个话题我也在公司分享过。\n什么是函数式编程？ 简单来说，函数式编程是一种强调以函数使用为主的软件开发风格。看到这句我想你还是一脸懵逼，不知道函数式编程是啥，不要着急，看到最后我相信你会明白的。\n还有一点你要记住，函数式编程的目的是使用函数来抽象作用在数据之上的控制流和操作，从而在系统中消除副作用并减少对状态的改变。\n下面我们通过例子来简单的演示一下函数式编程的魅力。\n现在的需求就是输出在网页上输出 “Hello World”。\n可能初学者会这么写。\ndocument.querySelector(\u0026#39;#msg\u0026#39;).innerHTML = \u0026#39;\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\u0026#39; 这个程序很简单，但是所有代码都是死的，不能重用，如果想改变消息的格式、内容等就需要重写整个表达式，所以可能有经验的前端开发者会这么写。\nfunction printMessage(elementId, format, message) { document.querySelector(elementId).innerHTML = `\u0026lt;${format}\u0026gt;${message}\u0026lt;/${format}\u0026gt;` } printMessage(\u0026#39;msg\u0026#39;, \u0026#39;h1\u0026#39;, \u0026#39;Hello World\u0026#39;) 这样确实有所改进，但是任然不是一段可重用的代码，如果是要将文本写入文件，不是非 HTML，或者我想重复的显示 Hello World。\n那么作为一个函数式开发者会怎么写这段代码呢？\nconst printMessage = compose(addToDom(\u0026#39;msg\u0026#39;), h1, echo) printMessage(\u0026#39;Hello World\u0026#39;) 解释一下这段代码，其中的 h1 和 echo 都是函数，addToDom 很明显也能看出它是函数，那么我们为什么要写成这样呢？看起来多了很多函数一样。\n其实我们是讲程序分解为一些更可重用、更可靠且更易于理解的部分，然后再将他们组合起来，形成一个更易推理的程序整体，这是我们前面谈到的基本原则。\ncompose 简单解释一下，他会让函数从最后一个参数顺序执行到第一个参数，compose 的每个参数都是函数，不明白的可以查一下，在 redux 的中间件部分这个函数式精华。\n可以看到我们是将一个任务拆分成多个最小颗粒的函数，然后通过组合的方式来完成我们的任务，这跟我们组件化的思想很类似，将整个页面拆分成若干个组件，然后拼装起来完成我们的整个页面。在函数式编程里面，组合是一个非常非常非常重要的思想。\n好，我们现在再改变一下需求，现在我们需要将文本重复三遍，打印到控制台。\nvar printMessaage = compose(console.log, repeat(3), echo) printMessage(‘Hello World’) 可以看到我们更改了需求并没有去修改内部逻辑，只是重组了一下函数而已。\n可以看到函数式编程在开发中具有声明模式。为了充分理解函数式编程，我们先来看下几个基本概念。\n声明式编程 纯函数 引用透明 不可变性 声明式编程 函数式编程属于声明是编程范式：这种范式会描述一系列的操作，但并不会暴露它们是如何实现的或是数据流如何传过它们。\n我们所熟知的 SQL 语句就是一种很典型的声明式编程，它由一个个描述查询结果应该是什么样的断言组成，对数据检索的内部机制进行了抽象。\n我们再来看一组代码再来对比一下命令式编程和声明式编程。\n// 命令式方式 var array = [0, 1, 2, 3] for(let i = 0; i \u0026lt; array.length; i++) { array[i] = Math.pow(array[i], 2) } array; // [0, 1, 4, 9] // 声明式方式 [0, 1, 2, 3].map(num =\u0026gt; Math.pow(num, 2)) 可以看到命令式很具体的告诉计算机如何执行某个任务。\n而声明式是将程序的描述与求值分离开来。它关注如何用各种表达式来描述程序逻辑，而不一定要指明其控制流或状态关系的变化。\n为什么我们要去掉代码循环呢？循环是一种重要的命令控制结构，但很难重用，并且很难插入其他操作中。而函数式编程旨在尽可能的提高代码的无状态性和不变性。要做到这一点，就要学会使用无副作用的函数\u0026ndash;也称纯函数\n纯函数 纯函数指没有副作用的函数。相同的输入有相同的输出，就跟我们上学的函数一样。\n常常这些情况会产生副作用。\n改变一个全局的变量、属性或数据结构 改变一个函数参数的原始值 处理用户输入 抛出一个异常 屏幕打印或记录日志 查询 HTML 文档，浏览器的 Cookie 或访问数据库 举一个简单的例子\nvar counter = 0 function increment() { return ++counter; } 这个函数就是不纯的，它读取了外部的变量，可能会觉得这段代码没有什么问题，但是我们要知道这种依赖外部变量来进行的计算，计算结果很难预测，你也有可能在其他地方修改了 counter 的值，导致你 increment 出来的值不是你预期的。\n对于纯函数有以下性质：\n仅取决于提供的输入，而不依赖于任何在函数求值或调用间隔时可能变化的隐藏状态和外部状态。 不会造成超出作用域的变化，例如修改全局变量或引用传递的参数。 但是在我们平时的开发中，有一些副作用是难以避免的，与外部的存储系统或 DOM 交互等，但是我们可以通过将其从主逻辑中分离出来，使他们易于管理。\n现在我们有一个小需求：通过 id 找到学生的记录并渲染在浏览器(在写程序的时候要想到可能也会写到控制台，数据库或者文件，所以要想如何让自己的代码能重用)中。\n// 命令式代码 function showStudent(id) { // 这里假如是同步查询 var student = db.get(id) if(student !== null) { // 读取外部的 elementId document.querySelector(`${elementId}`).innerHTML = `${student.id},${student.name},${student.lastname}` } else { throw new Error(\u0026#39;not found\u0026#39;) } } showStudent(\u0026#39;666\u0026#39;) // 函数式代码 // 通过 find 函数找到学生 var find = curry(function(db, id) { var obj = db.get(id) if(obj === null) { throw new Error(\u0026#39;not fount\u0026#39;) } return obj }) // 将学生对象 format var csv = (student) =\u0026gt; `${student.id},${student.name},${student.lastname}` // 在屏幕上显示 var append = curry(function(elementId, info) { document.querySelector(elementId).innerHTML = info }) var showStudent = compose(append(\u0026#39;#student-info\u0026#39;), csv, find(db)) showStudent(\u0026#39;666\u0026#39;) 如果看不懂 curry (柯里化)的先不着急，这是一个对于新手来说比较难理解的一个概念，在函数式编程里面起着至关重要的作用。\n可以看到函数式代码通过较少这些函数的长度，将 showStudent 编写为小函数的组合。这个程序还不够完美，但是已经可以展现出相比于命令式的很多优势了。\n灵活。有三个可重用的组件 声明式的风格，给高阶步骤提供了一个清晰视图，增强了代码的可读性 另外是将纯函数与不纯的行为分离出来。 我们看到纯函数的输出结果是一致的，可预测的，相同的输入会有相同的返回值，这个其实也被称为引用透明。\n引用透明 引用透明是定义一个纯函数较为正确的方法。纯度在这个意义上表面一个函数的参数和返回值之间映射的纯的关系。如果一个函数对于相同的输入始终产生相同的结果，那么我们就说它是引用透明。\n这个概念很容易理解，简单的举两个例子就行了。\n// 非引用透明 var counter = 0 function increment() { return ++counter } // 引用透明 var increment = (counter) =\u0026gt; counter + 1 其实对于箭头函数在函数式编程里面有一个高大上的名字，叫 lambda 表达式，对于这种匿名函数在学术上就是叫 lambda 表达式，现在在 Java 里面也是支持的。\n不可变数据 不可变数据是指那些创建后不能更改的数据。与许多其他语言一样，JavaScript 里有一些基本类型(String,Number 等)从本质上是不可变的，但是对象就是在任意的地方可变。\n考虑一个简单的数组排序代码：\nvar sortDesc = function(arr) { return arr.sort(function(a, b) { return a - b }) } var arr = [1, 3, 2] sortDesc(arr) // [1, 2, 3] arr // [1, 2, 3] 这段代码看似没什么问题，但是会导致在排序的过程中会产生副作用，修改了原始引用，可以看到原始的 arr 变成了 [1, 2, 3]。这是一个语言缺陷，后面会介绍如何克服。\n总结 使用纯函数的代码绝不会更改或破坏全局状态，有助于提高代码的可测试性和可维护性 函数式编程采用声明式的风格，易于推理，提高代码的可读性。 函数式编程将函数视为积木，通过一等高阶函数来提高代码的模块化和可重用性。 可以利用响应式编程组合各个函数来降低事件驱动程序的复杂性(这点后面可能会单独拿一篇来进行讲解)。 内容来至于《JavaScript函数式编程指南》\n欢迎关注个人公众号【前端桃园】，公号更新频率比掘金快。\n","permalink":"/posts/%E6%8A%80%E6%9C%AF/190/","summary":"最开始接触函数式编程的时候是在小米工作的时候，那个时候看老大以前写的代码各种 compose，然后一些 ramda 的一些工具函数，看着很吃力，然后极力吐槽函数式编程，现在回想起来，那个时候的自己真的是见识短浅，只想说,\u0026lsquo;真香\u0026rsquo;。\n最近在研究函数式编程，真的是在学习的过程中感觉自己的思维提升了很多，抽象能力大大的提高了，让我深深的感受到了函数式编程的魅力。所以我打算后面用 5 到 8 篇的篇幅，详细的介绍一下函数式编程的思想，基础、如何设计、测试等。\n今天这篇文章主要介绍函数式编程的思想。\n函数式编程有用吗？ 什么是函数式编程？ 函数式编程的优点。 面向对象编程(OOP)通过封装变化使得代码更易理解。 函数式编程(FP)通过最小化变化使得代码更易理解。 \u0026ndash; Michacel Feathers（Twitter）\n总所周知 JavaScript 是一种拥有很多共享状态的动态语言，慢慢的，代码就会积累足够的复杂性，变得笨拙难以维护。面向对象设计能帮我们在一定程度上解决这个问题，但是还不够。\n由于有很多的状态，所以处理数据流和变化的传递显得尤为重要，不知道你们知道响应式编程与否，这种编程范式有助于处理 JavaScript 的异步或者事件响应。总之，当我们在设计应用程序的时候，我们应该考虑是否遵守了以下的设计原则。\n可扩展性\u0026ndash;我是否需要不断地重构代码来支持额外的功能？ 易模块化\u0026ndash;如果我更改了一个文件，另一个文件是否会受到影响？ 可重用性\u0026ndash;是否有很多重复的代码？ 可测性\u0026ndash;给这些函数添加单元测试是否让我纠结？ 易推理性\u0026ndash;我写的代码是否非结构化严重并难以推理？ 我这能这么跟你说，一旦你学会了函数式编程，这些问题迎刃而解，本来函数式编程就是这个思想，一旦你掌握了函数式，然后你再学习响应式编程那就比较容易懂了，这是我亲身体会的。我之前在学 Rxjs 的时候是真的痛苦，说实话，Rxjs 是我学过最难的库了，没有之一。在经历过痛苦的一两个月之后，有些东西还是不能融会贯通，知道我最近研究函数式编程，才觉得是理所当然。毫无夸张，我也尽量在后面的文章中给大家介绍一下 Rxjs，这个话题我也在公司分享过。\n什么是函数式编程？ 简单来说，函数式编程是一种强调以函数使用为主的软件开发风格。看到这句我想你还是一脸懵逼，不知道函数式编程是啥，不要着急，看到最后我相信你会明白的。\n还有一点你要记住，函数式编程的目的是使用函数来抽象作用在数据之上的控制流和操作，从而在系统中消除副作用并减少对状态的改变。\n下面我们通过例子来简单的演示一下函数式编程的魅力。\n现在的需求就是输出在网页上输出 “Hello World”。\n可能初学者会这么写。\ndocument.querySelector(\u0026#39;#msg\u0026#39;).innerHTML = \u0026#39;\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\u0026#39; 这个程序很简单，但是所有代码都是死的，不能重用，如果想改变消息的格式、内容等就需要重写整个表达式，所以可能有经验的前端开发者会这么写。\nfunction printMessage(elementId, format, message) { document.querySelector(elementId).innerHTML = `\u0026lt;${format}\u0026gt;${message}\u0026lt;/${format}\u0026gt;` } printMessage(\u0026#39;msg\u0026#39;, \u0026#39;h1\u0026#39;, \u0026#39;Hello World\u0026#39;) 这样确实有所改进，但是任然不是一段可重用的代码，如果是要将文本写入文件，不是非 HTML，或者我想重复的显示 Hello World。\n那么作为一个函数式开发者会怎么写这段代码呢？\nconst printMessage = compose(addToDom(\u0026#39;msg\u0026#39;), h1, echo) printMessage(\u0026#39;Hello World\u0026#39;) 解释一下这段代码，其中的 h1 和 echo 都是函数，addToDom 很明显也能看出它是函数，那么我们为什么要写成这样呢？看起来多了很多函数一样。","title":"认识函数式编程"}]