<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005-Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>观点与感想 on 桃园</title>
    <link>/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/</link>
    <description>Recent content in 观点与感想 on 桃园</description>
    <image>
      <title>桃园</title>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 21 Mar 2022 22:22:22 +0000</lastBuildDate><atom:link href="/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>有一种用户增长方案，叫不做“用户增长”</title>
      <link>/posts/2022/03-21-%E6%9C%89%E4%B8%80%E7%A7%8D%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF%E6%96%B9%E6%A1%88%E5%8F%AB%E4%B8%8D%E5%81%9A%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF/</link>
      <pubDate>Mon, 21 Mar 2022 22:22:22 +0000</pubDate>
      
      <guid>/posts/2022/03-21-%E6%9C%89%E4%B8%80%E7%A7%8D%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF%E6%96%B9%E6%A1%88%E5%8F%AB%E4%B8%8D%E5%81%9A%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF/</guid>
      <description>我自己最近由于组织架构的调整，调整到了做用户增长相关的业务，我才去了解了什么是用户增长，用户增长包含用户的获客、激活、留存、变现、推荐，然后知道用户增长是所以企业永远不会过时的话题。
因为所有的企业如果需要成长，一定需要伴随用户的增长，扩大规模。
然后我还想着在做用户增长相关的业务，想去深入学习一下，然后把自己的公众号当做产品来做用户增长。
由于产品在给我们讲业务的时候，主要讲的是拉新获客相关的，所以我的头脑的一直就把 拉新作为用户增长的全部了。但是实际上拉新只是用户增长的一个环节，还有很多环节都需要用户增长，今天重点聊拉新。
拉新是增长中的第一个要素，通过合理的拉新方式让用户知道一款产品并在使用找到产品提供的核心价值留下来，并在使用过程中对产品创造价值最终形成对产品在盈利上的供给。
可见拉新主要是让不太清楚这款产品的用户，知道他的价值，然后使用这款产品，基本上这样拉新就算成功了。后续这个用户继续不继续使用，那就是激活、留存要做的事情了。
常用的一些拉新方式就是找一些渠道打广告，公域的比如应用商店、抖音、快手、百度、小红书等；私域的比如公众号找博主，朋友圈；甚至有些还有线下地推的方式。
今天在读《华与华正道》看到一句话：把现有的客户服务好，远方的客户自己会来。
我发现自己悟了，懂得了一条新的渠道，而且靠谱，对用户增长后面的环节，比如激活、留存转化率都会更高。
我们思考这么一个道理，现有的客户服务好，怎么对拉新有帮助的。
服务好现有的客户，那么客户对身边的人有类似需求的，是不是可以带过来；社交电商就是基于此。 服务好现有的客户，自己的品牌口碑就会很好，当别人有类似需求的时候，找口碑好的产品，就会自己找上来。 这就是不做用户增长，也做到了用户增长。
要是服务不好现有的客户，为了维持现有的收益，可能就得不停的通过传统的方式拉新，传统方式拉新成本贼高，投广告啥的都是很花钱的。然后把钱花了很多去投广告，如果资金不充裕，没有多余的，那么现有的客户更服务不好，又要去拉新，恶性循环。
所以我觉得服务好现有的客户，是用户增长的基础，稳扎稳打，逐步扩张。
基于以上的思考，我觉得我未来的做公众号的方向就需要转向服务好现有的读者，不断的去尝试对现在的读者有价值，愿意看的内容，而不是为了维持现有的阅读量，通过各种渠道去拉新人。
另外我想到了我现在的公司，支付宝，在支付份额上最近几年被微信压得很惨，虽然我觉得支付宝被压得很惨的原因不是因为客户没有服务好，而是被微信的高频所压制。但是我还是觉得服务好现有的客户是比拉新更重要的，有没有办法把现在支付宝和微信重叠的用户，让他们都用支付宝，这如果都转过来了，已经够支付宝长久发展了。
如果支付宝的服务好到这部分微信高频用户的都用上了支付宝，难道对于新用户在选支付产品的时候还不用支付宝吗？
最后还是送给大家书中的一句话：
《大学》说：“物有本末，事有终始，知所先后，则近道矣！”现有客户是本，新客户是末；把现有客户服务好是先，新客户是后。所以我一看见谁着急没客户，要去拓展，我就觉得他是舍本求末。到处去开拓客户，是最低效的经营手段。想要客户，只会让你签下不平等条约，最后除了得到一个“客户”，剩下的全是损失。
不做「用户增长」的用户增长，才是最有效的用户增长。</description>
    </item>
    
    <item>
      <title>做人要做学习型，做事儿要做价值型</title>
      <link>/posts/2022/03-11-%E5%81%9A%E4%BA%BA%E8%A6%81%E5%81%9A%E5%AD%A6%E4%B9%A0%E5%9E%8B%E5%81%9A%E4%BA%8B%E5%84%BF%E8%A6%81%E5%81%9A%E4%BB%B7%E5%80%BC%E5%9E%8B/</link>
      <pubDate>Fri, 11 Mar 2022 22:29:22 +0000</pubDate>
      
      <guid>/posts/2022/03-11-%E5%81%9A%E4%BA%BA%E8%A6%81%E5%81%9A%E5%AD%A6%E4%B9%A0%E5%9E%8B%E5%81%9A%E4%BA%8B%E5%84%BF%E8%A6%81%E5%81%9A%E4%BB%B7%E5%80%BC%E5%9E%8B/</guid>
      <description>今天在阅读《华与华正道》，读到两句金句：
做人要做学习型，不要做纠错型 不要批判思维，要价值思维 记忆深刻，分享一下我的理解。
做人要做学习型 从小我们就学过《论语》的：三人行，必有我师，择其善者而从之,其不善者而改之。
对这句的解释是：别人的言行举止，必定有值得我学习的地方。选择别人好的学习，看到别人缺点，反省自身有没有同样的缺点，如果有，加以改正。
以前在学习的时候只是去死记硬背，并没有去想把这个思想实践到现实中，这就是读死书。
其实读书和交友一样，要看他好的地方。如果纠到一点错就拒之门外，就无书可读、无友可交了。
善于学习别人的人，每天都在成长，每次交流、都在学习，如果是纠错型的人，总是在挑刺，总是自以为是，这样就无法从别人身上学习，成长缓慢。一旦成长缓慢，思维受限，就更无法从牛人身上学习，恶性循环就是这样来的。
除了要做一个学习的人，还要注意不要做一个纠错型的人，老纠别人的错，这样的话你会觉得周围所有人都不好，以自己为中心，这样身边的人都会对你避而远之。
做事要做价值型 不要总是持有批判思维，要学会价值思维。
身边有没有遇到过这样的案例，一个新东西出来，不是去研究这个东西的价值，而是上来就开始批判这个东西的好坏。
就拿数字货币来说吧，可能听说过比特币是基于区块链做的，然后还有还有很多山寨币，很多人炒币亏了，就否认数字货币，否认区块链技术。
然而实际上，这种去中心化区块链的方式，可能是历史依赖，解决信任问题的一大革命。
在比特币上也是，真正去研究他价值的人，从来不是以炒的心态去做的，这些人早已经赚得盆满钵满了。
对一个人，或一件事、一个方案，你不要一上来就评判他好或坏、对或错、接纳或拒绝。而是要关注他有什么价值，这样你就能得到价值。没有人经得起评判，但每个人都有价值。
价值思维的人总是从任何事或人上，都能看到价值，然后从中学习，批判型的人会慢慢丧失研究的能力，上来就要得出一个结论，好或者坏，对或者错。
总结 这两句金句给我最大的感受就是要放开自己，打开自己的眼界，让自己的见识增长，这样眼里就会容纳更多的东西，海纳百川有容乃大。
这样我们才可能看到别人，或者事情的价值，打开自己学习的欲望，而不是眼界狭窄，认为这个世界仅仅只是二元的。</description>
    </item>
    
    <item>
      <title>幸福的秘诀--保持低期望</title>
      <link>/posts/2022/03-10-%E5%B9%B8%E7%A6%8F%E7%9A%84%E7%A7%98%E8%AF%80--%E4%BF%9D%E6%8C%81%E4%BD%8E%E6%9C%9F%E6%9C%9B/</link>
      <pubDate>Thu, 10 Mar 2022 22:55:22 +0000</pubDate>
      
      <guid>/posts/2022/03-10-%E5%B9%B8%E7%A6%8F%E7%9A%84%E7%A7%98%E8%AF%80--%E4%BF%9D%E6%8C%81%E4%BD%8E%E6%9C%9F%E6%9C%9B/</guid>
      <description>为什么你总是在焦虑，总是对生活感到不满呢？
也许是因为期望值太高了。由于期望值过高，现实往往不能达到预期的标准，即使达到了预期的标准，也体验不到“超过预期”的欢欣，因此，完美主义者们总是感到忧心忡忡。
也许是时候把自己的期望值降低一些了，这并不是对现实生活的消极应对，而是对幸福感的积极追寻。
今天读到一段话 ——
对事对人，永远保持低期望。对任何事，永远保持低期望。低期望，就能坚持，就能付出。期望值太高，则很快因失望而放弃。为什么总是不求回报的人得到最大回报，就是这个原因。
对我自己以前的想法产生了巨大的冲击。
特别是对事儿，我以前都是以高期望去做的，认为这样可以让自己在做事儿的时候会更有动力，因为觉得这个事儿只要做成了就会很牛逼，高期望。
在读到这段话，也许我真的要改变以往的心态了。
期望值是一个人对某个目标能够实现的可能性的估计，目标估计越高，并不意味着实现目标的概率就越大，反而会因为不能实现目标而引起失望，增加心理痛苦。
生活中人们往往对某些东西抱有较高的期待，但是等到面对时，往往会发现这件东西并没有给你带来预期的效果，这种心理上的落差会让人倍感痛苦。
我之前看到过这样一个公式：幸福 = 现实 - 期望。
所以想要幸福，关键因数在于现实和期望。
现实往往是难以改变的，但是我们可以管理我们的期望，调整节我们的幸福感。
期望又分为对人的期待和对事儿的期待。
怎么做到对事儿对人保持低期待呢？
比如当我们再寻求朋友帮助的时候，我们一定要降低期望，帮我们是情谊不帮我们是本分。如果你抱着一定会帮你心态，一旦被拒绝，那么你的心理落差会巨大，会觉得这个朋友不给力，这点都不帮你。
那么也许你跟这个朋友的关系就会就此走下坡路。
但是如果抱着低期望，可能这个忙大概率，他不会帮我，毕竟挺麻烦他的。如果他拒绝了，反正你已经预料了，但是如果同意了，你会觉得这个朋友靠谱，值得信赖。
这样不管什么情况，两个人的关系都不会出现问题。
这个放在两性关系里也挺实用的，比如恋爱或者结婚之后，抱着很高的期望，觉得对方不会有很多缺点，所以当你对方的做法令你不满意的时候就会经常吵架。
但是其实都是人嘛，怎么可能没有缺点，总会有多多少少的摩擦，降低期望，互相谅解。
怎么做到对事儿保持低期待呢？
对事儿保持期望其实很简单，就是降低目标就行了。
以我自己为例子，我每次发文章都抱着这篇文章一定能火的心态，那肯定每天过得都愁眉苦脸。
但是我放平心态，我最近并没有什么实质性的突破，发个文章跟平时保持差不多就行了。
一旦可能比平时阅读量高一点，我就会开心一整天，如果反响平平，那也不会影响我的心情。
其实我以前就是对事儿，是以高期望的心态去做的。所以我以前经常做着做着不符合预期的时候就很伤，特别打击人。
就拿做公众号来说，以前一起做公众号的几个朋友，好多人比我还晚做，但是阅读量早已超过我许多了。
其实被后来的人超越，以前我还挺难受的，但是后来想通了，自己确实没有别人写得多，没有付出那么多努力，做得差也应该嘛，后面心态就好了。
最后的建议 保持低期望值，并不是要求你不思进取，而是因为人的欲望和贪婪是永无止境的，保持较低的期望值，反而会对安心做事、身心健康与事业成就有好处。在浮躁的社会环境中，保持低期望值，保持简约生活，可以调节与清净我们的心灵，指导我们实实在在的幸福生活。</description>
    </item>
    
    <item>
      <title>时间管理的三大法宝</title>
      <link>/posts/2022/03-09-%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%89%E5%A4%A7%E6%B3%95%E5%AE%9D/</link>
      <pubDate>Wed, 09 Mar 2022 22:47:22 +0000</pubDate>
      
      <guid>/posts/2022/03-09-%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%89%E5%A4%A7%E6%B3%95%E5%AE%9D/</guid>
      <description>今天读《华与华正道》看到一句话：如何管理时间？做到铁石心肠、制定节拍、不追热点。
这三个法宝基本上已经足以满足绝大部分人的需求了。
接下来我们来推演一下这三个法宝为什么有用。
大前提：
时间管理就是把重要的事情放在效率最高的时候做，让产生的价值最大化。即时间管理 = 做事价值 * 做事的效率
你是承认时间并不能被管理，被管理的只有人。
如果这个大前提是认同的，可以继续往下看，如果不认，可以关闭了，因为下面所有的推演都是基于此。
法宝一：制定节拍 我们基于大前提一开始推演，时间管理 = 做事的价值 * 做事的效率。
所以我们就要知道我们做什么事情价值高，同时，我们在什么时候做事的效率高。
当我们知道之后，我们就需要制定我们自己的节拍，尽量的去固定自己的日程，在效率高的时候去做价值高的事情。
这样我们才会效益最大化，时间管理就是有效的。
如果我们没有制定自己的节拍，那么我们就是跟着别人的节拍走的，他想什么时候找你就什么时间找你。
别人按照他的节拍走的，事儿都干完了，而自己的最重要的事情都还没干。
这种情况就需要模糊，互相的去适应，去调整互相的节拍，尽量一致。
另外自己的节拍最好可以公布出来，让大家都知道，这样磨合起来会快一点。
法宝二：铁石心肠 基于大前提二：时间不能被管理，被管理的只有人。
这个人有别人和自己。
铁石心肠就是用来管理别人的，当别人来打断你的计划的时候，可以拒绝。
没有什么抹不开面子的事儿，我的时间我做主。
法宝三：不追热点 同样基于大前提二：时间不能被管理，被管理的只有人。
这个人有别人和自己。
不追热点就是用来管理自己的。
让自己可以专注于的做事情，高效不仅需要一个合适的时间段，更重要的还是需要能专注下来，心无旁骛。
追热点就像街上有人打架，你围观，还评论，最浪费时间。
总结 总结下来管理时间就是严格准时自己制定的节拍，通过铁石心肠和不追热点的法宝管理别人和管理自己，让自己制定的节拍能够准时执行下去。</description>
    </item>
    
    <item>
      <title>回顾过去比展望未来重要一百倍</title>
      <link>/posts/2022/03-08-%E5%9B%9E%E9%A1%BE%E8%BF%87%E5%8E%BB%E6%AF%94%E5%B1%95%E6%9C%9B%E6%9C%AA%E6%9D%A5%E9%87%8D%E8%A6%81%E4%B8%80%E7%99%BE%E5%80%8D/</link>
      <pubDate>Tue, 08 Mar 2022 22:00:00 +0000</pubDate>
      
      <guid>/posts/2022/03-08-%E5%9B%9E%E9%A1%BE%E8%BF%87%E5%8E%BB%E6%AF%94%E5%B1%95%E6%9C%9B%E6%9C%AA%E6%9D%A5%E9%87%8D%E8%A6%81%E4%B8%80%E7%99%BE%E5%80%8D/</guid>
      <description>今天在阅读《华与华正道》读到这么一句话 ：
回顾过去比展望未来重要一百倍，如果对过去不认真复盘，就会再次掉进过去的错误里。一个步骤一个步骤地复盘，一个动作一个动作地复盘，才能找到成功或失败的真因。在复盘中钻研，钻研工法，持续改善，最终实现全公司的技术进步。
我们在哪些方面，应该回顾、复盘？ 工作上的事情，比如每一个项目做完了需要复盘，每个月至少写一个月报复盘一下，最好每周复盘。 自己的情绪，比如跟伴侣吵架了，复盘一下是什么情况，两个的情绪分别是啥样的，然后复盘完之后两个再沟通一下，增加感情。 时间管理，比如每天组内其他同学下班都挺早，为啥自己这么晚。为啥早上规划的 5 件事，到下班只做了 3 件事？是不是被别人占用的时间太多了，还是自己偷懒了？ 如果不回顾，会怎么样？ 如果我们不养成回顾的习惯，一路往前走，肯定是走不远的。
因为如果我们不对过去的进行复盘，大概率会再次掉进过去的错误里，只有在复盘的时候找到根本原因，才能进行避免；
同时做得好的地方，也不会被发现，就无法让自己产生积累，无法给其他人复制，这样就无法精进，所以是走不远的。
如何让我们能坚持回顾 每天回顾固然是好的，但是对于大部分人来说是很有难度的。
比如：
上了一天班，很累，回家就想休息。
回顾是一个思考的过程，思考是反人性的，大脑会痛苦，特别是在晚上，意志力会变得很弱。
我以前还遇到过一个难点，不知道回顾什么，想每天写日记来回顾，但是不知道写啥。
针对以上的难点，我的思考的解决方案有两个：
针对 1 和 2，其实都是因为把回顾的时间放到了晚上，晚上其实在做脑力工作不是一个合适的时间，建议把回顾放到早上，早起写晨间日记，写完前一天的复盘之后，再根据复盘的内容做当天的规划。 针对第 3 天，可以从工作、学习、快乐的事情、梦想、理财、关系、健康这几个方向去做回顾，养成习惯之后，这个事情机会变得很容易。 如果自己能坚持每天回顾，我相信我可以在这一年过得非常的清晰，因为我每天都知道我的目标是什么，我现在离目标有多远，我还要做什么才可以实现我的目标。
同时，我也可以通过反思、回顾及时的调整错误的做事方式，
最后 希望大家少关注未来，多回望历史，对过去犯过的错，认真复盘总结
我们预测不到特朗普上台，也预测不了新冠肺炎发生，预测不了美股熔断，现在也预测不了哪个国家会怎么样。德鲁克说，未来只有一点是确定的，就是肯定跟我们的预测不一样。所以，少关注未来，多回望历史。过去犯过的错，认真复盘总结，下次不要再犯。</description>
    </item>
    
    <item>
      <title>专注于自己能做的最少的事情</title>
      <link>/posts/2022/%E4%B8%93%E6%B3%A8%E4%BA%8E%E8%87%AA%E5%B7%B1%E8%83%BD%E5%81%9A%E7%9A%84%E6%9C%80%E5%B0%91%E7%9A%84%E4%BA%8B%E6%83%85/</link>
      <pubDate>Mon, 07 Mar 2022 22:00:00 +0000</pubDate>
      
      <guid>/posts/2022/%E4%B8%93%E6%B3%A8%E4%BA%8E%E8%87%AA%E5%B7%B1%E8%83%BD%E5%81%9A%E7%9A%84%E6%9C%80%E5%B0%91%E7%9A%84%E4%BA%8B%E6%83%85/</guid>
      <description>今天读《华与华正道》，读两句话：
先认识到什么事情是我们做不到的，然后再积极地去做现在能做的事。 要认识到我们知道的有限，能做的事情很少，然后把最少的事情做到最彻底 这两句都是让我们更专注于当前的事的思维。
一、认识到什么事情是我们做不到的，然后再积极地去做现在能做的事 不知道大家有没有这样一种体感，就是你越读书，越专研一个知识，会发现自己不懂的越来越多，感觉自己越学越菜，越学不懂的越多。
这是正常的，不管是阅读，还是跟牛人交流，随着你对世界的认识越深刻，刚开始起的作用是消极的，然后才是积极的。
消极，让我们认识到自己能力和认知的边界，认识到什么事情知道，什么事情不知道，然后才积极的去做自己能做的事情。
这种消极的意义可以让我们避免一些侥幸的情况，堵塞一切错误的源头。
比如我去年在做年度总结的时候就说道我现在放弃了投资个股，甚至一些主动型的基金。
不仅仅是因为去年亏了，而是因为我去年看了很多的投资的书籍，知道了投资个股要想一直赢，是一件极难的事情，需要考虑的东西实在太多。
那些金融公司的高材生，天天研究都不一定能保证能赚，甚至不一定能跑赢大盘，我一个一年就花几十个小时的人，怎么可能比他们强。
所以选择投指数基金或者做一些低风险的投资。
然后把更多的时间花在自己的工作或其他有意义的事情。
这就是认识到自己的能力边界的意义，可以专注于自己能做的事情。
二、要认识到我们知道的有限，能做的事情很少，然后把最少的事情做到最彻底 在上面已经明白了，我们要去积极的做自己能做的事情。
但是其实能做的事情也很多，比如我想做自媒体，我可以：
做公众号 做抖音 做头条 做小红书 做知乎 等等各种方式。
但是除了公众号，其他的平台我都是几乎没有经验，如果花挺多时间到其他平台上，那将是充满很多的不确定。
如果我每个平台都花时间去做，可能最终的效果就是每个渠道都没做起来，甚至公众号也垮了。
所以我今年还是重点发力在公众号上，去寻找确定性的道路，把目标缩小到具有确定性。
想要得到一切，不过是一厢情愿的幻想。
要认识到，并接受现实——我们所知道的有限，我们能做的事情很少，然后把最少的事情做到最彻底。
把最小确定性的目标实现，则运气上不封顶。想要的东西太多，则所得下不保底。
总结 第一句话告诉了我们要去知道哪些我们是不知道的，积极去做能做的。
第二句话是在能做的事情里去寻找确定的小目标，我们知道的有限，能做的也很少，把这少的、能做的事情做到最彻底。
剩下的交给运气就行了。</description>
    </item>
    
    <item>
      <title>如何正确的花钱</title>
      <link>/posts/2022/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%8A%B1%E9%92%B1/</link>
      <pubDate>Sun, 06 Mar 2022 22:00:00 +0000</pubDate>
      
      <guid>/posts/2022/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%8A%B1%E9%92%B1/</guid>
      <description>前言 今天阅读《华与华正道》，看到了跟花钱有关的两句话：
要舍得多花“冤枉钱”，这样碰上刀刃的概率比较大 钱最贱，人最贵，贵的人，时间更贵 感受颇深，特来解读自己理解。
要舍得多花“冤枉钱”，才容易花到刀刃上 经常父母会说：在外面不要乱花钱，要把钱花在刀刃上。
但是父母并没有说
「刀刃」是什么？ 怎么才能把钱花在「刀刃」上。 刀刃是什么？
刀刃是刀最锋利的一边，用来比喻关键处。
那其实把钱花到刀刃上，即为把钱花在关键处。
这个关键处，对于不同的人，不同的时期，关键处也不一样。
比如：
读高中的时候，关键处就是高考，那么花钱到刀刃上就是要把到合适我的练习题。 上大学的时候，关键处是为了找工作，那么花钱到刀刃上，就需要把钱买到合适的编程书籍、合适的编程课程。 对于可能快结婚的人，那么花钱就应该花在买房、准备结婚的钱，而不是把钱拿去投资、创业、娱乐。 所以，想要正确的花钱，需要找到自己当前最需要什么，然后根据自己的需要找到「刀刃」。
多花「冤枉钱」，是一个花到刀刃上的好方法。
如何把钱花在刀刃上？
答案是多花冤枉钱，这样碰上刀刃的概率比较大，就容易成功。如果想把所有的钱都花在刀刃上，那就根本碰不上刀刃，这人就没出息了。
我举几个例子就会明白了。
比如一些广告商，来公众号投广告，那么他们的刀刃就是把钱花下去了，就有转化率，有人报他们课。
如果他们抱着只要投了，就一定有人报课的心态去投的话，他们就可能花大量的时间跟金钱去研究这个公众号主转化率是否符合期望。
这样有两个问题：
时间风险，可能会导致被其他的广告给吸引走了，现在一般一个行业同类的会有好几个，不存在只有一家公司。 金钱成本，在去深度判断一个公众号是否值得投入，可能需要买很多工具，已经人力去分析，这也是很大的成本。 所以往往刚开始广告商都是简单的了解一下号主，然后先投一次再说，效果好的，再复投就行了。这样可能是会多花「冤枉钱」，但是没有让优秀的号主被遗漏。
再拿现在的很多公司拉新来说吧，比如注册邀请一个好友注册，奖励 20 元。
他们其实要的用户是长期用它们的 APP，并且可以在他们平台消费的用户。
但是要这样精准的用户(其实就是刀刃)，很难精确的筛选出来，去进行补贴吸引，所以只能多花「冤枉钱」，先铺量，再选优。
这样就明白了吧，想把所有的钱花在刀刃上，最终可能就是碰不上刀刃。多花点冤枉钱，这样在刀刃上的概率大。
钱最贱，人最贵，贵的人，时间更贵 书中是这么解释这句话的：
能花钱办的事，绝对不要花时间。能用钱办的事，绝对不要用人。能外包给别人干的事，绝对不用自己人。钱最贱，人最贵，贵的人，时间更贵。别人再贵，也比自己人便宜。自己人最贵，所以要加大投资培养自己人。
总结一下就是：按照贵重程度排序，人 &amp;gt; 时间 &amp;gt; 钱
当然，这句话我并不是完全同意，我同意他的理念，不同意他的绝对。
我身边有挺多人把钱看得太重要了，而忽略了时间成本。
有一次跟几个朋友一起从杭州到上海去参加一个隆重的校友会，我们都买的是高铁票，一个多小时能到；而有一个人买的是火车票，应该要三个多小时。
价钱上应该火车票会比高铁便宜一半。
当时我们就说你这在车上浪费的时间，完全不知道，这次出去我们就是为了玩的，结果大多时间都浪费在了火车上。
这个朋友当时完全不能理解时间比钱重要的思想，可能是从小节约用钱的思想根深蒂固。
最终就是我们到了上海之后玩了好久他才到，他到了上海，都快吃晚饭了，结果就是啥都没玩到，你说这亏不亏嘛。
如果你也觉得时间很重要，那就用钱去换时间。
比如：
你应该多花点钱让自己住得离公司近一点，而不是为了省钱，每天在通勤上花上 两三个小时。 短途出行，非高峰期，坚决选择打车。公共汽车、地铁路线虽多，但站站停，换车通常花太多时间。 付费学习，买书、买课程，买教练，不再世界上到处找免费的东西。 付费咨询：与其自己纠结，不如直接投资找个行业专家咨询建议。 常言道，年轻时用时间换钱，年老时用钱换时间。
时间是我们最宝贵的资产，趁年轻时不必要的小钱就别刻意节省了，分配出一些金钱兑换时间多做些自己喜欢的事情岂不是更好？
随着你养成了用金钱交换时间的习惯，减少找免费服务、便宜货。
不知不觉，你反而节省了时间和原本会被消耗的专注力。
总结 这两个花钱的观念我希望人人都能懂。
多花冤枉钱，花在刀刃上。 用金钱换时间，人 &amp;gt; 时间 &amp;gt; 钱。 </description>
    </item>
    
    <item>
      <title>聊聊关于如何选择offer</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/337/</link>
      <pubDate>Thu, 27 May 2021 08:57:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/337/</guid>
      <description>前阵子我们组大量招人，看到一些候选人拿了好几个 offer 摇摆不定，一直在纠结；也有不少读者私下跟我询问怎么选择；另外就是知乎上，我回答了一个 蚂蚁和字节怎么选的问题，阅读量比较高，所以也经常有人问我这个问题。
所以想写篇文章来聊一聊这个问题。
最多的就是字节和阿里怎么选 ♀️
我去年换工作的时候也拿了好几个 offer (蚂蚁、字节、滴滴、拼多多、酷家乐)，当时也有过一阵子的纠结，觉得这个公司这里好，那个公司那里好，现在回想起来有点幼稚。
关于我 我之前呆的公司是蘑菇街，一家比较年轻的公司，压力不大，每天基本认认真真敲个四个小时左右代码就可以完成工作，每天晚上大概 7 8 点下班。
在蘑菇街主要是做平台服务，主要是负责一些运营的后台系统，所以不存在着倒排需求，基本上都是正排，在完成自己的工作以后，就有大量的时间去学习一些新知识。
但是由于业务比较简单，所以很多新知识无法真正用到项目里，感觉自己的上限有所限制，所以一直有一个想去大公司，可以有更多可能的公司。
具体原因见： 离开蘑菇街后，我最近的一些想法
我是怎么选的 以下内容来自于我在知乎的回答：蚂蚁金服 VS 字节跳动的 Offer 怎么选择? - 桃翁的回答 - 知乎 https://www.zhihu.com/question/394340089/answer/1251264179
我之前也有过这样的迷惑，也是最近吧，由于公司裁人，逼得我不得不去面试，面过了五家不差的公司(蚂蚁、字节、拼多多、滴滴、酷家乐) ，除了拼多多都是杭州的，因为我目前是在杭州的，所以杭州岗位比较多。
当时在选 offer 的时候令我比较纠结的也是字节和蚂蚁，最后选择了蚂蚁，说一下我的选择逻辑吧，希望能给你一些参考。
1 . 薪资方面。阿里在 P7 以前的薪资是没办法和字节比的，理论上字节待遇会比蚂蚁好，我也是，但是很多人在字节入职即巅峰，涨薪比较少，我了解过，字节绩效好或者晋升才有涨薪，如果绩效仅仅是达到期望基本不会涨薪，但是阿里会有普调，所以如果干几年薪资应该会差不多。另外薪资方面就是年终奖的问题，据我了解阿里的激励会比字节激励的比较多，对于 3.75 加 高潜的同学年终奖将异常的高，而且还会有股票和期权。
base 上字节是好于蚂蚁，年终奖蚂蚁好于字节，总体薪资我觉得字节还是会优于蚂蚁的，毕竟字节还有加班费和房补。
背书方面。蚂蚁背靠阿里这座大山，我征询过我身边值得相信的一些大佬，大部分人还是觉得蚂蚁的背书是要大于字节的，就是觉得蚂蚁比字节难进，以后从蚂蚁出来和字节出来，蚂蚁更有优势一点。
团队方面。蚂蚁杭州总部，字节是分部。当时我在的团队 leader 是在北京的，我是觉得老板毕竟在北京，虽然每个月会来分部带两天，但是总归还是没有老板在身边这么了解自己，所以在绩效方面我觉得蚂蚁是有优势的。另外我在蚂蚁的老板是我上一家公司的老板，比较熟悉，也给蚂蚁加了不少分。
加班程度。蚂蚁很累，累的程度不必字节的大小周差。
我的回答可能倾向于蚂蚁一点，因为我的最终选择是选择了蚂蚁，所以会觉得蚂蚁更好，因为我工作年限也不到 2 年，所以更看重成长和背书，我觉得在蚂蚁带来的成长会比字节多。如果仅仅看重薪资的话可能直接选 拼多多 了。
如何选择 我们往往活在对未知的恐惧，害怕对未来预测的偏差，所以才不知道如何选择。我们往往什么都想要，或者说什么都不舍得放弃，所以才不知道如何选择。其实，只要我们清楚自己最想要的是什么，做减法就可以了。必须做减法，才能做选择。
可以这么去做：
行业、公司、团队、文化、城市、老板、工作内容、工作强度&amp;hellip;把你想得到的维度都列下来 然后就开始划除，一个个划掉。 最后剩下的那一到三个就是你真心不能放弃的，看看哪个机会最符合或接近符合，就是哪个。 每个人的境况不同，能做出的选择自然不同。所以，不要轻易地去为别人做决定，随意地去评价别人的决定。毕竟，你不傻，别人也不傻。
无论今年几岁，我们都要尽量做出属于自己的选择，即使这个选择不完全是自己的真心，但真心一定要有。
一些忠告 自己想要什么最重要。 刚开始工作 base 差个两三 k 不重要。 工作不久的成长很重要。 不要完全听别人的，包括你心中的大佬，别人的意见只能当做参考，不能作为答案。 选了就不要后悔，因为说不定其他选择也跟你想象的不一样。 如果能有多个选择，证明你在这个行业还是比较优秀的，但是也不要骄傲，当你到了跟你一样的公司去的时候，你会发现周边比你优秀的人不要太多。 最后希望每个人都能拿到满意的 offer，选择自己最想去的公司。</description>
    </item>
    
    <item>
      <title>理清业务团队开发和业务的关系</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/li-qing-ye-wu-tuan-dui-kai-fa-he-ye-wu-de-guan-xi/</link>
      <pubDate>Sun, 16 May 2021 10:16:31 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/li-qing-ye-wu-tuan-dui-kai-fa-he-ye-wu-de-guan-xi/</guid>
      <description>关于开发是否应该深入了解业务，听到两种我觉得不正确的类型：
「我是开发，我就做好开发就行了，业务交给产品和运营同学」。不懂业务，完全不想了解型。 「懂业务之后就可以跟产品 PK 了，方便砍需求」。懂业务，目的不正确型。 我的观点是要想当一个优秀的开发者，必须懂业务，不是为了跟产品 PK，而是为了预判未来的发展方向，好指导自己写的代码可以适应未来更久的时间。
懂业务，目的不正确型。 作为一个开发，不知道多少人经常会在耳边听到这么一句话：多了解业务，多了解业务。
但是大部分情况下并没有告诉你为啥要了解业务。
可能有些人心里会有这么一个答案：懂了业务可以在需求评审的时候可以跟产品 PK，指出他的需求不合理，然后给出一个合理的方案，这就是你对于业务的价值，然后就可以体现你的业务思考了；另外对于你觉得不合理的需求，还可以砍掉。
这是我听到最多的关于为什么开发要懂业务的观点了，我以前也是这么认为的，但是当我真正的作为一个业务 owner 之后，逼得我不得不去了解业务，我才觉得这个观点不完全对，方向都是错的。
上面观点的核心目标就是跟产品 PK，把产品作为开发的敌人去看待。现在网上很多这样的调侃，产品和程序员是对立的。
在产品的眼里，程序员天生就是爱砍需求。
而在程序员的眼里，会因为不会砍需求被老板教育，不要啥需求都接，要学会砍需求。
实际上，懂业务不是为了去指导产品设计，而是为了预判未来的发展方向好指导自己写的代码可以适应未来更久的时间。
懂了业务之后是去发现前端的“价值点”，不是为了跟产品 PK。。。。
你如果去指导产品做产品，反过来想想如果让产品指导你做开发，那能靠谱吗?
我很赞同玉伯说的专业度的问题，作为开发就是要在开发的专业度上表现出来，效率让产品业务都觉得不可思议。而不是让你的产品、业务能力表现出来让他们觉得不可思议(不是不行，但是这样很难，先把自己专业的搞好再说)。
不懂业务，完全不想了解型。 另外还有一些是基本不怎么了解业务，就喜欢专研技术，这种想法基本是工作年限不超过三年的同学。刚毕业，对业务没有什么感知，觉得做技术的技术才是王道，整天喜欢研究各种新技术，处于一种被动接需求的状态。
这种情况就很容易在晋升的时候无法说清楚业务价值，到底自己做的东西有什么用，给公司带来了什么价值，因为在做需求的时候本来没有去思考过业务价值，所以没办法形成闭环，仅仅只是零散的需求。
实际上，我们应该这样做，在业务的背景之下，我们可以主动的**发现问题、定义问题、解决问题、优化效果，拿到结果。**这才是创作个人业绩的正确路线。
如果不懂业务，怎么将技术放到业务里去？不放到业务里去怎么体现技术的价值？
你不能光讲我做了一个什么东西，这个东西多么多么好，这个业务价值如果没有体现出来，那就是没用的。
总结 上面分析了两种思维模式的差别，以及我觉得正确的思考方向。
作为一个在业务团队的开发者，我们做一件事的时候，需要时刻提醒自己，要想清楚三个问题：
弄清楚，为什么做这件事？做这件事的价值是什么？ 去思考，如何做这件事？ 完成后的产出是什么？明确衡量标准。 你们觉得作为一个业务团队的开发，业务和技术的关系应该是什么样的呢？</description>
    </item>
    
    <item>
      <title>在蚂蚁工作是一种什么样的体验(一)</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/2021-03-13-%E5%9C%A8%E8%9A%82%E8%9A%81%E5%B7%A5%E4%BD%9C%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%80/</link>
      <pubDate>Sat, 13 Mar 2021 14:49:27 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/2021-03-13-%E5%9C%A8%E8%9A%82%E8%9A%81%E5%B7%A5%E4%BD%9C%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%80/</guid>
      <description>大家好，我是桃翁！ 之前有小伙伴留言让我聊聊「希望聊一些在大厂工作是什么体验，想听如何融入，如何适应，如何成长的规划，遇到过的哪些比较棘手的问题和怎么处理的，期待」。
他这里这么多问题，我准备每个问题都写一篇文章来聊，首先咱们要聊的就是「大厂的工作体验」。
身边牛人多 可能很多想去大厂的同学，第一驱动力觉得大厂肯定很多大佬，然后进去了可以带带自己。
其实这句话不全对，也别抱太大希望，进来了可能跟你的想法是不一样的。 我的体感是：前半句是对的，大厂里确实很多牛人，但是不会带你的，或者说不是你想象中那么带。
在阿里这边一个新同学刚进来的时候，会在组内分配一个师兄，来协助你顺利度过试用期。但是不是那种事无巨细的关注你的那种，大部分时间师兄每天也很忙，一个新人来了还要帮你解决问题，所以师兄就会更忙了，所以师兄主要是帮你解答一些问题。
再说说身边其他的牛人，牛可以很多方面的：
比如 学校牛，在杭州这边浙大的比较多，我们组才 12 个人就有三个浙大的，还有在国外上大学的。
网红，可以接触到很多之前只能在知乎、或者一些大会里才能看到或者听说的一些大牛，来了之后就可以见到，甚至面对面交流，每次交流都会受益匪浅，比如我在蚂蚁体验技术部就可以接触到玉伯、偏右这种超级前端网红。
技术牛， 不管是 P5、P6、P7 哪个层级的，你都会发现每个人在一个甚至多个方面技术很厉害，说两个我们组的 P5，工作才一年多，早已经是 React 或者微前端方面的专家了，更高层级的那就更不用说了。
总之，大厂里有非常多的优秀的人，意味着你有很多可以学习的榜样，如果有一些技术上的问题，以前可能只能在开源项目的 issue 上提问，现在你可以通过钉钉甚至直接面对面的进行交流。
但是我还是秉承着一个观点，身边的人优秀，并不意味这自己优秀，也没人会主动带着你变成优秀的人，需要自己主动去跟他们学习，让自己成为别人眼中优秀的人。
做项目成就感强 既然是大厂，不管是员工和用户相对都比较的多，做的东西反馈也会很多，不管是好的还是差的，都能感觉到有很多用户在使用，能感觉自己再为这么多人服务，能获得价值感。
像我现在做的项目虽然是给内部小二(小二就是内部员工)用的，但是每天 UV 也有好几千，PV 也是上百万的，这跟我之前在上家公司做的内部系统就不太一样，之前做的东西不管好还是不好，没有什么人反馈，所以总是在找需求做，做出来也不知道有价值，存在感就比较低。
如果能做 C 端用户的项目，比如像五福、双十一、双十二这种运营活动，虽然过程很艰苦，但是我相信做完了之后一定是满满的自豪感。
做项目的成就感就来自于给自己、给别人带来了价值，能服务别人，如果你感受不到这份价值，这个项目估计不久就凉了。。。
压力大 我以前在蘑菇街的时候每天正常作息上下班，基本没在工作上感受到过压力。
但是在蚂蚁无处不在的压力，有时会把自己压得喘不过气，不过大部分时候会把压力当做动力，努力向前。
一方面来自于项目压力，据我了解，在蚂蚁的业务团队相对于技术团队来说会忙一些。我们组现在主要是做业务，我们这边发布频率基本上一周一个迭代，一个迭代里可能还包含好几个需求，布频率极其高，项目周期又都很紧。
偶尔还有项目紧急到需要倒排工期，就是不管你怎么搞，就是要在某一天上线。
另外一方面来自于周围同事压力，前面也说了，周围的牛人很多，每个人身上你都能发现比自己优秀的地方，比自己级别低的、一个级别的要想着不要被别人超越，比自己级别高的，需要考虑怎么才能跟他们一样优秀。 对于项目压力大的正反馈就是逼着自己去做一些可以提效的技术方案，对于周围同事压力正反馈就是逼着自己去像他们学习，让自己变得越来越优秀。
后记 这次主要聊的是环境和项目上的感受，下一篇会介绍一些关于技术上的一些体验。如果你之前没呆过大厂，你可以聊聊你想象的大厂是什么样子。如果你之前在待过，或者现在正在大厂里，可以聊聊你的感受是什么。
同一个环境可能由于自己的心态不同，感受也会有差别，我只是分享我的感受，希望给你带来帮助。</description>
    </item>
    
    <item>
      <title>桃翁2020年度总结</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/326/</link>
      <pubDate>Sun, 24 Jan 2021 19:19:06 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/326/</guid>
      <description>前言 2020 年真的是不平凡的一年， 疫情夺走了很多人的生命，还夺走了我的工作(公司因为疫情被迫裁员)，所以今年换了工作来到了蚂蚁，在蚂蚁的工作经历跟之前在蘑菇街完全不一样。。。
工作 来蚂蚁这半年我觉得在工作上的成长比我之前在蘑菇街一年半的成长都还多，经历比较丰富。
阿里一直都有拥抱变化的文化，我来大概五个月的时候就换了三个主管，经历了好几次的组织架构变动，我刚进来的时候同组的同事（之前组内大概 12 人）到现在还跟我一组的仅剩一名。
不过随着每一次的变动，我的分工也越来越清晰，从最开始哪里缺人就去哪里，再到负责一块模糊的业务线，再到一个人带着 3 个合作伙伴负责一整个业务线，再到现在有了 3 个正式加 6 个合作伙伴的阵型。
作为整个业务线的 owner 不仅要接需求还要去预测业务未来的走向，这样才能在技术上做好提前的准备，当业务真的来了，才能快速的支持。这个是我在试用期答辩的时候面试官给到我的期望，这个我在之前试用期结束后有写过。
原来我是个业务性选手？？？？
只不过那个时候我只是觉得这个话说得很对，并没有体感，但是当我在负责整块业务的，以及带着一群人在做的期间，作为业务 owner 必须得去思考这些了，因为我们这里业务发展得很快，虽然我们业务团队成员变多了，但是需求也越来越多，所以如果不提前去做一些业务上的预测，技术上的沉淀，当业务发展再快点，需求再多一些我们目前的这些人就消化得很吃力，甚至吃不下，这是我今年非常大的一个收获。
对于这个收获其实我之前想过我为什么可以得到，我刚开始把原因归结到了运气，因为我能有机会负责一条业务线的东西是由于我的师兄以及其他大部分同事都走了，现有的业务只能由留下来的人去承担，所以我当时想到了那些得到晋升或者 375 的同学是不是运气好，可以做到好的业务或者技术。但是又细想如果机会给你了，如果没有把它当机会，而且他这块重重的东西当做负担，或者平常心看待，可能也做不出什么优秀的成果。
但是一件平凡的事情如果交给一个优秀的人去做，大概率还是会做出优秀的东西。
所以最后我得出的结论是运气可以让一个准备好了，有实力的人加速成功，但不会让一个平凡的人获得成功。
学习与写作 当我在准备写总结的时候，我本以为今年读的书(去年 20 本)会比去年要少，没想到今年还略多一点，读完的都有 29 本了，但是我明显能感觉到今年花在读书上的时间变少了，特别是在入职蚂蚁之后，属于自己的时间更少了。
我想可能是渐渐的找到了读书的方法，越读越快了吧。
下面是我今年读书列表：豆瓣主页
在写作方面今年公开文章产量就很低了，只有 13 篇，基本都是上半年写的，下半年入职蚂蚁之后就基本没怎么写了，一方面是因为确实工作太忙了，另一方面需要在公司内部写不少的文档。
文章列表见博客：前端桃园
技术 很遗憾今年对技术没有做什么深的研究，主要是业务太忙，把我对技术的追求抹平了，整天就想着如何能把业务支持下去。
来蚂蚁半年没写过 React，大部分时间写钉钉小程序和支付宝小程序，另外还写了将近两个月的云凤蝶。
在我没怎么接触过小程序前，对小程序有刻板的印象，总觉得小程序限制太多，很简单，没有什么意思，当然也不知道其原理，所以对小程序比较抵触。
但是当我写了两三个月之后，对小程序了解得越来越多，但是另一方面发现自己对小程序了解得越来越少，为什么这么说呢？
当我还没怎么接触小程序的时候可能想到的就只有 小程序的语法是什么样的，小程序是怎么运行的，但是写得越来越久，发现自己以前的视野太小了，整个小程序生态还有很多东西可以去研究，越写越发现自己不会的越来越多，这些不知道反而让我对小程序产生了兴趣，感觉可以有新的东西值得去研究。
比如小程序他是怎么运行的，跟原生、H5 之前的区别在哪里，关联是什么，view 层是怎么渲染的，逻辑部分的 js 是怎么执行的，与客户端，容器是怎么通信，怎么打包的，怎么编译的，编译出来的东西又是什么，怎么发布上架的，以及什么情况下使用小程序技术栈、什么情况下使用 h5 技术栈，等等等，这些没有搞明白的问题深深的让我对小程序产生了兴趣。
所以明年在技术上的一个目标就是深入小程序。
生活 家人 生活方面最令我开心的就是女朋友在 11 月份从上海辞职，来到了杭州，结束了 3 年的异地恋，每天下班后有个人在家里等的感觉真好！
旅游 西安旅游
国庆去西安旅游了，在去西安之前我们还先去南京溧水参加了【咪豆音乐节】。这次是准备得最充分的一次，还做了一些攻略。
重庆 Outing
重庆三峡博物馆
江景：重庆洪崖洞夜景</description>
    </item>
    
    <item>
      <title>原来我是个业务性选手</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/324/</link>
      <pubDate>Sat, 12 Sep 2020 21:22:24 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/324/</guid>
      <description>01 前几天我试用期转正答辩了，老板也给过了，给到我的评价大概是：业务型选手，接下来一两年很关键，如果能够在业务中深入挖掘，会是个好苗子，否则就比较平了。
这个评价其实我还是没想到的，或者说我之前根本没想过结果。
其实我从大学毕业以来，都觉得自己是个**技术型选手，**之前在蘑菇街的时候我也是按照技术路线走的。在蘑菇街的时候工作不是很忙，所以也有时间去研究技术，也乐于分享然后才经常写文章，才做了公众号。
02 不过在我年初的时候，我对技术的追求稍微弱了一点，这是在蘑菇街的时候准备晋升答辩过程中的一些变化。我的前辈呀、主管呀、HR 呀，在我准备 PPT 的期间都不断的给我灌输，你做的东西到底有什么业务价值？
在这期间，我的 PPT 找了好几位前辈包括自己的主管都 review 过，也给他们进行试讲，每次的给到我的建议都会有，要注重业务价值。
之后我的脑海里就深深的有了这么一个意识，技术是为业务服务的，技术的价值源之于业务的价值，而不是技术本身的价值。
所以我在后面的工作中，会更注重业务价值，在做需求的时候不再去追求高大上的新技术，热技术，而是花更多的心思去问这个需求的背景，能解决什么问题，能为用户带来什么价值，能给公司带来什么利益。 **
03 没想到我把这个意识也带进了蚂蚁，在蚂蚁的工作是非常忙碌的，我后面会写文章记录一下在蚂蚁有多忙，但是现在我只想说一点，反正忙到没时间去折腾新技术，注意是折腾不是学习，因为我在蚂蚁做的东西对于我来说，一直都是新的技术，但是没有时间去专研，学习新技术是为了完成需求。
在答辩的前三天我还在跟我的老板说，业务太忙了，没时间写总结了，目前只写了一个总结的目录(可能就 50 个字左右)；老板跟我说，在 9 月 2 号前一定要提交总结，不然系统会自动试用期不通过，在那时我快要崩溃了，项目这么急，哪有时间写总结呀，还要答辩。
真的是抽不出时间来写总结，每天加班到凌晨两三点，回家就想睡觉，根本没精力写。
在答辩的前一天晚上，大概 8 点多的时候，其他伙伴在工作的时候，我就抽了大概一个半小时的样子按照我之前的目录写完了，感觉写出来毫无亮点，看起来就是自己的血泪史。反正就当完成任务了，明天毕竟要答辩了，不可能啥都没有吧，然后写完继续改 bug。
那天我也回去得比较早，大概 12 点回去了。在这个点其实还是有点精力的，我就寻思着，我感觉自己写的总结很 low，没有亮点，给面试官留不下太多的印象。
04 回来之后我就思考怎么才能让面试官觉得我做的东西有价值呢？想了半天没想出来，但是突然想到一个点，我当时不知道这个点该不该讲，但是我很想讲，那就是我现在所做业务的大图。我们整个组都在做一个叫 xx 的项目(应该说是一个很大，很复杂的业务，是很多的项目)，每个人都负责其中的一块，我刚开始来的时候就对这个项目很好奇，因为我完全不能理解 xx 这个项目是一个什么样的项目，是用来干啥的。
甚至在我已经做了两个月的项目之后，我也仅仅只对我自己做的这块了解，对其他的人做的东西不知道有什么关联，但是我还是知道跟我肯定是有关联的，所以其实一直处于一种比较难受的地步，因为我不知道这个项目到底有多大的价值。
直到我在第三个月做了另外一部分的需求之后，我才慢慢的了解了这个 xx 项目到底是个什么样子的，我们的目标是什么，我们要做成什么样子，我们现在已经有了哪些能力。
那几天每天上下班的路上我就在思考这些东西，真的是每天想，后面终于想清楚了每个人做的东西之间的关联，感觉很舒服。
我觉得这个东西对于我来说价值很大，虽然他是纯业务的，或者说根本都不是我一个人做的，但是这真的是我的收获，所以我觉得站在更高的视角去介绍我们组现在做的 xx 业务，我就画了整个业务架构图，包含了我们组每个人所做的业务以及他们之间的关联。
然后就去介绍整个 xx 业务的背景，能解决什么问题，能为用户带来什么价值，能给公司带来什么利益(是不是觉得似曾相识)，最后再去介绍我做的东西在整个大图的意义的时候就很容易了。
在答辩的时候我差不多一半的时间都在讲这个，最后也给面试官留下了深刻的影响，说我提供的视角让他学到了新东西，他之前从来没有这么想过。
05 最后面试官给到我当面的评价也说到了我是一个善于思考的同学，喜欢去专研业务，还有其他的好的坏的评价，已经记不得了。
但是最后老板给我的试用期总评里直接说道我是一个**业务型选手，**这是我没想到的。但是我从他的评语中还得出，我在技术上的研究不够，如果后面我不深入业务的话，技术也没研究，那就真的很平了。
我后面多次思考了一下，我到底应该去做一个业务型选手还是技术型选手呢？我目前的答案是我应该去做业务型选手，因为我的理想是去创业的，感觉业务型选手更适合创业，如果以后想去做 CTO 啥的，还是选技术型选手比较好。
06 想一想你们自己是想做业务型选手还是技术型选手呢？欢迎在评论区说出你们的答案，最好能带上理由。</description>
    </item>
    
    <item>
      <title>离开蘑菇街后，我最近的一些想法</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/317/</link>
      <pubDate>Thu, 30 Apr 2020 16:19:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/317/</guid>
      <description>前言 被裁之后我就一直在家复习，面试，所以就一直没有写文章，没有太多心思搭理公众号，现在也拿了两个 offer 了，所以开始回到正途。
胎死腹中的 Vue 3.0 Beta 文章 4 月 17 日，早上我收到了浪浪(浪里行舟)的消息，给我发了一个微博消息，尤大在微博上宣布发布 Vue 3.0 Beta 了，然后跟我说这是热点，让我写一篇文章，我就暂停了前一天晚上定时发的文章，准备写一篇详细介绍 Vue 3.0 Beta 所发布的东西。
所以当天我早早的来到了公司，希望在上班前能搞定，然后就开始翻阅 vue-next 的文档以及草案，想从根源去探究 vue 3.0 Beta 能给我们带来什么。
没过多久，在我们技术部的群里有人就 @ 了所有人，让我们去看下邮件，邦哥(化名)发了一封邮件，每个人都要看一下。
我由于还在写文章，收集资料，就没那么快去看邮件，不一会儿，突然安静的 9L 就开始叽叽喳喳，议论纷纷，这时我感觉应该是一件大事儿。
我就迅速打开了邮件，第一段就描述着公司在今天要优化 140+ 的人，第二段描述着公司的核心方向，直播和品牌特卖，在这个时候，我已经能意识到，我可能要被优化了，也许我们组绝大部分人都会被优化，因为我们组基本是做内部系统的，跟核心业务极大的偏离。
我也加入到他们叽叽喳喳的氛围中，放下了手上所有的事情，和旁边的同事讨论着裁员的事情。
被裁 大概在十一点左右的时候，我左手边的一个应届生小声的说，我凉了，HR 让我去 11 楼一趟，然后我将这个事情传达给了我们的一个小群，以及我对接的后端，并询问他他们组的情况。
没想到聊着聊着，他跟我留下了一句，我中了，我先上去了。
接下来就眼睁睁的看着身边的人一个一个的都被喊上去，从工作一年的到两年的(包括我)，再到四年的，以及更多的。
到中午的时候，我们组只留下一个人没沟通了，是一个工作了四年多的老员工了，就坐在我旁边，他很慌，因为大家都拿着赔偿金(n+1.5)，他也想有。
一直等到一点、两点、三点、四点，五点，他放弃了，成为了我们这层楼我们组唯一个留下的。
后面就开始办理离职手续，交接项目，晚上我们整个前端到旁边的修舍酒店进行聚餐，虽然离别时悲伤的，但是被裁的人拿到高于常规的赔偿，是幸运的。
这次裁员对于应届生来说是最惨的，他们工作年限不久，不到一年，对于社招来说，是非常的吃亏的。工作年限不够，而且整个大环境来说又不好，现在又被裁没有工作，大公司很少会招工作年限这么短的，去小公司又有可能被压价。
唉，不想写这些消极情绪的了，在这被裁的两周里，空闲下来我也思考了很多，接下来说一些我的见解，希望能给到大家帮助。
定时更新简历 之前我在知乎上看到一个 HR 的回答里面说到，不管你跳不跳槽，其实都可以定时更新自己的简历。
我是比较赞成他的说法的，我倾向于半年更新一次简历，因为在更新简历的过程中你会去思考，去总结你在之前的这半年里，你做了什么有价值的东西，有没有什么亮点。
一旦发现在这半年里没有做出什么成绩，那么你也许需要在后面的时间里调整自己的工作方式，思考为什么没有值得写在简历里面的东西，然后给自己定目标，做规划，尽量在半年后可以有一些亮点可以跟别人吹。
多做总结 总结这个东西，其实每个人都会觉得应该做，但是很少人真正的去执行，也许是因为太忙，也许是因为懒，也许是因为觉得他不重要。
我相信很多人会有这样的感觉，当别人问你做的项目有没有什么难度，在做的时候遇到了什么困难，以及怎么解决的。你会感觉都已经做出来了，感觉没什么难的了。
其实在我看来，这其实就是没有及时的总结导致的。
我的建议是当你遇到难题并解决之后，马上记下来，因为这个时候是你最有动力，也是最清醒的时刻，一旦你想后面有空了再记，那么基本上就是不会记了。
另外就是每个项目完结之后也需要进行总结，遇到的问题，项目的架构，项目的价值等等，这些东西是以后可以跟面试官聊项目的资本。如果不记下来，当你写简历的时候，很可能会把关键的地方忘掉。
忙一点的公司挺好 可能对于这一点很多人会觉得我政治不正确，觉得理想的工作不应该是朝九晚六，到点下班么。
但是我最近在观察那些发展得好的企业，加班都比较严重，比如阿里、腾讯、字节跳动、拼多多等，当然这些公司都会给你更高的薪水。
为什么我会绝对忙的公司其实挺好呢？主要是因为公司发展迅速，意味着就会扩大生产，那么就需要更多的劳动力，但是对于招聘合适的人又是一个急不得的事儿，所以留在公司的人可能会很忙，得干超出正常一个人所干的事儿。
这样其实你可以有更多需求做，也许是重复的，也许是新的东西，不管怎么样，一旦你代码写得多，你能更可能发现到别人发现不到的痛点，也会给公司做更多的贡献，其实对于成长是有帮助的。
可能有人会觉得我只是一个打工的，在规定的时间把东西做完，下班时间再去学习，其实这种方式对于大部分人来说不是特别的高效，因为学习这件事其实是反人性的，下班了也许你更多的时间会用于其他娱乐中。
再说一下对于比较闲的公司，也许很多人都想去，比如外企，相对国内的大厂来说要轻松很多，但是闲的公司很容易让人养成懒的习惯，特别是对于工作不久的，一旦养成了懒惰的习惯，就会危害自己一辈子。
我希望这一点不要跟我争论，如果你希望去不忙的公司，你去就行了，也不用说服我。</description>
    </item>
    
    <item>
      <title>读者问题|关于如何学习的讨论</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/299/</link>
      <pubDate>Mon, 13 Jan 2020 23:23:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/299/</guid>
      <description>一个读者的困惑，我做了简单的解答，希望能对他有所帮助。
## ##1. 如何把一个知识由浅入深的学习？
见问题 2
##2. 那些写技术文章的作者，为什么对某一知识或某一框架理解得那么深入，是如何学习的呢？
我觉得有以下几点：
使用的多，踩得坑多，经验丰富。 花时间深入研究过原理。 思考过这个东西的价值以及为什么会出现(这个点很容易被忽略，我的那篇从历史的长河中聊虚拟 DOM 的意义就是这个点)。 思考过这个东西能给自己的业务带来什么帮助，然后紧密的结合到自己的项目中。 如果你觉得这几个点感觉你都懂，那我问你几个问题，比如你在你们公司想引入 React 来做项目。
问题一：你为什么要用 React？ 问题二：用 React 能带来什么好处？ 问题三：如果用 Vue 或者 JQuery 能行吗？ 问题四：React 适合哪些场景？哪些场景又不适用？ 问题五：你觉得 React 存在的意义是什么？ 问题六：React 有什么缺点？ 问题七：你觉得引入 React 会有什么成本，收益和成本如何进行平衡？ 我想表达的是在学习一个东西，或者说想深入一个知识，不仅仅知道它是什么，怎么用，还要去了解它为什么会产生，能带来什么价值，解决了什么问题。这样在你判断是否引入这门新技术才有充足的理由，否则就是追风，看到这个东西比较火，可能你根本就不需要，然后引入了反而给自己增加负担。
在你想知道它解决了什么问题的时候，可能就会思考为什么它能解决这个问题，然后再去寻找这个答案的时候就会深入他的原理，加上自己大量的实践，慢慢的就成为这个东西的专家了。
##3. 什么时候去接触和怎么去学一些规范文档？
我想你说的规范文档应该是官方文档这种吧，然后下面讨论的都是基于官方文档。
官方文档我一直是把它当做完善我知识体系的东西来看待的，而不是入门教程。毕竟官方文档是给所有人写的，不管你是没使用过的，还是使用过很长时间的，所以就导致大部分的内容都是比较官方的，所以就导致不一定适合你。所以才有了各种各样的教程，因为每个人的所拥有的知识不一样。
另外官方文档也不会告诉你哪个知识点重要，哪个知识点常用，它只会告诉你有这个东西，这些东西都是需要在实战中去得知。
特别是对于 CSS 标准，或者 Javascript 标准这种，不到万不得已是不会去看的，东西又多，又不适合新手阅读，但是在你看到网上有不同答案的时候，就非常适合去看标准，平时就看看书、看看博客、看看视频教程就行。
4. 如何处理网上的技术文章以及实体书？ 我觉得首先要明白文章和书的区别是什么，然后才能正确的去使用他们。
我们一般对书的认知是对知识成体系的介绍，书是比较的全，是对整个知识比较全面的介绍，另外由于写书比较的耗时，所以往往书里面的内容都是晚于知识点出来很久的，比较适合那种很久不会变的知识。
知道了书的特性，那么我们何时需要去读书呢？
我觉得应该是在你想打造或者说完善你自己的知识体系的时候就一定要去读书，特别是像那种《xxx权威指南》这种，就特别的适合用来完善知识体系的。
但是一本书不可能把方方面面讲完，都是会有侧重点的，就拿学习 JavaScript 来说，想学好《JavaScript高级程序设计》又称红宝书、《JavaScript权威指南》又称犀牛书是不应该绕过的，那么这两本书又有什么区别呢，这两本书都很厚，理论上讲得都很全。
这两本书都会把 JavaScript 最重要的东西肯定都是会介绍的，但是红宝书侧重于程序设计，相对来说比较注重实战一点，所以对于原型、继承这种在程序设计方面较多的知识点会用大量的篇幅，然后举很多的例子，这样更利于我们的程序设计。
而对于犀牛书的话他的侧重点在于权威，那么他的侧重点就在于全，要比所有的 JavaScript 的书都介绍的更全，相对来说比较偏理论。
因为每本书都会有自己的特点，就是侧重点不同，所以在看实体书的时候就要看自己需求，如果想提高自己的程序设计能力，就看红宝书，如果想查漏补缺，看看自己是否对 JavaScript 全面了解，就看犀牛书。
其他的书也一样，对于技术书我一般的习惯都是带着目的去看，而不是像一些消费型的书随便翻。
再说说技术文章，技术文章他的特点就是可以做到很新，但是质量参差不齐，而且很容易传播错误的知识。</description>
    </item>
    
    <item>
      <title>如果解决虚度时光，首先做到要事第一</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/270/</link>
      <pubDate>Thu, 07 Nov 2019 21:51:07 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/270/</guid>
      <description>阅读文章之前你可以花半分钟想想你觉得你自己最虚度的时光是时候？
夸自己 可能在很多人的眼里，我以及算是一个努力、上进的人了，那是因为他们只看到了我努力的时候，没有看到我虚度的时候。
一般在工作日我还是非常的恪守自己的原则，在不上班的时候都会提升自己，比如看书、听课、阅读、写作等方式。跟一般的人比起来更努力的点就是早上我会先学习一个小时，我一般 7 点半就会起床，然后看书或者听课一小时后，也就是 8 点半的时候才会去洗漱，下班回来也很少除了和女朋友每天至少视频半小时外，其余时间用得都很充分(用的方向对不对先不谈)。
虚度 接下来就说到重点了，虚度的时光。
我觉得我最虚度的时光就是周末，本来会有充足的时间来学习，但是当打开电脑突然不知道应该干什么(这个时候非常的难受，经常在这个时候想做人的意义是什么)，然后就去看书，看了一会儿还是会觉得无聊，然后就说打会儿游戏吧，我一般有个习惯就是一直会打到输才会停止，往往经常又是连赢好几把，导致有可能一打就是一上午或者一下午过去了，然后就去做饭吃。
一旦到晚上七八点的时候，那个时候突然又觉得学习的奋劲儿又来了，然后会认真看书，看课程写文章等自己觉得对的事儿。然后就开始感叹自己白天的时间又浪费了，晚上再来补，那我们重庆人的话来说就是：「早不忙，夜慌张」。
为什么 很好奇的是为什么工作了才会出现这种情况，而在高中大学没有出现。
在高中的时候，我们大家的目标非常明确，就是考大学，每天要做的事情就是看书，做题就行，目的很明确，要做的事情非常的清晰，所以不会有这种不知道该干啥的情况。
到大学的时候我长期呆在实验室，每天 11 点才到寝室，然后觉得自己应该放松了，就玩玩手机，聊聊天是应该的，这在我的大脑里是应该做的，到了周末的时候，我也觉得应该放松，所以在放假之前已经给自己订好了周末要做的事情，会出去玩，或者打游戏等。
我觉得我就是没做好《高效能人士的七个习惯》里的要事第一。
有兴趣的话我也可以写写这本书的读后感，这本书是今年我读的书里收益最大的书。
相信要事第一还是不难理解，就是把最重要的事情先做。所以首先我应该找出对我来说最重要的事情，然后我没找出来，或者说我没去认真思考对于我来说最重要的事情是什么，导致我有空闲的时候不知道应该干什么，因为想干的事情太多，导致觉得都不重要，你想想你会不会有过这样的感受。
我再说一种情况，我觉得大部分人也有过这种经历，在工作日的时候想做的事情很多，然后把原因归结为上班太忙，所以在工作日不做，准备打算到周末去做，然而到周末了，往往又由于想做的事情太多，导致最后不做了。
然后我回想我工作以前为什么没有这种状态，感觉每天都知道自己应该干啥，就算是打游戏也知道自己该打游戏了。
如何解决 这些都是没有做到要事第一的第一步，找出最重要的事情。
那么如何找到最重要的事情呢，我觉得一个很好的方法就是「做减法」。做加法谁都会做，想到什么事情就忘自己的待办事项或者大脑里面加就行了，但是这样就会导致要做的事情越来越多，最后太多了，然后都不做了。
如果做减法我觉得可以用《搞定》书中的 GTD 方法来帮助我们完成，相信很多人对 GTD 的印象只是存在于写 Todo List，然后把做完的事情标记为完成。其实这只是其中的一个小步骤，GTD 最核心的思想是想通过工具把事情从我们的大脑里面清空，让我们的大脑能专注做一件事情，而不是在做某件事情的时候，又想到其他事情没做，这样就会分心，效率就会大大的降低。
GTD 会有五个核心步骤：收集、处理、组织、检查、做。其中收集的作用就是把你的想法从大脑清空，通过工具帮你把想法记下来，处理过程就是我们做减法的过程，将一些不重要的东西给丢掉。
如果有兴趣，GTD 后面我专门写一篇文章来介绍，非常有效的一种习惯。
丢掉之后还有一些你需要的做的事情，然后再把这些需要做的事情再去认真思考什么事情是最重要的，然后再去做。
总结 文章写了为什么会有虚度的感觉，然后为什么会产生虚度的感觉，然后结合 GTD 给出了解决方案，希望能给你带来启发。
希望你在留言区里留出你什么时候会最感觉自己虚度了，然后又是怎么去解决的呢？</description>
    </item>
    
    <item>
      <title>看到这段话，真的觉得现在的读者要求比较高</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/255/</link>
      <pubDate>Mon, 09 Sep 2019 21:35:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/255/</guid>
      <description>最近看到这样一段文字，然后掘金的运营还发了一个沸点，看了心理觉得真不是滋味呀。
图片具体内容如下：
如果你在阅读文章的过程中，觉得有不同意的，请憋住，把文章看完再说。
现在的作者写个文章太难了呀。
写个文章还要被喷写得不好，写得不够有深度要被说没有干货；
写得有深度的又有人说看不懂，这怪作者吗？
咋不怪读者要求太多，自己看不适合自己的水平的文章，自己知道的东西就觉得人人都知道，却不知道在中国随便一个你觉得理所当然的小知识点，或者说常识，都会有至少 1 亿人不知道。
很多人在评论里说现在很多面试文章，或者 list 文章没啥质量，然后获赞很多，然后自己辛辛苦苦的写的干货没人点赞，在这个社会不是很正常么，想想马云工作的强度和在工地里工作的工人相比，工人不努力吗，难道不是辛辛苦苦吗？但是赚钱的差距就是这么大，这个社会就是这么现实，归根到底工人所做的工作价值太少了，为什么有些干货价值少，请继续阅读。
##面试题和 list 文章 VS “所谓的干货”
说说为什么面试题和 list 文章，面试题和 list 解决了什么问题？
为什么会有这么多人习惯给这些文章点赞，我觉得最主要的一个原因是缓解了读者的焦虑，第二个原因是仅仅是为了收藏。
缓解了读者的焦虑
对于面试，肯定是永恒的话题，总想着换个好公司，涨工资，但是自己又太菜，想着有没有什么捷径，想了想，刷面经吧，刷了就等于会了，会了就等于能进大公司了。这种心理就跟买课一样，买了就觉得会了，然后生怕错过什么技术，买了一大堆，结果每个课程就只看了前面的开篇就没下文了，你能说这些卖课的不对吗？是你自己不看，能怪别人么？
然后说道别人发面试题，就想分享给大家，毕竟面试题往往都是对于前端开发来说比较重要的东西，是可以给你不仅是面经方面的东西，而且对于刚入坑前端的来说，不知道应该学啥，什么东西重要，什么东西应该先学什么的一个方向。
收藏
list 愿意点赞的往往是想收藏，然后可能是设计的原因，不管是哪个平台都一样，把点赞这个功能做得特别的容易，而收藏就要繁琐或者说不那么让用户想去点。
然后给大家一个建议，收藏这功能真的比点赞好用，可以对文章进行分类，自己可以梳理你的知识体系，然后建好分类，然后再分类收藏文章，这比起你点赞了，然后后面想去看的时候发现太乱了，又不好找，就给你不看文章找了个借口，导致点赞了一大堆，最终有收获的并不多。
我觉得在收藏这方便来说，个人觉得思否做得比掘金好(思否小姐姐是不是要给我广告费了)。
所谓的干货
干货这个词我的理解就是有价值，如果这篇文章对你有价值，那么就是干货，没有价值，你可能就会觉得是水文。
注意，我这里说的是对你有价值，才算是干货。因为一篇简单的文章，对于新手来说有价值，那么他觉得这篇文章就是干货，对于一个老手来说，几年前都会的东西，那么他可能就会觉得是水文。
所以，上面说到什么「浅谈」、「说说」都是没有干货的理论，根本是个人主观臆断，这些文章对于刚入门的同学来说，可能是带来了非常大的帮助。
注意，绝大部分人是知识的搬运工，传播者，而不是创造者，官网文档上有的东西，如果能用一种一部分人觉得通俗易懂的方式写出来也是有价值的，官方文章是普适的，但并不一定是最好的教程，而一些作者就是知识的传播者，可以理解为老师，把一些枯燥，正统的知识，通过一种针对特定人群的方式传达出来，然后学生能理解，那么就是一个好老师，好作者。这就跟你学牛顿三大定律不是去看他发布的论文一样。
总结
所以我觉得现在这样的面试题和 list 文章，并没有什么问题，有问题的是读者对于『点赞』可能理解得不够深刻以及没有正确的认识面试和 list 文章的价值。然后就是没有绝对的干货，一篇文章对于不同水平的人所得到的的价值是不一样的，当然我也更喜欢稀缺资源的文章，这样能给整个社区带来更大的价值。
声明下，我基本上是不写面试题和 list 文章的，所以我并不是为了自己写了这种文章而强词夺理。
给掘金说的 再给掘金提一点建议把，想让作者给你们带来更好的内容，这确实是双赢的局面。
你们对于用户的非常的关心，这是应该的， 但是，是不是应该给作者一些关心呢？
比如，对于评论的控制功能，对于投诉的功能，我看到有些作者写个文章被喷得很惨，心里真的很为她们难过，但是作为作者，一个删除评论的功能都没有，或者说不允许评论。
一些负面的评论真的会给作者带来很大影响，其实作为作者非常的希望大家友善的提出自己的建议，当有人说一些恶意伤人的话，有时候会影响到他上班工作的心情，甚至退出掘金平台，我已经看到过好几个优秀的作者，由于受不了掘金用户的评论，然后退出了掘金。
或者说除了赞，有一个踩的功能也挺好的，这样读者知道这篇文章写得不够好，然后自己会去改进，而不是一些「键盘侠」进行语言暴力。
作者和读者是一个双向的关系，维持双方的利益才是正确之道，不是作者把文章写的好就能改善整个社区的，反思的不仅仅是作者，用户也应该反省一下。
我见过最好的社区就是 Emacs 的社区，社区文章质量很高，社区里面基本上不会出现「娱乐化」，也没看到过「键盘侠」，也许是 Emcas 太难学了，导致过滤了很多不符合 Emcas 社区理念的人吧，所以 Emcas 社区不管是作者，还是仅仅是个社区的读者，都有非常高的素质，以至于社区环境很好。再次强调，不是作者写得好，社区就能搞得好的，好的作者也可能被读者被迫离开社区。
由于我做公众号，也在掘金写文章，所以和很多的作者进行交流过，非常多的作者会以给读者带来了帮助而激发自己写更好、更多的文章，我觉得用户给到作者的不是意见而应该是建议。这样双方处于和谐、和平的状态，才更有利于社区的发展。
我的看法 说说这位掘金用户说的东西，我相信你的初心是让社区变得更好，您说的也没有毛病，我也很赞同。
不过您是站在道德的制高点去要求作者，要有深度，要有独立思考能力，要有干货等等要求，但是您又没有给作者钱，他并没有义务按照每个人的要求来写文章。
这不就是白嫖要求还多的表现么。难道您说的这些要求，难道写文章的作者不知道吗，别人也许只想写下来做个笔记，好心随便分享给大家看一下。
这就跟朋友请你到他家吃饭，亲手做菜给你吃，然后你嫌弃这个咸了，那个淡了，这个不好吃，那个卖相太丑了，白吃白喝还要色香味俱全。
在掘金这个平台上，除了小册，没人有责任和义务把文章写得要满足所有的读者。如果小册写得不好，那确实应该要求作者改改，毕竟你花了钱，你就是『爸爸』，你就是顾客，顾客是上帝。
所以，我觉得现在社区不仅要控制文章的质量，还要控制社员的质量，比如像之前创建小号来喷京东小姐姐刘小夕，以及小生方勤的，这种文章就不应该出现在首页，这样会给作者带来了巨大的创伤。</description>
    </item>
    
    <item>
      <title>高级程序员与初级程序员差别在哪里？</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/258/</link>
      <pubDate>Thu, 15 Aug 2019 21:39:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/258/</guid>
      <description>之前在公众号里有个读者给我留言：
请教个问题，公司高职级和初中级，都是写业务代码，那么高职级的价值在哪里呢？
由于公众号回复留言的限制，当时我就简单的回复了如下的几个点：
初级多在写代码，高级多在设计代码； 初级多在解决一个问题，高级多在解决一类问题； 初级多在考虑技术问题，高级还要参与业务上的需求； 初级工程师只管接需求，导致自己忙不过来，高级工程师会砍需求， 用自己得经验告诉产品这个需求不需要，告诉设计师这个交互没必要； 初级工程师可能做完一个项目就完了，高级工程师可能会封装几个组件，整理一个脚手架出来。 还有很多很多，初级工程师和高级工程师差距不仅仅是代码质量上，而且其他能力上，解决问题的能力，抽象问题的能力！
今天有时间，想详细的跟大家谈谈我所遇到的、见到的厉害的程序员，同样是写业务代码，为什么会比初级程序员拿的工资高？
初级多在写代码，高级多在设计代码 一般人可能拿到需求，就开始写代码了，写着写着由于页面功能越来越多，感觉代码越来越复杂，自己都会觉得难以维护了。
我拿我自己举个例子，之前有一次我写完一个页面之后，然后给另外一个同事(可以理解为高级程序员)让他帮我 Review 代码，看到我的代码之后就觉得这个写得不对呀，怎么会这么去设计呢？
然后他给我理了下整个页面应该如何去设计，一个页面分为哪些块，有哪些事件，每个事件应该 dispatch 哪些 action，然后整个模块有哪些数据放在 store 里，哪些模块放在 state 里，当时反正听他理完之后，感觉自己写的代码真的很垃圾，然后花了两天时间把上周写的代码重写了一边。
注意，这里是重写，不是重构，重构是对软件内部结构的一种调转，目的是不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。那么如果保证不改变软件可观察行为呢？就需要写测试用例，保证测试用例能跑通的情况下进行重新构造代码才是重构的第一步，没有测试用例的重构就是耍流氓。
那么如何提高设计代码的能力呢？
我觉得有一个方法对于提高设计代码的能力非常有帮助，那就是采用 TDD(测试驱动开发)。
TDD 的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。 &amp;ndash;来源百度百科
为什么 TDD 会提高设计代码的能力呢？可以看到 TDD 的原理是要在写代码之前就要写测试用例，在写测试用例的时候你必然得去思考你的每个函数，每个模块，每个组件应该如何去设计才能使得易于测试，往往易于测试的代码都比较好维护。
这就可以达到在写代码之前先去设计代码，然后才写代码，也就是先思考，后行动。
我只是说 TDD 可以提高设计代码的能力，并没有说我就特别提倡 TDD，说 TDD 很麻烦，难以实施的人就不要跟我讨论了。
初级多在考虑技术问题，高级还要思考业务上的需求 我们要知道，技术是为业务服务的，没有业务谈技术的好坏都是瞎扯淡！
常常可以看到很多实习生，或者刚来的应届生会吐槽以前的老代码用的框架老，用的技术旧，然后就去改成新的，自己觉得牛逼的，然后没有多个环境测试，发上线就挂了，这种例子很多很多，别说我们公司，就连我们组都出现过好几次这样的情况了。
这种就是只考虑技术问题的，而没有去考虑为什么以前前人要这么写，前人没有用这些东西，难道仅仅是因为那个时候没有新东西，或者说认为前人比你差。
很可能就是他们考虑到了业务上的需求，比如要兼容 IE、或者比如考虑到了有很多用户用 iOS，Safari 不支持 webp ，或者比如考虑到很多用户是低端机，性能不好，不能用一些新特性等等问题。
对于老板来说，他根本不管你用什么新技术，新特性，也许你用了新特性确实让代码更简洁了，但是，但是，但是，发到线上挂了，那么你写的东西就是垃圾，连最基础的稳定性都保证不了，更别说流畅性，高并发。
初级工程师只管接需求，高级工程师会砍需求 经常看到很多初级工程师就是，不管产品、运营甚至后端提出一些需求，他也很友好，只要是需求，他都接，然后整天忙忙碌碌，还经常加班，但是实际上，很多需求做了没有什么价值，也许还有些是重复工作，还把自己搞得很辛苦，这种情况真的很多很多。
然后还有一种情况是有一个产品需求来了，然后 balabala 一顿需求讨论之后，产品给出一个期限，初级工程师满打满算，可能能完成，然后就说能行，结果要么对自己能力估算错误，要么很多突发情况，然后不能按时上线。
而高级工程师基本上不会出现不能按时上线的情况，我思考了几点原因：
会给自己留 buffer，来避免突发情况导致时间的耽搁。 在需求分析的时候会思考每个需求是否有必要，如果有些需求觉得没必要，会和产品讨论，拿出充分的理由将需求砍掉。如果都有必要，然后时间又不太够，会去和产品谈是否能使交互简单一下，一期先出个什么样子，下一期再做完整一点。 对需求的评估以及自己能力的评估更准确。 这里我想要表达，不是所有的需求都是有必要的，不要每个需求都去接。
那么如果来判断一个需求是否应该接呢？
我觉得主要是去思考他背后的价值，为什么要做这个东西，做了能达到什么样的效果，如果产品说不出来价值，或者说产生的价值与你花费的时间不匹配，那么这个需求就是有待商讨的。
初级多在解决一个问题，高级多在解决一类问题 很多初级工程师可能昨晚一个项目就完了，还觉得很 OK 呀，然后也把在项目中的问题一个一个的解决了，按时按量的完成了任务。</description>
    </item>
    
    <item>
      <title>针对华为事件，我思考了四点</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/263/</link>
      <pubDate>Thu, 23 May 2019 21:43:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/263/</guid>
      <description>本来我是不喜欢追热点的，不过今天有个群友在群里发了这样一段话。
结果被我怼了： 后面的我就不截图了，反正我提倡的是，随时我们能做的是好好的提升自己，只有提升自己才是最重要的。
有些人同意我的看法，有些人不同意我的看法，这都不是我今天说的重点，只是这个导火线引发的我的一些思考。
不要让别人的文章限制了你的思维 这是我后来跟那个在群里发文章的那个老哥说的话，但是他也没有回我，这都不重要，重要的是我想表达的观点。
不要让网上的文章限制了你的思维。现在网上很多自媒体都是无脑夸华为牛逼，世界第一，美国傻逼，你转发他的文章代表你就是爱国的。你的这些感受都是作者想看到的，都是作者设计好的，你可以去看现在线上的一些写作课程，理论上都会有一些技巧是如何调动读者的情绪，引发共鸣等。
我不是说这种技巧不对，反而我觉得他写得很棒，他做到了他想要的结果。这样的小编很棒，我也希望我能写出这样的文章，双十万加(阅读量和点赞超十万)。
而是作为新时代的读者，我们不仅应该有爱国情怀，更应该有自己的想法，不要局限于作者的思路，应该以更大的视角，更全的视角去看待问题。
在《少数人走的路》里面就提到一条，思考是需要整体的，一旦你整体的去思考这个问题，就会产生矛盾，有了矛盾，才会使我们更深刻的去思考问题。
所以我们不要无脑的觉得转个文章，留个言这就是爱国，真正的爱国是什么：知道自己的技术不足，好好的搞技术，知道自己能力差，好好的提升能力。这才是支持国家，为国家做贡献了。
**穷者独善其身，达者兼济天下。**我们连独善其身都没做到，就有一股兼济天下的冲动。我还是之前在我看 996 那篇文章中提到的，一般人我们能做的就是好好的提升自己，等你有能力了，有钱了，给贫穷山区盖个小学，给慈善基金捐点钱这就是算开始兼济天下了。
另外一个群友发表了一个观点，我觉得还是有点用吧。
连马云这种等级的人都觉得自己的事儿忙不过来，何况一般人呢？
最后，如果想有更大的视角去看待华为，可以看看这些文字，视角不同，也许会改变你现在的想法：
任正非回应美国封杀：不要煽动民族情绪，不能狭隘认为爱华为就用华为手机 重磅！任正非最新万字访谈，回应关于华为的一切 | 深网 真的，老爷子的这番采访我特别的佩服，建议每个人看个一两遍。
不要总想着自己能得到什么，而是你能给公司(其他人)带来什么好处 这点我是在任老爷子采访里面这段话突然想到的。
可以看到，华为之所以这么牛逼，不是靠每天员工们 965 ，上班划划水，喊喊口号就能这么牛逼的，都是加班加出来的，一般人有他们辛苦吗？虽然别人公司顶着那么好看的光环，都是员工们努力、奋斗，用汗水换的。
很多人就是，又想公司强，又想工资高，又不想加班。当你站在公司外的角度的时候，又希望公司强，能抵制一切风险，工资高。但是作为员工，又不喜欢加班来使公司更强，总希望做受益者而不愿意去做点事情。
我们在与别人合作的时候也是这样，在去和别人合作的时候，请教别人问题的时候，别人能有什么好处呢？没有好处为什么要帮你呢？他又不是你的父母，无条件帮你解决一切能解决的事儿。
合作都是一个双赢的事儿，不要总想着占便宜，占便宜的事儿百分之百干不久的。
很多人在问问题的时候也是有问题的，本来群主有个技术交流群，不在群里问，非得去私聊群主(我已经听到很多群主抱怨过这个问题了)，不知道是因为觉得群里问效率低，怕浪费时间，还是觉得自己问的问题蠢，怕被别人嘲笑。其实这都是不太好的一种做法，不然群主创建交流群来干啥呢？不就是想大家一起交流，别啥事儿都问他么。
如果你是觉得问问题怕浪费时间，那别人回答问题就不花费时间吗？如果你确实着急，那你二话不说，红包先上，肯定有效。别上去就是：“在吗；有空吗”，这会体现一个人不会用微信聊天。
我在一个星球里看到这样一段话：
和别人交流时，先搞清楚一个问题，这是交流还是请教，如果要谈的话题，你已经掌握了 90%的知识，这个叫交流；如果不到 90%，这个叫请教。无论哪种，都会花费别人时间。所以无论是否对你有帮助，都应该首先发红包。 我在之前的文章也说过，发红包不是因为回答的人差你这点红包，而是这是一种礼仪，知道你是麻烦了别人，表示一点心意。
不要想着总能说服别人 有这么一个故事：孔子的有一个弟子有一天跟一个人争论，争论啥呢？一年是三季还是四季的问题，然后这个弟子说服不了那个人，然后就带着他找孔子，弟子把事情说清楚了之后，孔子最后说的是一年只有三季。后来弟子就很疑惑，一年不是有四季吗，为什么你要跟他说三季？孔子就说，他一年只有三季了，你还跟他争论什么。
我当时在群里说了这么一段话，然后就有一个小伙伴不同意我的观点。
后面想了想，我也没跟他争辩，有可能我是错的，也有可能我是对的，我想了下，我没办法说服他，我就没有回复他。
我没有说这个小伙伴就是孔子故事里面那个三季的人，而是想表达当一个人所掌握的知识跟你差太远的时候，你没办法去说服他，他也没办法说服你，这个时候自己持有自己的观点就好，慢慢的，时间长了，学到的知识多了，见识广了，就能判断对与错了。
不要轻易相信别人的结论 吴军老师在得到课程《硅谷来信》里说过：科学是用来怀疑的，而不是用来信仰的。科学看重的是方法和过程，而不是结果。另外，科学的结论也未必等于正确的结论。
你可能会说，不是说不要轻易相信别人的结论，为啥你就觉得吴军老师说的这个话就是对的呢，岂不是和你说的互相矛盾吗？
我相信吴军老师说的结论，是因为他在课中所分析的逻辑，举的例子令我信服。所以我才相信他的结论。具体逻辑可以看《硅谷来信》的第 36 封信|科学的结论未必是正确的。
所以，我上面说的结论，也都有可能是错的，就连科学家得出的结论都有可能是错的。那我们应该怎么办呢？
我们在看有观点的文章的时候，应该注重得出观点的逻辑是否正确，而不是直接去判断观点。观点这种东西人人都能说，我说明天股票会涨，他说会跌。但是，说出一个合理的解释，这就不是每个人都能做到的。作为一个合格的读者，我们应该有自己的思想，自己的判断逻辑，而不是一味的去接收观点。
然后随便我们扯到学技术吧，我们在学习框架的时候，所有的大牛都会推荐你去学习框架、库的原理，而不仅仅是 api。原理就是上面说道的底层逻辑，而 api 只是最终的一个结果。</description>
    </item>
    
    <item>
      <title>中肯的看待 996</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/267/</link>
      <pubDate>Wed, 03 Apr 2019 21:46:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/267/</guid>
      <description>最近 996.ICU 太火了。我本来不太想蹭这个热点，因为我的观念与很多人可能不相同，所以担心被骂，最近有读者问我为啥最近没有更新，最近我在准备晋升的事儿，所以也没怎么准备技术上的内容，但是对于 996 这件事儿上，我最近还是有很多想法，跟大家交流下吧！
后面我会将最近晋升的一些心得总结出来跟大家交流一下，毕竟涨工资呀，所以希望对大家有帮助。
一、反对 996 的本质原因 为什么要反对 996，说到底，就是钱给的不够。
这句话可能说到了心坎里去，咱们来理一理这个逻辑。
如果，发工资不按照一个月一个月发，不按照一天一天的算，而是按照小时、或者分钟、甚至秒来算，你会不会愿意每天多工作一阵子。 加入你现在工资每个月 10000，那么每天的日薪差不多是 480 左右，一天八小时，时薪就是 60。你每多工作一小时就可以多得 60 块，如果你不是三和大神(不知道三和大神的搜索一下，不然你可能不太好理解)的话，你大概率不会只工作 8 个小时。
所以，我觉得说到底，反对的就是企业搞 996，加班不给加班工资导致的问题。
对于头条，阿里这样的企业，虽然知道他们加班很严重，但是工资高呀，所以很多人拼了命的想去。
今天我在小道消息里看到这样一个观点，加班的时候不愿意加，看到别人拿年终奖拿得多又羡慕；自己体会这句话吧。
二、我的一些观点 讨论完了本质，我再说一下我的一些观点。
**首先声明，我是极力反对 996 的。**但是对于现在很多人的行为不是太赞同，所以写出来跟大家讨论下。
1. 不喜欢就走 在这场革命(说得似乎有点严重了)中，不少人想到终于有机会吐槽自己的公司了，垃圾公司，压迫员工，还搞 996。
对于这种行为我的观点是既然觉得在公司干得不爽，为何不走呢？
心里可能想着：我也想走呀，但是没其他公司要我咋办。
这种想法我感觉是一种弱者的态度，即表现出了自己弱，然后又抱怨现状。这种行为就像这样一群人，整天自己不努力，然后抱怨世界不公平，为什么我的爸爸不是王健林；为什么同一个老师教的，他的成绩那么好；为什么同一个班的，他的工作那么高；为什么一起进公司的，他为什么涨工资。
如果你有能力，不喜欢这个公司的制度，不能忍受 996，选择离开就行了呗。
所以，提升自己，让自己变得更强，不喜欢就走。
2. 其实我们已经很幸运了 作为程序员的我们，其实已经很幸运了，还有假期，还有双休，已经很不错了。有很多行业，根本没有休息，一年可能就只有过年的那几天会放，没错，我爸爸的职业就是这样，建筑工人，他们没有周末，没有节假日。
另外你在外面看到的环卫工人，外面开早餐店，饭店的，有过双休吗？
我说这点其实主要是想表达，我们应该少点抱怨，我们还是不错了，咱们让自己变得更强，多为社会做点有价值的事儿，让更多的人拥有双休，拥有节假日。这肯定不是取去革命能解决的事儿，不是去抵制资本家能干的事儿。
3. 多花时间来提升自己的工作效率 说实话，大部分人工作时间的三分之一都没有为公司产生价值。
这三分之一的时间你可能会早上用来刷下咨询，各大群水一下，看看各大新闻网站等待。也许还会去抽抽烟，跟同事聊聊天，以及有一些时间你无法专心工作等。
当然，不可能有人做到每天都百分之百的投入，但是投入的比例就是人与人之间的差距，这是一个影响效率的地方。
众所周知，在公司级别比你高的，经验比你丰富的，代码敲得比你快，完成任务比你好，这肯定嘛，别人工资拿得也高，所以干活也多。反过来也成立，活干得多，工资拿得高。你给公司创造的价值越大，那么你就应该拿更多的工资，后面我将晋升也会说到这个。
所以我们已经想办法提高自己的工作效率，在一定的事件内干更多的活，那么你就需要提高自己的能力，这样你就能在规定的事件内完成任务，当然就不需要加班了。
可能有人说，公司就是给你的任务是无论怎么做都做不完的，那么这种公司对于资源不合理安排，你可以选择第一点，不喜欢，咱就走。
三、这件事情我思考了哪些？ 我在跟我周围讨论相关话题的时候，我感觉我思考的问题跟他们不同。比如：
为什么这个仓库，或者说这个网站会传播得这么快？在最开始的几十，几百颗 star 是怎么来的？为什么同样类似的项目，godie996(方应杭的项目，地址是：https://godie996.com)没有火起来呢？当时我们讨论了两个原因：一个是各大群的宣传，另一个是 996.ICU 界面做得好看。另外的原因供大家思考，欢迎在评论区给出你的答案。 为什么那么多人不满意自己的公司，而不选择离开呢？ 为什么会这么多公司会搞 996 呢？ 同样是互联网公司，为什么国外的大厂不搞 996 呢？ 等等很多问题我觉得才是我们应该去思考的地方，我们只有去思源，才能从根本上解决问题，从表面现象去解决问题很多时候会走很多弯路。
对于这个我举个例子，古代的铁匠都知道百炼成钢，把铁红了，然后拿出来锤，然后又拿进去烧，反复几次，就会发现做出来的铁具很硬，但是不知道为什么，其实就是因为铁里面融入了炭。所以近现代的就直接在熔铁的过程中加入炭，就不需要反复锤炼了。</description>
    </item>
    
    <item>
      <title>为什么现在面试都是面试造火箭</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/268/</link>
      <pubDate>Sun, 17 Mar 2019 21:47:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/268/</guid>
      <description>文章首发于个人网站：前端桃园
很多人总是抱怨面试官问一些平时不常用的知识点，比如算法呀，网络(TCP)等等，也就是大家常说的：面试造火箭，工作拧螺丝。
但是有没有想过为什么整个前端圈，或者绝大部分面试，不仅是前端，各种职位都是这样呢？难道就没人来解决这个问题吗？
我觉得，事实上，这是一种合理的行为，并不是因为存在即合理，而是本来就应该这样，接下来我以两个方面阐述我的观点。
一、 考验对专业知识的掌握的扎实程度 在张鑫旭的十问十答里的一个问题是，「前端开发基础扎实的标准是什么？」
这里面他对「扎实」的解释我觉得很适合来答这个问题。
「扎」其实可以理解为深度，你可以想象一个用一根针，扎你的皮肤，对一个点的压力，可以让你痛不欲生。
那么如何理解知识的深度呢？
我还是拿前端面试来举例，比如考一个快速排序，很多人就觉得这有什么好考的嘛，平时又用不到，引擎底层已经写好了 sort 方法，什么数量级用什么排序底层也已经实现好了，没必要考了呀。
但是其实面试官并不是想考你快排的代码是如何写的，说实话，花个十分钟，最多半小时，一个快排的代码你肯定可以记住。但是其实考察快排的真正原因可能不仅仅是考察代码，而是考察它的思想，分而治之(分治法)，划分算法的运用。
另外可能会再问你，它的时间复杂度是多少，如何计算等这些问题，这些问题也不是来考你这一个算法的计算，而是通过这一个算法来看你知道怎么算时间复杂度不？以此来引导你为什么快速排序快，为什么同样是分治法的归并排序没有这么快。等等相关的算法方面的知识。
面试官所考察的问题只是各种底层思想的一个运用，通过这个实例应用来考察对底层思想的理解程度。所以很多时候大厂的面试总是从浅入深的问问题，直到把你问到不知道为止。
再谈谈「实」，实则可以理解为满，考察知识的广度。
想象一下什么样的情况你才会说一个东西实，给你一晚装满的米饭，并且还压一压，再放进去一些米饭，直到压不下去了为止，这个时候你会说满满的一晚米饭，很实在。
所以对「实」的理解就可以理解为满，全。
如何来体现你对知识的广度呢，也就是实。
比如可以考察一些你平时不常用的，但是你也许会用到的知识点。比如一些简单的算法和数据结构，链表呀，网络里面的 tcp/ip 协议族呀，函数式编程呀等等，一些 html5 的特性(比如 web-compoennt)等等。
你可能在平时编程中没用到，或者大多数前端工程师平时不会用到，但是这些是基本功是需要知道的，比如 React 源码中就用到一些简单的数据结构，链表(Fiber 树就是用链表的结构存的，是一个单链表，以及里面还有循环列表的增删改查)，如果不知道树可以用链表存，如何对链表进行操作，那么可能你看源码就很成问题。里面还有一些位运算等，位运算平时也不常用吧，但是 fb 的工程师就用它来解决实际问题。
再比如 web-component，这已经是 w3c 提出的一个前端组件化的标准了，我国也有大佬用 web-component 实现了一些库，比如腾讯出的 OMI。
地址： https://github.com/Tencent/omi
所以狼叔在 「2019 大前端技术趋势深度解读」里提到可能他是下一代框架的标准。
我们前端变化得快，新东西也多，如何不跟上时代，多了解(主要了解，不是每个新东西都要去深究，因为你没那么多时间，大多数时间还是要用在平时用得到的地方)一些新东西。跟不上时代，也行就会慢慢的被淘汰，所以现在前端招聘基本上都会需要你会一门框架，不管是 React 、Vue、Angular，这些都是趋势，数据驱动，不再是以前拿起 jQuery 就是干了。
小节 在工作中常用的知识点，那些是最重要的，那么大家都会这些，**如果你不知道点，别人不知道的东西，这些东西比别人掌握得更深一点，面试官为什么要你？**也许你还是个双非（非982、211）。
我觉得在任何领域都适合一个定律，就是「T」字形发展，先把专业搞深一点，然后往两边扩展。
二、醉翁之意不在题 另外面试官也许会考你一些软技能，考你的不仅仅是面试题完成了那么简单。这点注意，越简单的题越不简单(好好理解这句话)。
我拿我自己的经历来举例，之前做小米的笔试题(是那种把题目发给你，两天内做好了发给他)的时候，有一道题是：求最大公约数的题目。
很多人看到这道题觉得很简单嘛，几行代码就搞定了，当时跟我一起做笔试题的几位竞争者也是，他们就写了一个算法。
而我当时想到，我觉得面试官在检查这道题的时候如果看代码还是有点麻烦，所以我就写了一个界面，界面上提供了可以点击的数字，还有输入框，还有几个计算按钮，一个结果框，用户可以通过点击数字，或者在输入框里输入数字进行计算最大公约数，还做了一些错误提示等。
这相当于做了一个应用，一个可以给用户使用的应用，所以最后因为这道题，我被录取了。
我被录取的原因，这些都是进去之后，老大告诉我的，当时很惊讶，竟然是因为这个。
所以之后我就越来越注重用户体验，多一些思考，让别人用自己做的东西的时候更舒服，更方便。
我期望的面试官 声明：我没当过面试官，所以以上内容大多是我思考(猜测)的，也可以用说用一种合理的解释，来解释了现在这种现象。
我期望的面试官是这样的，或者说如果我以后当了面试官我会怎么做。
作为面试官不是把面试者考倒，而是尽量挖掘面试者擅长的地方，然后去打破砂锅问到底的看对擅长的地方研究有多深，考察深度。 在考察的时候先考察广度，再考察深度，从广度的问题中提取擅长的点，然后再问下去。 一些小提示 一般面试官不会因为你某道题没答出来就否定你的。 面试官不喜欢简历上写的啥都会，一问每个知识点都掌握得很浅。 对于平时常用的框架，至少要知道核心原理。 这些是之前我们组面试官在讨论的时候提到的，希望能给大家帮助。</description>
    </item>
    
    <item>
      <title>2018 年度总结, 三个角色的转变</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/221/</link>
      <pubDate>Tue, 15 Jan 2019 16:54:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/221/</guid>
      <description>2018已经结束了，总结自己这一年来就是三个角色的转变：自己从一个学生成为了一个社会人，从一个读者变成了一个自媒体人，从一个在校学习者变成了终身学习者。
每一种角色的转变意味着责任的转变，每多一种角色，就会多承担一份责任。角色变得越大，责任也会承担得越大，当然收获得也更大。
技术成长 对于技术成长，我感觉我莫名其妙的就走在了前端的前沿，刚刚在知乎上看到一个帖子2019 前端技术规划该包含什么？很多大佬在规划里面都谈到 Rxjs、Typescript、函数式编程、Flutter、PWA、Node 相关, 然而事实就是这么巧(或者可以说我眼界比较远，偷笑)，在 2018 年我很多都已经接触过了，比如 Rxjs、TS、函数式编程、Node 等。
聊 Typescript(TS) 特别是对于 TS，我在公众号，然后我维护的微信群里早就已经说过，TS 最近会火起来的，没学的赶紧学起来，不知道有多少人听了我的，看了那么多大佬的规划，我更加的坚信了 TS 将会变成未来前端工程师一项必备的技能。
然后对于 TS 的学习，我看过这些东西，我推荐一下，不过对于 TS 我仍然是个初学者，不敢说有多精通，我只在我自己的小项目中用过，没有在公司的项目中使用。
TS 官方文档 技术胖的 ts 教程 TypeScript极速完全进阶指南 深入理解 TypeScript 如果问我使用 TS 感觉是什么样的，我只能说相逢恨晚，就跟 vim 一样，用过之后就像一直用。
聊 Rxjs 对于学 Rxjs 来说，我想说的是，Rxjs 是我学过最难学的一个库了，目前为止没有之一。现在回想起来，要是早点接触函数式编程就好了，如果先是研究函数式编程，再去学习 Rxjs，我相信会轻松 40% 以上。但是目前为止，我并没有拿到真正的生产环境去用过，只是写过一些简单的 demo，然后看过一些资料和书籍，同时也在团队做过相关的普及。
Rxjs 难的就是思维方式以及 api 很多，然后就是由于一些概念不知道为什么要这么设计(很多思想我相信学了函数式编程就会明白了)。
对于 rxjs 的学习看过很多的文章，我这里还是推荐三个我觉得比较全的学习资料。
Rxjs 官网 30 天精通 Rxjs 程墨老师的深入浅出 Rxjs 聊函数式编程 学习函数式编程给我最大的感受就是让我拓宽了我的眼界，突然的就弥补了以前知识体系缺的点。比如对于 compose、curry 这些 js 里面也算一直提及的重要概念，但是总是记了又忘，忘了又记，就算自己手写来实现过了，但是隔了几个月还是又忘了，因为没用过。但是学了函数式编程以后，发现全是这些东西，compose 呀、柯里化呀、部分应用呀，就跟用数组的 map、reduce 这些方法那么熟练，所以，现在闭着眼睛也能写出来，就几行代码的事儿。</description>
    </item>
    
    <item>
      <title>浅谈未来几年前端的发展方向</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/117/</link>
      <pubDate>Tue, 13 Nov 2018 16:41:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/117/</guid>
      <description>在知乎上看到这么一个问题，觉得很有意思，以下是原提问者的见解
过去五年前端的发展过程基本上是一个工程化的过程,框架和工程化工具层出不穷。
近两年其实发展已经比较迟滞了。
框架方面:基本就是三大框架鼎立的局面,三大框架都在相互借鉴吸收,而且方向各有侧重,未来短时间内我看格局不可能有什么大变化.
工程化工具:基本上是 webpack 一统江湖的趋势,虽然有 parcel 等来小打小闹,但是生态一旦形成,没有革命性的项目是无法取代 webpack 的,而且 webpack 也在进化.
个人认为前面五年是前端生产力提高的五年,工程化使得前端的生产力得到了极大提升,但是现在也基本上是在已有的格局中修修补补了
我谈谈我对前端未来几年的发展方向的看法。
看未来的发展方向，无非就是看现在的解决方案所存在的痛点。
1. 浏览器的性能问题 做 web 前端的同学都知道，和原生的 App 相比，性能一直一个致命的痛点，如果要追求性能，肯定得用原生 App。那么在性能上，未来几年可能是一个方向。
①前端代码编译为字节码
浏览器这几年在 Chrome 的带动下，性能飞速发展，但毕竟其核心原理没有变化，性能始终难以达到原生 App 的水平，这部分是很有可能出现大的变化的，一个可能的方向就是浏览器变成虚拟机，前端代码编译为字节码，通过这种方式来将性能提升一个等级，虽然还是难以达到原生App的水平，但已经能够满足绝大部分应用的性能需求，类似于Java对比C/C++一样。 &amp;ndash;李运华
因为 js 是边解释边执行的，这肯定是要比编译型语言要慢，为了解决解释器的低效问题，大概在 2008 年的时候，提出了 JIT 的概念，它是使 JavaScript 运行更快的一种手段（JIT，内联缓存和隐藏类）之一，通过监视代码的运行状态，把 hot 代码（重复执行多次的代码）进行优化。通过这种方式，可以使 JavaScript 应用的性能提升很多倍。
但是时至今日，还是觉得不够快，所以各大浏览器厂商开始支持 WebAssembly。WebAssembly 是一种新的字节码格式，主流浏览器都已经支持 WebAssembly。
和 JS 需要解释执行不同的是，WebAssembly 字节码和底层机器码很相似可快速装载运行，因此性能相对于 JS 解释执行大大提升。
也就是说 WebAssembly 并不是一门编程语言，而是一份字节码标准，需要用高级编程语言编译出字节码放到 WebAssembly 虚拟机中才能运行.
他的优点就是：
体积小：由于浏览器运行时只加载编译成的字节码，一样的逻辑比用字符串描述的 JS 文件体积要小很多； 加载快：由于文件体积小，再加上无需解释执行，WebAssembly 能更快的加载并实例化，减少运行前的等待时间； 目前可以编译成为 WebAssembly 字节码有 ：AssemblyScript(语法跟 TS 差不多，)、c\c++、Rust、Kotlin。</description>
    </item>
    
    <item>
      <title>拥有自己的知识体系，形成自己解决问题的方法论</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/104/</link>
      <pubDate>Fri, 03 Aug 2018 16:15:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/104/</guid>
      <description>前言 最近在星球里群里都有小伙伴说道自己对未来的路比较迷茫，一旦闲下来就不知道自己改干啥，今天我这篇文章就是让你觉得一天给你 25 个小时你都不够用，觉得睡觉都是浪费时间。 今天我谈的就是关于【构建知识体系，形成自己解决问题的方法论】，这个话题以前我在给在校准备找工作的同学的几个建议这篇文章中谈到过，但是没有将如何去构建自己的知识体系，这次将深入这个话题进行探讨。
什么是知识体系 无论是大到一个星系还是小至一个原子，其本质都是一个个的系统。 那我们如何来掌握这个系统呢？通过“框架”来简化对系统构成元素以及元素间有机联系。因此有目的地运用“框架”来思考、学习，能够让我们更全面、更快速、更深入地分析、解决问题，以及更高效地学习新知识和技能。
简单来说，知识体系就是一个系统构成元素以及元素之间的有机联系的简化体现。
知识体系的重要性 没有完整的个人知识体系框架，即使你在学习单个知识点的时候理解力和速度高于一般人，但你整体的学习效率依然会很低。原因如下：
对知识的理解就不深。大部分知识点之间是有联系的，缺少了完整的知识体系框架，你就好似失去了知识间联系的地图，对知识的理解就不深。平时我们在遇到问题的时候不知道怎么解决，然后问了下大佬给你说用啥，然后怎么用之后，你就发现我知道这个知识点，但是没想到可以这么用。 比如以前刚去实习的时候，遇到一个跨域问题，因为后端的数据是早就稳定了的，我只是要去拿几个接口的数据来做点东西，那么我本地调试的时候由于域名是是 locahost，而后端是 xxx.duokan.com, 所以就会有跨域问题，当时我就问我老大我要用代理来解决这个问题吗?他就跟我说你加一条 host ，把 xxx.duokan.com 绑定到 127.0.0.1 就行了，因为我当时知道 host 这个东西，所以就 get 到他的点了，但是由于知识点没有成系统，是散的，就根本想不到 host 和跨域有关系。
**陷入在被动学习当中。**没有完整的个人知识体系框架，你只能是碰到什么问题就被动地去学什么，零散而无系统，从而不自觉地陷入在了被动学习当中。这就跟我在文章的开头提到的小伙伴一样，刚开始还能被动学习，然后就不知道学什么了。 一旦你形成了知识体系，你就知道自己那些地方要补，那些地方暂时可以不补，就可以主动学习去查漏补缺，就不会再迷茫了，因为你会发现你有太多太多遗漏的东西，根本学不完。
**知识整体积累的速度下降。**知识之间是相关联的，不同的人在经历同一段工作或上同一堂课时会因为知识体系框架的不同，从而导致了不同数量级的经验吸收。 知识体系的好处 知识体系 可以方便地 给出所学知识的 地图全貌。在学习过程中给人进度反馈。 梳理知识体系，可以提炼出知识的主干网络，方便知识的调用。 知识体系提供了可拓展性。新学知识可以有规律地添加在原有体系之中。 知识体系为知识的关联提供的指导，发掘知识点之间的关联，正是创新的核心。 把孤立的知识点关联起来，是避免遗忘的重要手段。 其实知识体系和解决问题的方法论是相辅相成的，在自己解决问题的时候，会用到知识体系的东西，知识体系的形成，也有部分是通过解决问题来添砖加瓦的。
怎么构建自己的知识体系 对于构建知识体系和很多方法论差不多，收集、整理、输出（即思考过程）。
**收集知识点。**现在是互联网很发达的时代，收集知识点，已经完全不是一个问题了，可以通过微信公众号、得到、视频网站、博客、社区等各种路径获取知识，你可以讲这些知识点收集起来后面进行整理，但是我提倡是先看再收藏，而不是收藏了等有空再去看，不然就会造成收藏栏里发现自己收藏了一大堆，然而由于太多就不知道看哪个，最后就不看了。 **整理知识。**整理知识是一个为输出做准备的，在整理的过程你已经有一定的思考了，会建立自己的知识分区，将你认为相似的知识点归为一类，慢慢你也会将你的知识库变得更加丰富。 **输出。**输出是来巩固知识的最佳方法，也许你通过自己的大脑想，觉得很简单，感觉自己会了，其实想通过头脑去想，去检验是否已经掌握了，对于绝大部分人来说都是不可能的，因为一般人的大脑都是无法深入到很多层以及思考全面，但是可以通过训练去让自己思考得越来越深入，越来越全面。 这话可能说得有点抽象，咱们举个例子来说，大家都知道围棋很难吧，难的是什么，下完每一步棋之后可能的结果太多了，而那些大师就是可以预测下别人下一步，甚至下好几步别人会下的棋子来推测自己下的这步棋下在哪里比较好，而新手是往往做不到的，而像柯洁这种20就拿世界冠军的，也许就是因为他对围棋的天赋，天生对围棋就有很好的大局观，加上自己努力。
这上面只是谈到了为什么我们不能用大脑来检验自己掌握知识的程度。所以我们可以通过自己的嘴，来给别人讲明白；或者通过写文章站在读者的角度，把自己讲明白。只有能给别人讲明白的东西，才是你真正掌握的东西。
通过画思维导图来把知识体系形象化。 选择思维导图的软件可以从知乎这个问答里面选择自己喜欢的，合适自己软件。有什么免费的思维导图软件可以推荐？ - 知乎 这是以前流传的一篇 WEB 前端工程师的一篇思维导图，也可以说是作者的知识体系，我在这里不评价好与不好，因为每个人的技术栈都不同，但是我们还可以针对这个进行细化。 比如我们针对我们前端重要的一块 JavaScript，就可以再进行细分， Javascript 需要掌握基本类型、函数、对象、内置对象、DOM、BOM等知识，然后函数要掌握闭包、作用域、this等，对象要掌握原型、new这些等等。
我就不再扩展了，根据自己的知识形成一个知识体系，然后再解决问题的时候就很容易根据自己的知识体系来解决问题，比如可能你遇到了跨域的问题，你从你的大脑搜索整个知识体系的时候，就可以知道跨域有哪几种方法，然后每种方法的适用场景是什么。
在形成自己的知识体系的过程中，你就知道自己对哪些知识了解，哪些知识不了解，然后你就会花时间去补充自己不了解的知识，渐渐完善自己的知识体系。
在形成自己的知识体系之后，你面试就比较胸有成竹，兵来将挡水来土掩。
你的知识体系就像一张网，面试的过程就是来检验你这张网漏洞有多大的过程，而学习的过程就是就像是给这张网空隙给编织细一点，你的最终目的就是使你这张网的空隙越来越小。
一些小要求 需要有一颗爱学习的心。 需要做一个善于总结的人。 需要是一个有执行力的人，不然列了很多知识点，不去查漏补缺，没鸟用。 关注桃翁，关注前端桃园，有问题随时跟我交流。（最后一条纯属扯淡） </description>
    </item>
    
    <item>
      <title>毕业记—我的大学无憾了</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/100/</link>
      <pubDate>Sat, 07 Jul 2018 16:47:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/100/</guid>
      <description>如果玩抖音的同学，我相信对上面这个图片并不陌生，在六月份的时候疯狂刷这个，但是当时并没有任何感觉，直到我那毕业的那天，提起背包离开学校的那天，我才真正的感受到，我要离开学校了。
自己已经不是一个学生了，熟悉的学校，熟悉的班级，熟悉的同学，熟悉的老师，这次，真的说再见了。
还没来得及跟给我传授过知识老师，陪了我四年的大学同学，以及实验室的学弟学妹们好好的说再见，就提着行李，背着书包离开了学校。
在走的那天，突然想到，那些给我传道受业解惑的老师，那些跟我一起学习上课的同学，那些跟我在实验室辛苦奋斗的都学弟学妹们，也许我们以后就见不到了，莫名的一股泪意席卷而来，包括我现在写这篇文章也是这样，这也行就是人与动物之间感情的差别吧。
天下无不散之筵席，想给那些没有好好道别的人说，咱们有缘再见，以后我帮得上忙的随便找我。
之所以在题目取【我的大学无憾了】，主要是因为三件事儿。
**找到了一份满意的工作。**虽然我没能去得了我最想去的腾讯，也因为个人原因没有去实习了半年的小米，但是在现在的蘑菇街工作我还是挺开心，很满意这里的工作氛围以及人文环境。 在大学中找到了心爱的女朋友。 都说程序员比较宅，很难找到女朋友，还好我运气好，在毕业之前找到了心爱的她。 拿到驾照。 大学有时间真的建议把驾照考了，以后工作了时间成本很高。 夸夸自己 我在学习上说是一个学霸呢，但是自我感觉并没有怎么花时间去学习上课的内容，大多数时间都花在专业课上，准确的说是花在敲代码上。
为啥又说是个学霸呢？因为拿的奖状还是挺多的，四年里，拿了两次甲等、一次乙等(跟甲等的最后一个绩点只差 0.1)，大四由于没课，只有一个实习，不知道老师咋打的分，后来没有拿到。
然后在其他方面参加的比赛比较多，各种程序设计大赛，数据库设计大赛，以及优秀班干部等等，估计 20 多张奖状，最后毕业前还去申请了校级的优秀毕业生和市级的优秀毕业生，没想到都通过了，市级优秀毕业生咱们一个院也才 5 个名额，这个时候只想对自己说【优秀】。
吐槽下自己 在这里想吐槽自己的主要是体重，总结下来就是【肥了】。
刚入大学的时候我只有 114 斤，作为一个 174 的男生来说，那还是比较瘦的了，想想那个时候自己肚子稍微硬一下，还能看到几块肌肉呢，大一的时候比较闲，没事儿就出去大大篮球，然后对新事物比较好奇，到处跑啥的，运动的比较多。
到了大二的时候，涨到了 122 左右，因为大二进了学院的创新实验室，从此没有了双休，没有正常的节假日，没有了没有课就是玩的时间。如果早上没有课 8 点 40 之前就得到实验室，晚上一直要干到 10 点 40 才能回寝室，每周要上六天班。每天三点一线，寝室、教室、实验室，周末休息的那天就想着要好好打打游戏，放松下，也没有出去玩，导致体重增加，肚子肥肉增多。
到了大三同样也如此，绝大部分除了睡觉的时间都是在实验室，很少出去运动，只要在体育课的时候才能好好的运动，直到大三结束的那个暑假，已经 126 了，但是还是没有意识到问题的严重性，感觉还是很正常，也不胖。
大三结束的那个暑假，我去小米实习了，虽然在北京消费很高，但是总是吃得很饱，几个玩得好的每周都要出去吃好的，结果越吃越胖，直到有一次去吃完火锅回来在旁边的称称了一下，把自己下了一跳，已经 135 了，那个时候才来北京两个月，竟然涨了 9 斤，准备开始减肥了，然而并没有坚持下来，但是尽量在注意，直到我实习半年再回学校 138 了。
回到学校已经是大四了嘛，就在学校做毕业设计，在学校吃的稍微差点，我也尽量控制自己的食量，现在以及只有 132 了。
结语 希望自己离开了社会，该变的要变，不该变的别变。比如不要忘记初心而随波逐流，既然选择了做程序员这个行业，目前这几年就应该有工匠精神，把技术专研深，专研透，以后看自己的意愿或者社会的发展再看应该干什么。
要该变的是该变自己还是学生的身份，作为一个工作人，应该对工作精益求精，尽量不要犯错误，大学的时候犯点错误还能接受，在公司里犯了错可是要付很大的代价的。
最后感谢大学陪我走过的这些人，可能有些人只是我人生中的过客，但是也给我的人生增添了一份色彩，感谢你们。
那些在大学里面给过我帮助的人，我会永远记住的，【滴水之恩，涌泉相报】。
我希望今天我以学校为荣，以后学校以我为荣。
致我的大学以及青春。</description>
    </item>
    
    <item>
      <title>Javascript 是最好的语言，不服来辩</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/95/</link>
      <pubDate>Thu, 24 May 2018 17:03:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/95/</guid>
      <description>看到这个标题相信很多人就要开始跟我争论了，PHP 才是最好的语言，那就请原谅下，你说是就是，我们来看看就知道了。
有一条 Atwood 定律：any application that can be written in JavaScript, will eventually be written in JavaScript
翻译一下就是：任何可以用 JavaScript 来写的应用，最终都将用 JavaScript 来写
要是没看到过这句话的人可能又要开始说了，Atwood 是谁，他说最终会就会啊。
那我们来了解一下他，说那些多少年的编程经验啊，这些都没啥用，只要说一点，就能知道这个人也不是等闲之辈，他是 stack overflow 的联合创始人，还是牛逼吧，如果你说你不知道 stackoverflow，那么对不起，那么我们不能做朋友了（开玩笑的，不知道的去了解下吧）
Javascript 可以做什么 1. Web 前端 相信这个这个是毫无疑问的，在 Web 前端的地位目前是没有任何语言能撼动它的霸主地位。 2. 后端 Nodejs Node.js 是一个 Javascript 运行环境(runtime environment)，发布于2009年5月，由Ryan Dahl 开发，实质是对 Chrome V8 引擎进行了封装。Node.js 对一些特殊用例进行优化，提供替代的 API，使得V8在非浏览器环境下运行得更好。
使 Javascript 走向了服务端，这使得 Web 应用仅用一种语言即可完成。
3. 桌面应用 代表 Electron ，还有 Node-webkit 、heX
Electron 是由 Github 开发，用 HTML，CSS 和 JavaScript 来构建跨平台桌面应用程序的一个开源库。 Electron 通过将 Chromium 和 Node.</description>
    </item>
    
    <item>
      <title>给在校准备找工作的同学的几个建议</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/91/</link>
      <pubDate>Tue, 22 May 2018 12:23:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/91/</guid>
      <description>了解 vim 养成 git 规范 学深比学广更重要 拥有自己的知识体系，形成解决问题的方法论 了解 vim Vim 被誉为&amp;quot;编辑器之神&amp;quot;，这可不是虚的。
在我用了 vim 半年之后，我建议我身边的每一位程序员都去学习 vim 。
因为一旦你学会了 vim 的操作，你就像中了毒一样，你会讨厌鼠标，讨厌在你敲着敲着键盘，突然又要去移动光标，因为把手从键盘移动到鼠标上的时间远远大于手指在键盘按键的切换。
而且你会希望在所有的编辑器上都装有 vim 插件，不管是 vscode，还是 idea，还是 emacs；不管是自己的电脑还是别人的电脑；不管是敲代码的编辑器还是用来看网页的浏览器。
还好，所希望的都有，每一个可以装插件的编辑器都有 vim 插件，甚至浏览器也有 vimum。
当你真正习惯上了 vim 以后，你会迫不及待的想要一个机械键盘，因为你敲代码大部分时间都用在了键盘上，鼠标已经不再那么重要了。
机械键盘推荐红轴，青轴和茶轴虽然自己敲着很舒服，手感很好，但是比较影响其他人，键盘声太吵了，黑轴就不考虑了，码字太累了，不适合程序员。
我个人用过青轴和红轴，青轴给我的感觉就是码代码是一颗一颗的，听着那声音自己觉得很舒服，敲代码很有感觉。
而红轴给我的感觉就是敲代码的时候你会忘记你手上的键盘，给我一种手、键盘合一的感觉，把精力完全集中在码代码上，感受不到敲键盘的感觉。
最后说的就是先学 vim 的基本操作，然后装个插件在你现在的编辑器上练习就行了，不需要直接用 vim 编辑器。
因为你直接用 vim 编辑器，作为一个新手，不会配置插件，快捷键等，没有提示，没有高亮。你在写项目的时候会很痛苦，你就用你熟悉的编辑器高亮，代码提示这些是你以前搞好了的，所以实际应用起来难度小很多。
为了推荐更多人程序员学习 vim ，我还自己写了一篇入门文章，有兴趣的可以看看。
我周围的人，只要是用 vim 敲过代码的，从没有人说过用 vim 敲代码不好用而放弃用的，只会对 vim 爱得越来越深。
Git 规范 Git 作为我认为最优秀的版本管理工具，那是程序员的利器，必须用得游刃有余。
而我今天要说的不是怎么用好 git，如果需要可以留言给我，我后面写一篇或者一个系列。
我想说的是规范，不要以为 commit 随便写就行了，其实 commit 的规范程度一部分体现了你这个人做事的态度，是否端正，严谨。
我拿我在 某米工作的时候举个例子，我有个朋友那组的有个学姐，她的 commit 很随意，完全不能体现她提交代码的内容，比如，哈哈；放假了，好开心；bug；也不说是什么 bug，导致我那个同学根本不知道她提交了什么代码。</description>
    </item>
    
    <item>
      <title>三板斧使你走上人生巅峰</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/81/</link>
      <pubDate>Fri, 11 May 2018 14:32:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/81/</guid>
      <description>在我目前的认知里，我觉得未来有三个技能是需要掌握的，分别是：写作、编程、理财。我相信如果这三个技能都掌握了，我相信你里财富自由之路已经不远了。
想要走上财富自由，主要看你的「睡后」收入，就是在你睡觉的时候还有的输入，比如你录视频卖、写书、做自媒体写文章、理财等等，程序员如果增加「睡后」输入，请看 Stromzhang 的 这篇文章 。这些都会让你在你睡觉了之后还有收入，跟你上班出售自己的时间相比，你花在这些能增加「睡后」收入的时间可以重复卖这些时间。
比如一个作家花一年的时间写了一本书，可以畅销十年；那些做自媒体的写出一款爆文，到处转发，也可以流行好多天。
所以如何增加「睡后」收入，才是通往财富自由之路的关键。
第一板斧：写作 在那么多的只能加睡后收入的方法里面，为什么我选择了写作？
因为写作是大多数人都可以参与进来的，不需要有太多的专业性技能，而且操作方便，在任何地方都可以写，没有时间空间的限制。
李笑来在他的财富自由之路里面也说过，写作是通往财富自由的必备技能。
下面简单介绍几种写作的好处：
1. 表达能力 写作可以锻炼你的表达能力，因为写作其实就是在把自己所想的用文字表达出来，如果你能通过文字清晰的表达出来，那么我相信通过语言表达出来也不成问题了。
一旦你的表达能力得以提升，那么在人际交往的时候可以清楚的表达自己的观点。与老板沟通的时候可以清楚的把自己所干的活表达出来，让老板知道你的工作量，你用你的时间和工作能力，减少了老板的时间，他才会感激你；与同事交流清楚表达自己的观点，可以让同事们觉得你是一个有条理，很理性的人，等等例子，一旦你表达能力提升了，你的人际关系不会差。
2. 记录世界记录你 「记录世界记录你」是快手的广告，在这里借用一下，很适合给写作打广告。
快手也是日活上亿的一款APP，快手用视频可以记下你生活的点点滴滴，并且与其他人分享。我们用写作可以记录下生活的点滴，可以记录你的日记，以后可以留给你老了之后回忆；可以记录你的随想，让你可能会忘记的东西持久化；可以记录下你学习的笔记或者举一反三的知识，来加深你对知识点的理解……
你可以用写作记录下整个你所出的世界，以及你整个人生所经历的事儿，所想的想法，所学到的知识。这不就是记录世界记录你吗？想想是不是一件很酷的事儿
别想了，开始写吧！
3. 钱，快到兜里来 对于赚钱我相信大家都特别感兴趣吧。
很多人也许误以为只有作家才能通过写作来赚钱吧！那么你就少知道了一个赚钱之道。
你可以通过运营公众号来赚钱，说说三种运营公众号赚钱的方式：
流量主 当你的公众号达到 5000 关注人数的时候，就可以开通广告服务，广告大概一次点击 1 块钱，原创能达到 1.5 元 软文推文 当你的公众号有一定影响力之后，一般就会有一些培训机构来让你帮他写软文打广告。希望大家看到喜欢的公众号有这种广告，不要抵触，有收入才有动力输出。 营销 如果你有一些付费专栏，或者知识星球，或者付费的视频课之类的，也可以做营销。 当然还有很多理由驱使我写作，我就列了几个我觉得对我影响比较大的方面，希望大家早早加入这个圈子，早点财富自由。
第二板斧：编程 作为一个程序员的我，肯定编程对于我来说至关重要，但是为什么鼓励全民学编程呢？
我鼓励大家学编程，但是没鼓励大家都去当程序员。外面都说程序员是『钱多人傻死得早』，可见程序员是多么辛苦的一门职业，其实无论哪门职业，只要你想赚更多的钱，就得花更多的时间。
但是我觉得每个人都应该学点编程，理由如下：
1. 学会一种思考方式 编程可以帮我们完成工作，但没有明确的实用性，重要的是我们把它看做思考的镜子，学习如何思考，你思考的问题清晰与否，对错与否，把代码敲出来运行一下就知道了。
学习编程会叫你如何思考，就像学法律一样，学法律的人未必都成为律师，但法律教你一种思考方式。
2. 编程可以培养冷静和逻辑化思维 要知道程序行为的对错，都是计算机运行错误，不会被个人意志左右，这让你冷静下来思考你赋予给计算机的算法是哪里错了。
在软件的世界里，每个细节都是环环相扣，不可能出现没有原因的问题，没有无因之果，锻炼你的逻辑化思维。
第三板斧：理财 在文章的开头，已经提到了「睡后」收入，理财就是一种很好的方式来增加睡后收入。
因为整个社会是存在着通货膨胀的，也就是说如果你把现金放在家里，甚至是存在银行，你的钱是会贬值的。
据统计，每年的通货膨胀是 6%~12%，根据上表，5 年利率最高的定期存款也才 4%，所以说存银行是没办法跑赢通货膨胀的。
由此可以看到我们就算为了跑赢通货膨胀也要学理财，让钱生钱。
理财的种类有很多种：储蓄、炒金、基金、炒股、国债、债券、外汇、保险、P2P。
每种理财不是每个人都适合，一般风险高的收益高，风险低的收益低，怎么来取舍这就是我们需要学习的。
提示：理财的前提是你本金越多，赚的才有可能更多，所以应该先努力赚钱，赚取更多的本金，然后一边学习理财。在我目前掌握的理财知识来看，指数基金是一种相对适合大多数人的一种理财方式。
最后，如果想获取写作的资料（包括书籍、视频），可以关注公众号 前端桃园，回复「写作」免费领取，或者加微信 lijian1076629390 免费领取。</description>
    </item>
    
    <item>
      <title>5 点可以让你提高面试通过率建议(干货)</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/323/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/323/</guid>
      <description>自从我发过几篇关于面试经历的文章，由于我面试结果还不错，所有很多人来询问我一些面试相关的问题， 我这里给到 5 点建议，希望对大家有帮助。
1. 简历里应该惜字如金 简历简历，可以分为简和历。简，简单简洁之意，历，经历，总体就是简单的表达自己的经历。
我看到一些人的简历写了四、五页，甚至十来页的都有，每个项目把细节都写出来了，甚至还把项目截图给贴在了简历里面，生怕面试官不能理解需求，我建议最多不超过 2 页，亮点能写两页就已经很牛逼了。
我相信有很多人工作了很多年，经历的项目很多，其实不需要把所有的项目都列出来，简历里是要展示自己的亮点，牛逼的点，这个亮点、牛逼的点事相对的，相对于自己所做的东西里面的，不是客观的牛逼(如果有当然更好，那必然也是你相对的里面的亮点，不冲突)。
这句话意味着两层意思：
很多人觉得自己的项目没有亮点的问题，因为你是那这别人更高的标准来衡量自己，所以你相对于别人没有亮点，这样你就写不出一份简历。 多个亮点类似的项目合并，或者只写一个，因为都是为了给面试官展示这一个亮点，写多了就是浪费空间，简历上面的字很珍贵。 第一层让你的简历有东西可写(增加)，第二层是让你把简历写得更优质(减少)。
2. 简历应该是你设计过的 「设计简历」可能对这个词有点迷惑，可能你第一感觉是设计得好看一点，其实我想表达的设计是一种「圈套」，给面试设计的「圈套」，下面我会举例子让你明白这个「圈套」是什么。
我举两个点：技术要点和项目经历。
技术要点(就是自己会哪些技术)和项目经历相信是简历里面必不可少的内容，但是也许你可能忽略了哪些应该写。
之前我给别人看简历的时候，我就会问他们写的技术点三个问题
你对这个技术点的掌握程度是什么样的？ 你对这个技术点准备了哪些问题？ 当问到了相关技术点的时候，你能回答到哪个层次？仅仅了解、用过一两次、熟练使用、还是掌握原理。。。 当你能清楚的回答完这三个问题之后，你对你自己的水平就有了一定的认识，同时你对自己是否符合这个岗位有了一定的判断。我的目的就是让你了解自己的水平，然后才能针对性的去复习，查漏补缺，自己心里要有一杆秤，自己把这个知识点掌握到这个程度，能不能胜任这个岗位。
当你了解了之后，然后根据你自己是否有充足的复习时间，你就可以去设计你的技术要点部分了，只写你准备好了的技术点，这个准备好了不是说掌握得很深才叫准备好了，就算是只能回答几个简单的问题也算是准备好了，就是你想准备，然后自己也去复习了的，这就叫准备好了，这样你在面试的时候才会胸有成竹。
这就是在套路面试官问你准备好的问题，因为技术官基本只会问你简历里面提到的技术点，所以自己要对自己简历里面的技术点有充足的准备(把一些常见的面试题刷一些也是非常有帮助的)。
第二点设计就是对于项目经历部分。项目经历这部分没有人比你更熟悉，所以如果问到项目经历应该是你的地盘，是你给面试官展示你的项目有多牛逼，你在里面发挥了多大的价值，带来了多大的成果，你要非常自信的去给他讲解。
你的自信来源于什么？你非常了解这个项目的需求(为什么要做这个项目)、项目价值(做了之后怎么样了)，以及整个项目的技术方案，架构体系(怎么做的)，最重要的是你负责的或者参与的。
同时，你再把你在项目中遇到的一些**难点，和解决方案总结下来，**那么项目这块就是你的主战场了。
划重点：上面我所说的，最好最好是要准备，也就是说最好你要写下来，然后可以没事儿自己问自己上面的这些问题，然后自己去回答。
你可能会说，哇，那要准备好多东西哦，所以说啊，项目不用写太多，就把觉得自己最牛逼的、最熟悉的两、三个项目总结下来就够了，在项目这块比的不是数量，而是质量。 **
项目经历这块在面试的时候面试官会问你一些问题，比如一些其他的解决方案，如果当时想到了，或者面完了想到了，记得补充进去。
3. 选常用的东西去准备 前端的技能要求很多，就算解决同一个问题的解决方案也会有很多个，比如解决视图的，就有 React、Vue，构建的就有 Webpack、Rollup、Parcel ，React 状态管理也有 Redux、Mbox、unstate 等。
如果你的脑袋里面都装着这些东西，那么你肯定是复习不完的了，我的建议是把你项目用常用的东西好好准备，尽量不要让面试官把你常用的东西还问倒了，如果你平时用的东西你都没有掌握得好，你觉得面试官会觉得你平时不用的东西掌握好了吗？
4. 准备一份自我介绍 准备一份自我介绍，不是简简单单的准备，而是自己要写下来，然后对着稿子练习一下。可能你会觉得很麻烦，有必要吗？我说两点：
自我介绍是每个面试官，每场面试都会问的，没有哪个面试题有如此高的频率，100% 中的面试题不值得去好好准备吗？ 上面我说了简历是去套路面试官问哪些东西？而自我介绍就是去套路面试官怎么去问的一个很好的方式，因为往往面试官会在你自我介绍之后，会问几个你自我介绍里面所包含的东西，自我介绍的结尾，也许就是面试题的开始。 这个一个很好的引导面试官怎么问的方式。
5. 职业规划 职业规划这个，其实也是一个高频面试题，不管是面试官还是 HR，都喜欢问的一个问题，这个题没有标准答案，我说一下我的一些看法。
职业规划我觉得可以从三个方面去谈：
我想做什么？(兴趣、价值观等方面) 我能做什么？(你的知识、技术、经历等方面来支持) 环境支持我做什么(意味着未来)？(外部环境，公司、团队) 大致你可以像这样去回答，我的兴趣是 XXX，优势是 XXX，因此我选择了前端，这是一个可以将我的兴趣和工作结合起来的行业，是我非常喜欢的，所以我会很用心对待这个工作。我之前做过 XX，有了 XX 的经验，然后觉得很有意思，想继续深挖(当然你也可以说，我之前一直在做 XXX，以后想换一种 XXX 技术)。近期我打算研究 XXX，后续可以在 XXX 上独当一面，独立负责 XXXX 事务,解决 XXXX 问题。谈到远期规划，我会根据环境的变化，工作内容的变化，以及我自身能力的变化，不断进行调整的。</description>
    </item>
    
    <item>
      <title>三个比它们等效 ES5 速度慢的 ES 6 函数</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/226/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/226/</guid>
      <description>[Meting] [Music server=&amp;ldquo;tencent&amp;rdquo; id=&amp;ldquo;000AwJtd3Wp27b&amp;rdquo; type=&amp;ldquo;song&amp;rdquo;/] [/Meting]
我在 medium 上看到一篇 3 JavaScript Performance Mistakes You Should Stop Doing 文章(点击阅读全文可以查看原文，需要科学上网)，大概意思就是说有 3 个 JavaScript 性能错误，你不应该再去写了。很多“歪果仁”也是一看到这个标题就开始**“喷”**作者了，下文会详细说。我先介绍下这篇文章的主要内容
文章主要内容： 当 ES5 发布的时候，JavaScript 引入了很多新的数组函数。其中包括 forEach，reduce，map，filter - 它们让我们感觉语言在不断增长，功能越来越强大，编写代码变得更加有趣和流畅，结果更易于阅读和理解。
大约在同一时间，一个新的环境&amp;ndash;Node.js，它使我们能够从前端到后端平稳过渡，同时真正重新定义完整的全栈开发。
所以作者就测试了一下新提供的这些方法是否会影响我们程序的性能。他在 macOS 上对Node.js v10.11.0 和 Chrome 浏览器执行了以下测试。
1. 循环数组
他想到的第一次很常见的场景，就是计算一下 10k 项的总和。然后比较了使用 for，for of，while，forEach 和 reduce 的随机 10k 项的总和。运行测试 10,000 次返回以下结果：
For Loop, average loop time: ~10 microsecondsFor-Of, average loop time: ~110 microsecondsForEach, average loop time: ~77 microsecondsWhile, average loop time: ~11 microsecondsReduce, average loop time: ~113 microseconds 在谷歌搜索如何对数组求和时，reduce 是最好的解决方案，但它是最慢的。即使是最新的（ES6）也提供了较差的性能。事实证明，老的 for 循环提供了迄今为止最好的性能 - 超过 10 倍以上！</description>
    </item>
    
    <item>
      <title>为什么javascript经常被黑？</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/96/</guid>
      <description>前言 这个问题是知乎上有人邀我回答的，感觉挺有意思的，所以发出来大家讨论下
1. 语言自身问题 Javascript 之父在花 10 天设计出来的，再牛逼的人，10 天设计出来的肯定会有很多设计不合理的东西，哪些不合理的东西，可以去看《JavaScript语言精粹》，导致这本语言一直是最具争论的一门语言。
但是背负着这么大的舆论，那么多很烂的特性，还要兼容各种浏览器，js 还能发展得这么好，web前端，移动，服务端，桌面端，甚至游戏，物联网，机器学习等，可见那些好的特性还是非常好的，具体可以看我的这篇文章&amp;ndash;Javascript 是最好的语言，不服来辩。
2. 开发者水平差距太大 js 这门语言虽然能做的事儿很多，主要还是用在写前端上，对于前端这门职业，相对其他方向比较简单，容易上手，不需要太多计算机基础知识，导致刚培训出来的，或者自学的同学，可能见的世面比较少，学了点 node，会用 express 了，就说自己是全栈，所以就黑前端，前端一想就是 js 不好
3. javascript 相对还是比较简单 有没有发现，越简单的越容易被人黑，比如 vue，vue 被黑的次数比 react 多多了，说 vue 是新手玩的，没水平，就连正妹也说过类似的话，我记得是在哪里看到过他在某个群里说过的，如果是p的就忽略。但是简单就不代表不好，简单能达到同样功能不应该更伟大吗？
4. 门槛低 社区高水平的不多，或者说门槛太低，什么人都有。
这个我就拿 emacs 社区举例，emacs 社区是真的好，文档质量超高，目前是我见到社区质量最好的，因为门槛高，学 emacs 的大部分都是真正喜欢敲代码的，而不是喜欢撕逼的，跟第二点一样，前端圈水平低的太多，导致 js 被黑。
5. 前端发展太快 前端发展太快， js 框架层出不穷，然后经常会有各种框架之间的撕逼，某某框架好啥啥啥的，才会有大漠老师事件等，这种机会让其他圈看笑话了，说我们前端圈是真的乱，好好敲代码不好嘛，争哪个框架好有啥意义，又不是你写的，争赢了自己脸上又不贴金，在此引用狼叔说的，少抱怨，多做事。有本事自己写一个框架然后说服别人你这框架比尤大的 vue 好。
结束语 最后我觉得 javascript 挺好的，然后希望作为前端的我们，静下心来好好学习，别让其他圈的看我们的笑话，最后还是想说， Javascript 是最好的语言，不服来辩。</description>
    </item>
    
    <item>
      <title>另一个视角看待这次 antd</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/191/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/191/</guid>
      <description>公众号相信大家今天都已经知道了 antd 这次的事故了，不知道的简单回顾一下。
今天圣诞节，所以在 type 是 primary 的 Button 上都加上了雪花。
就是在 antd 3.9.3 的时候增加了一个定时器，到 12 月 25 的时候增加一个 christmas 的 css 类，还给 title 改为了 Ho Ho Ho。具体 commit 见：https://github.com/ant-design/ant-design/commit/00aebeb9756afecc884ad48486084836b9a2707a
然后就导致今天开发者早上一来看，就觉得莫名其妙，还以为是病毒啥的，还有人因此被解雇(issue 上说的，不知道是否是真)，总之，这个事情还是挺严重的。
作为一个有温度的前端号，肯定不是带你们吃瓜的，要是带你们吃瓜，肯定大早上的这篇文章就出来了，我们从另外的角度来看下这个问题。
功不抵过
开源及责任
批评没有任何好处
功不抵过 Antd 作为全世界最好的 React 前端组件库之一，目前将近 4 万的 star，国内外很多企业都会使用 antd 做前端开发。
我估计最近几年大部分人接触 React 的人，使用的 UI 库都会是 antd，Vue 的话可能 Element UI 和 iView 还可以拼杀一下，但是 antd 在 React 界是绝对的老大，这是 antd 的功。
但是这一次彩蛋事件，就导致很多人因此而放弃它。
然后网上骂声一片。
这是为什么呢？
因为这次失误触犯了使用者的底线，本来使用 antd 就是因为他的稳定，用起来放心。
结果这个彩蛋，出其不意，在没有给用户任何提示的情况下，悄悄的代码里面加一些“副作用”，导致让用户感觉用 antd 不再放心，担心下次加点获取用户信息啥的。</description>
    </item>
    
    <item>
      <title>我也想做自己喜欢做的事儿</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/301/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/301/</guid>
      <description>我今天看到一视频，给了我非常大感触。是 B 站上的一个视频，标题名叫：《这有可能是我最后一期视频了，再见了 B 站》， 视频链接可以点击「原文链接」得到。
这个视频大概讲的是这样：
一个富二代，大学毕业以后没有去家里帮爸妈，由于自己非常喜欢游戏，所以就想做自媒体，自己赚钱养自己，做了差不多一年半，在 B 站拥有不多不少的 25 万粉丝，由于他自己喜欢的是单机游戏，但是国内喜欢单机游戏的人太少，所以在 B 站涨粉缓慢，慢慢的，迫于生计，不得追求快速涨粉，不至于入不敷出。
所以就开始做一些自己不喜欢的视频，比如热点视频，电影娱乐等，因为这些看的人多，涨粉相对较快，但是自己并不喜欢这些视频。以前自己做的游戏视频做完之后会回味好几遍，但是现在做的这些视频自己非常不喜欢，做完之后完全没有动力去看。
突然有一天他的爸妈给他买了一套 1600 万的房子，加上装修可能 1700 万左右，但是他爸妈只付了首付(他爸妈能全款买得起)，剩下的贷款要让他自己还，目的就是要让他回去帮家里的忙，因为他做自媒体根本换不起这个贷款。
一个月贷款要还 3 万多，他做 B 站一年半才赚了 10 万，他爸妈就质问他，你觉得你做现在这个职业有前途吗？能还得起这个房贷吗？如果将来你的儿子想住这么大的房子你买得起吗？
他就开始思考当初的初心，自己做自媒体是为了赚钱，现在家里有四个厂，家里父母也 50 了，回去帮忙岂不是能花更少的时间赚更多的钱。
所以他就关了自己的工作室，不再做自己不喜欢的视频，并且回家去继承家业。
看完这段视频莫名的感到了一丝心酸和无奈。
心酸的是很多做自媒体(包括我自己)的刚开始都是做自己喜欢的东西，后来慢慢的为了粉丝向营销号靠拢，远离了自己的初心，这视频作者可以回家继承家产，而剩下的那些远离了初心的人又会何去何从呢？
无奈的是即使家里这么有钱，不想靠着父母打拼出一番事业，但是在房贷的压力下，以及对自己能力确实不太能够打拼出一番事业，最后只能回家靠父母的无奈。
这种富二代他们一次一次的失败之后，还是会有退路(回家继承家产)，但是对于我们普通人来说，就没有退路，只能向前冲，就得努力赚钱。
但是在自己能力还没到的时候，做自己想做的事的时候，又赚不了那么多钱，所以只能违背这自己的初心，去赚一些合法的钱。
在这种金钱和自己喜欢的东西做斗争的时候，我无法给出应该选择哪种的建议。可能站在局外人来说，当然做自己喜欢的事儿呀，把事情做好，然后赚钱是自然的。
道理谁都懂，但是我觉得这是在考验人性的时候，当这件事儿发生在你的身上可能就不一定会这么做，因为我遇到太多太多这样的人了，只有非常少数的人能坚持自己的原则，这种人往往就缺少一个贵人，等待一个爆发期，但是在爆发期来临之前，又有多少人能坚持下来呢，很难说。
最后想说的是还是想做那个最初想做的人，把这个公众号做成自己喜欢的样子，提供一些在其他地方看不到的稀缺的有价值的东西，跟我公众号的 slogon 一样：成为自己想成为的那个样子。 每天花一小时来写文章，而不是花半个小时来找一篇好的文章。
其实我很希望你们可以给我多留言，多跟我交流你们的想法，而不是向我提一些问题，让我解答，两者之间的区别在于我们两是否在同一个水平，是否双方都会受益。
所以我喜欢你在请教我一些东西的时候，你已经做好了功课，咱们在此次对话中花了这么多时间，都能得到一些价值。
虽然我不是一个大 V，但是我还是很忙，有我自己的事儿，每天向我请教的人又特别多，我目前不想专门开一个付费的知识星球来回答问题，然后出售我的时间。
如果你希望和我交流，可以在公众号后台回复「微信」，联系到我。
最后如果你还愿意继续关注我的话，可以留个言，点个好看，甚至帮我多转发文章。</description>
    </item>
    
    <item>
      <title>根据 React 历史来聊如何理解虚拟 DOM</title>
      <link>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/293/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/293/</guid>
      <description>最近我发现很多面试题里面都有「如何理解虚拟 DOM」这个题，我觉得这个题应该没有想象中那么好答，因为很多人没有真正理解虚拟 DOM 它的价值所在，我这篇从虚拟 DOM 的诞生过程来引出它的价值以及历史地位，帮助你深入的理解它。
什么是虚拟DOM 本质上是 JavaScript 对象，这个对象就是更加轻量级的对 DOM 的描述。
对，就是这么简单！
就是一个复杂一点的对象而已，没什么好说的，重点是为什么要有这个东西，以及有了这个描述有什么好处才是我们今天要介绍的内容。
为什么要有虚拟DOM 再谈为什么要用虚拟 DOM 之前，先来聊一聊 React 是怎么诞生的，毕竟在了解历史背景，再去思考他的诞生，就知道是必然会出现的。
再查了很多关于 React 的历史相关的文章，这篇文章我感觉比较值得令我信服：React 是怎样炼成的。
众所周知，Facebook 是 PHP 大户，所以 React 最开始的灵感就来至于 PHP。
字符串拼接时代 - 2004 在 2004 年这个时候，大家都还在用 PHP 的字符串拼接来开发网站：
$str = &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;; foreach ($talks as $talk) { $str += &amp;#39;&amp;lt;li&amp;gt;&amp;#39; . $talk-&amp;gt;name . &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;; } $str += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;; 这种方式代码写出来不好看不说，还容易造成 XSS 等安全问题。
应对方法是对用户的任何输入都进行转义（Escape）。但是如果对字符串进行多次转义，那么反转义的次数也必须是相同的，否则会无法得到原内容。如果又不小心把 HTML 标签（Markup）给转义了，那么 HTML 标签会直接显示给用户，从而导致很差的用户体验。
XHP 时代 - 2010 到了 2010 年，为了更加高效的编码，同时也避免转义 HTML 标签的错误，Facebook 开发了 XHP 。XHP 是对 PHP 的语法拓展，它允许开发者直接在 PHP 中使用 HTML 标签，而不再使用字符串。</description>
    </item>
    
  </channel>
</rss>
