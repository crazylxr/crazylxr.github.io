<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005-Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Alfred on 桃园</title>
    <link>/tags/alfred/</link>
    <description>Recent content in Alfred on 桃园</description>
    <image>
      <title>桃园</title>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator><atom:link href="/tags/alfred/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端桃园周刊第四期</title>
      <link>/posts/%E6%A1%83%E5%9B%AD%E5%91%A8%E5%88%8A/289/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E6%A1%83%E5%9B%AD%E5%91%A8%E5%88%8A/289/</guid>
      <description>一句话知识 npm v packageName versions npm v packageName versions 查看包的所有版本，不加s 获取新版本。用途，安装了包但是 package.json 里面没有包，需要手动填入的时候。
typeof null 为什么返回 &amp;ldquo;object&amp;rdquo;？ 不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。
in 和 hasOwnProperty 区别 in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中。相比之下， hasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链。
for in 和 for of 的区别 for in 用于对象的遍历，会遍历原型上可以枚举的属性
for of 用于遍历可迭代的对象，比如数组，因为数组里面是有迭代器的，凡是有迭代器的对象都可以用 for of 来遍历
对 constructor 的误解 对象的 constructor 实际上不是对象创建的时候有的，而是通过委托到 prototype 上找的。
function Foo() { /* .</description>
    </item>
    
  </channel>
</rss>
